Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL Interface", "Testing"], "terms": {"python": [0, 38, 39, 81, 109, 120, 121, 126, 128, 142, 143, 145, 161, 210, 216, 242, 243, 263, 295, 309, 324, 394, 399, 403, 467, 551, 553, 555, 661, 738, 755, 756, 758, 759, 801, 802, 804, 814, 820, 840, 915, 927, 939, 1013, 1017, 1029, 1030, 1031, 1037, 1170, 1244, 1304, 1325], "api": [0, 109, 140, 161, 216, 295, 309, 555, 777, 814, 915, 1170, 1325], "refer": [0, 37, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 309, 312, 394, 434, 437, 553, 603, 659, 676, 677, 693, 695, 696, 700, 814, 840, 927, 1052, 1055, 1190, 1259, 1260, 1276, 1278, 1279, 1283, 1325, 1329], "datafram": [0, 1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 79, 94, 96, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 137, 138, 139, 143, 144, 147, 148, 159, 307, 308, 312, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 810, 814, 826, 835, 836, 839, 841, 845, 846, 850, 853, 861, 862, 863, 864, 866, 867, 871, 872, 876, 879, 889, 891, 897, 898, 899, 904, 907, 908, 909, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 1007, 1008, 1048, 1073, 1091, 1170, 1188, 1249, 1267, 1268, 1292, 1300, 1301, 1313, 1325, 1333, 1334], "lazyfram": [0, 1, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 134, 135, 136, 137, 138, 139, 140, 143, 144, 150, 214, 230, 231, 255, 309, 463, 543, 814, 826, 926, 932, 1333, 1334], "seri": [0, 1, 12, 26, 53, 55, 56, 57, 58, 62, 63, 72, 83, 91, 92, 97, 108, 110, 113, 115, 143, 145, 146, 150, 173, 182, 185, 188, 190, 193, 198, 201, 202, 203, 205, 207, 209, 217, 218, 219, 220, 224, 225, 236, 237, 238, 240, 244, 257, 258, 262, 265, 267, 269, 270, 288, 309, 323, 324, 335, 358, 362, 370, 371, 373, 430, 460, 463, 466, 470, 471, 479, 484, 487, 488, 491, 493, 494, 495, 507, 514, 516, 541, 543, 549, 551, 553, 555, 603, 604, 605, 606, 607, 608, 612, 613, 614, 625, 636, 639, 663, 693, 694, 695, 696, 700, 704, 712, 713, 717, 722, 731, 733, 737, 746, 747, 750, 751, 755, 756, 758, 759, 764, 766, 770, 771, 774, 775, 776, 777, 787, 789, 790, 793, 796, 801, 802, 805, 814, 826, 849, 853, 880, 908, 927, 931, 1317, 1319, 1321, 1324, 1326, 1329, 1330, 1331, 1332, 1334], "express": [0, 9, 43, 44, 45, 46, 60, 61, 147, 150, 154, 164, 178, 180, 182, 192, 195, 216, 227, 231, 241, 246, 247, 250, 254, 266, 271, 272, 282, 283, 285, 287, 295, 309, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 341, 342, 343, 346, 357, 362, 363, 364, 365, 366, 368, 374, 377, 378, 379, 380, 391, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 457, 459, 460, 462, 463, 467, 469, 470, 472, 473, 474, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 497, 500, 501, 505, 506, 508, 509, 510, 513, 514, 520, 522, 542, 543, 549, 550, 552, 553, 554, 555, 559, 560, 561, 562, 563, 564, 566, 567, 569, 571, 573, 575, 576, 578, 580, 582, 583, 586, 587, 589, 591, 592, 596, 597, 598, 599, 600, 602, 606, 607, 608, 610, 611, 634, 635, 636, 638, 640, 642, 643, 645, 647, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 676, 677, 682, 683, 684, 685, 694, 698, 707, 708, 709, 712, 714, 715, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 784, 786, 787, 789, 790, 791, 792, 793, 794, 796, 798, 800, 801, 802, 804, 805, 810, 813, 826, 830, 835, 836, 844, 845, 846, 849, 852, 855, 876, 882, 883, 886, 887, 888, 890, 896, 902, 903, 904, 906, 907, 915, 927, 931, 932, 956, 991, 1006, 1013, 1016, 1017, 1034, 1073, 1079, 1096, 1128, 1129, 1132, 1170, 1194, 1214, 1220, 1221, 1234, 1236, 1237, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1259, 1260, 1277, 1281, 1325], "selector": [0, 37, 165, 172, 174, 178, 222, 229, 231, 264, 266, 271, 274, 276, 309, 457, 463, 814, 826, 832, 841, 842, 845, 871, 897, 927], "function": [0, 37, 38, 53, 54, 55, 56, 57, 58, 61, 70, 72, 91, 92, 109, 113, 115, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 143, 144, 145, 146, 148, 157, 159, 161, 162, 169, 177, 185, 216, 222, 230, 231, 235, 255, 266, 267, 268, 271, 273, 276, 277, 289, 295, 309, 320, 324, 358, 391, 392, 394, 431, 453, 455, 456, 477, 543, 551, 552, 553, 555, 566, 576, 577, 592, 596, 600, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 644, 716, 727, 731, 732, 743, 745, 746, 747, 750, 751, 752, 753, 763, 764, 766, 768, 769, 772, 775, 776, 777, 780, 782, 785, 786, 787, 789, 791, 792, 795, 799, 803, 805, 810, 814, 826, 836, 840, 846, 866, 867, 871, 875, 878, 884, 891, 899, 906, 909, 915, 927, 931, 939, 972, 986, 1006, 1007, 1049, 1071, 1072, 1074, 1075, 1091, 1162, 1170, 1188, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1216, 1223, 1228, 1303, 1304, 1306, 1308, 1325, 1334], "data": [0, 1, 2, 11, 19, 20, 22, 29, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 53, 54, 55, 57, 60, 61, 62, 67, 68, 69, 71, 80, 81, 83, 84, 92, 97, 98, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 167, 178, 179, 191, 192, 193, 194, 195, 196, 197, 210, 211, 212, 214, 216, 229, 230, 234, 240, 241, 242, 243, 252, 261, 266, 267, 268, 271, 273, 282, 286, 307, 309, 320, 321, 322, 326, 327, 328, 329, 330, 331, 334, 337, 338, 339, 340, 341, 343, 346, 348, 349, 350, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 369, 370, 374, 377, 378, 379, 380, 392, 393, 394, 399, 400, 401, 402, 405, 406, 407, 409, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 431, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 459, 470, 472, 473, 474, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 500, 501, 505, 506, 508, 514, 520, 522, 530, 542, 544, 550, 555, 586, 587, 591, 592, 600, 602, 603, 606, 607, 608, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 642, 643, 644, 650, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 682, 683, 684, 685, 693, 694, 695, 696, 698, 700, 703, 714, 715, 716, 719, 720, 723, 726, 731, 733, 743, 754, 755, 756, 757, 758, 759, 760, 770, 771, 773, 774, 775, 776, 777, 787, 790, 800, 801, 802, 805, 810, 814, 826, 833, 834, 835, 836, 840, 845, 846, 852, 853, 854, 855, 856, 857, 875, 880, 902, 927, 936, 937, 949, 951, 952, 953, 954, 955, 957, 959, 960, 971, 973, 975, 976, 977, 981, 982, 984, 990, 991, 994, 1007, 1008, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1073, 1077, 1078, 1091, 1098, 1100, 1101, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1122, 1123, 1124, 1125, 1127, 1133, 1139, 1141, 1149, 1161, 1163, 1170, 1182, 1188, 1190, 1194, 1195, 1197, 1198, 1210, 1212, 1223, 1228, 1233, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1265, 1266, 1267, 1268, 1276, 1277, 1278, 1279, 1281, 1283, 1286, 1304, 1305, 1306, 1307, 1310, 1315, 1324, 1325, 1333], "type": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 43, 44, 45, 46, 47, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 108, 110, 111, 112, 113, 114, 116, 120, 121, 122, 124, 125, 129, 130, 131, 132, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 162, 178, 185, 191, 193, 194, 196, 197, 198, 211, 212, 216, 240, 261, 266, 267, 270, 271, 274, 285, 309, 320, 322, 326, 327, 328, 329, 330, 331, 334, 339, 340, 341, 343, 346, 357, 358, 362, 363, 364, 365, 366, 369, 370, 371, 374, 377, 378, 379, 380, 392, 393, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 457, 459, 470, 473, 475, 482, 483, 484, 485, 486, 487, 488, 489, 490, 501, 505, 506, 508, 514, 520, 522, 542, 543, 553, 555, 600, 602, 606, 607, 608, 610, 611, 612, 642, 643, 650, 653, 654, 655, 656, 658, 659, 660, 661, 663, 666, 667, 668, 682, 683, 684, 685, 693, 694, 698, 714, 715, 716, 723, 731, 733, 743, 754, 755, 756, 757, 758, 759, 760, 762, 770, 771, 773, 774, 775, 776, 777, 787, 790, 800, 801, 802, 805, 810, 814, 826, 835, 836, 844, 845, 846, 853, 854, 856, 857, 861, 876, 880, 888, 897, 906, 927, 936, 937, 949, 951, 952, 953, 954, 955, 957, 959, 960, 971, 972, 973, 975, 976, 977, 981, 982, 984, 991, 1007, 1008, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1073, 1077, 1089, 1098, 1100, 1101, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1122, 1123, 1124, 1125, 1127, 1133, 1139, 1141, 1161, 1162, 1182, 1188, 1194, 1195, 1197, 1198, 1223, 1233, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1246, 1249, 1250, 1251, 1265, 1266, 1267, 1268, 1276, 1277, 1281, 1304, 1305, 1307, 1316, 1325, 1333], "input": [0, 54, 60, 111, 113, 120, 121, 164, 172, 192, 195, 216, 220, 229, 235, 246, 247, 250, 254, 258, 272, 282, 283, 287, 309, 317, 368, 374, 454, 457, 469, 482, 547, 553, 554, 555, 564, 592, 607, 647, 663, 682, 689, 690, 691, 692, 694, 707, 718, 726, 728, 730, 731, 733, 736, 739, 740, 741, 749, 753, 760, 762, 770, 771, 774, 775, 776, 777, 779, 781, 784, 793, 796, 798, 804, 814, 826, 830, 841, 852, 855, 878, 882, 883, 884, 886, 890, 896, 902, 903, 907, 927, 931, 991, 1073, 1096, 1166, 1167, 1170, 1194, 1220, 1246, 1265, 1277, 1325], "output": [0, 9, 31, 34, 37, 38, 39, 40, 41, 43, 162, 171, 193, 194, 196, 197, 210, 216, 220, 223, 229, 231, 240, 242, 246, 258, 278, 282, 309, 320, 322, 324, 346, 392, 454, 520, 543, 551, 552, 553, 555, 563, 566, 576, 600, 612, 619, 623, 626, 630, 650, 668, 723, 727, 728, 729, 730, 731, 741, 742, 755, 756, 775, 776, 777, 814, 826, 839, 844, 853, 854, 856, 857, 866, 867, 871, 872, 880, 882, 884, 902, 909, 915, 927, 936, 937, 939, 960, 1007, 1073, 1139, 1170, 1188, 1233, 1251, 1313, 1325], "config": [0, 54, 171, 246, 266, 282, 309, 652, 678, 756, 759, 760, 826, 835, 839, 882, 902, 927, 1235, 1261], "extend": [0, 111, 280, 309, 460, 814, 826, 931, 938, 1079, 1325], "plugin": [0, 814, 826], "sql": [0, 35, 47, 51, 122, 123, 212, 250, 309, 353, 535, 637, 773, 794, 814, 826, 886, 927, 967, 1154, 1220, 1325], "interfac": [0, 826], "except": [0, 143, 199, 213, 215, 259, 309, 663, 694, 762, 826, 862, 927, 932, 1090, 1121, 1246, 1277, 1294, 1305, 1315, 1325], "test": [0, 2, 35, 122, 123, 125, 131, 309, 826, 858, 865, 927], "metadata": [0, 136, 193, 194, 196, 197, 240, 309, 826, 853, 854, 856, 857, 880, 927], "These": [1, 37, 117, 122, 123, 159, 273, 309, 445, 813, 814, 931, 1049, 1063], "allow": [1, 9, 36, 37, 43, 44, 45, 46, 53, 92, 97, 109, 122, 125, 134, 137, 138, 139, 140, 147, 150, 151, 154, 161, 210, 213, 214, 241, 242, 244, 267, 268, 271, 274, 286, 309, 427, 434, 437, 530, 553, 555, 605, 634, 693, 695, 696, 814, 861, 862, 866, 867, 871, 897, 904, 927, 931, 932, 1045, 1052, 1055, 1070, 1149, 1170, 1192, 1212, 1215, 1276, 1278, 1279, 1305, 1306, 1325, 1334], "you": [1, 11, 15, 37, 42, 46, 52, 54, 61, 62, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 125, 126, 129, 130, 134, 138, 140, 159, 179, 193, 194, 196, 197, 209, 210, 216, 227, 231, 240, 241, 242, 243, 263, 266, 273, 295, 309, 312, 399, 423, 424, 427, 430, 431, 434, 437, 445, 454, 457, 463, 482, 513, 543, 553, 555, 605, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 652, 667, 676, 677, 678, 704, 738, 746, 755, 760, 764, 777, 787, 790, 805, 814, 836, 842, 853, 854, 856, 857, 858, 865, 880, 888, 891, 915, 927, 931, 932, 1013, 1041, 1042, 1048, 1049, 1052, 1055, 1063, 1078, 1096, 1132, 1170, 1192, 1235, 1250, 1259, 1260, 1261, 1279, 1303, 1315, 1325, 1329, 1334], "regist": [1, 47, 49, 50, 51, 52, 55, 56, 57, 58, 153, 155, 255, 309, 814, 891, 927, 931, 1333], "custom": [1, 28, 36, 37, 55, 56, 57, 58, 153, 155, 162, 171, 216, 231, 289, 295, 309, 324, 358, 399, 434, 437, 543, 551, 553, 555, 613, 614, 723, 731, 738, 775, 776, 777, 814, 839, 866, 867, 909, 915, 927, 939, 972, 1013, 1052, 1055, 1162, 1170, 1199, 1200, 1313, 1325, 1334], "dedic": [1, 109, 210, 242, 309], "namespac": [1, 122, 308, 309, 704, 813, 826, 926, 1325, 1334], "underli": [1, 53, 68, 69, 71, 84, 92, 95, 101, 108, 110, 111, 112, 114, 122, 123, 125, 129, 130, 132, 138, 147, 150, 154, 178, 179, 210, 211, 242, 261, 267, 309, 363, 401, 402, 403, 407, 411, 413, 414, 415, 417, 418, 420, 422, 425, 428, 429, 430, 432, 446, 447, 448, 449, 605, 632, 651, 655, 662, 814, 845, 927, 932, 976, 985, 1015, 1016, 1017, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1048, 1050, 1064, 1065, 1066, 1067, 1078, 1192, 1210, 1223, 1234, 1238, 1245, 1299, 1305, 1325], "polar": [1, 309, 312, 813, 814, 820, 826, 927, 931, 932, 1325, 1329, 1333], "class": [1, 18, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 147, 148, 243, 309, 801, 810, 814, 820, 826, 927, 1304, 1325, 1333], "without": [1, 38, 43, 44, 45, 46, 59, 60, 61, 70, 72, 115, 124, 127, 132, 133, 135, 136, 139, 140, 255, 266, 267, 271, 276, 277, 309, 324, 391, 392, 431, 477, 555, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 652, 678, 743, 791, 792, 793, 814, 835, 836, 891, 899, 927, 983, 986, 1006, 1007, 1049, 1091, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1235, 1261, 1303, 1304, 1305, 1308, 1325], "requir": [1, 36, 37, 54, 113, 122, 123, 143, 144, 145, 146, 164, 169, 241, 266, 267, 268, 271, 272, 309, 359, 453, 455, 456, 544, 555, 592, 616, 618, 620, 622, 624, 627, 629, 631, 639, 693, 695, 696, 720, 790, 814, 830, 890, 896, 927, 973, 1072, 1074, 1075, 1163, 1222, 1276, 1278, 1279, 1305, 1306, 1310, 1325, 1329], "subclass": [1, 309], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 178, 180, 181, 212, 213, 227, 231, 241, 246, 247, 266, 271, 282, 283, 309, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 814, 815, 816, 819, 820, 821, 822, 823, 845, 847, 848, 861, 862, 877, 882, 883, 887, 902, 903, 927, 931, 932, 1006, 1013, 1016, 1017, 1034, 1045, 1063, 1073, 1080, 1081, 1085, 1128, 1132, 1138, 1155, 1159, 1221, 1234, 1240, 1245, 1269, 1295, 1325], "ar": [1, 11, 12, 18, 21, 31, 34, 36, 37, 43, 44, 45, 46, 52, 53, 54, 61, 62, 91, 92, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 150, 151, 152, 154, 159, 161, 164, 169, 171, 174, 177, 180, 184, 185, 191, 192, 193, 194, 195, 196, 197, 210, 212, 213, 214, 216, 222, 223, 229, 231, 240, 241, 242, 243, 246, 247, 248, 250, 254, 255, 262, 266, 267, 268, 271, 272, 277, 278, 282, 283, 286, 287, 309, 320, 322, 337, 353, 358, 367, 368, 374, 382, 384, 385, 399, 431, 445, 450, 452, 453, 454, 455, 456, 461, 482, 484, 487, 488, 491, 493, 494, 495, 498, 503, 535, 543, 553, 554, 587, 592, 600, 603, 606, 607, 608, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 637, 641, 644, 646, 647, 661, 663, 664, 666, 673, 674, 675, 676, 677, 682, 694, 698, 703, 707, 710, 717, 718, 727, 728, 730, 736, 739, 740, 741, 742, 745, 749, 753, 755, 756, 758, 759, 779, 781, 784, 793, 796, 798, 801, 802, 804, 806, 807, 809, 813, 814, 815, 816, 819, 820, 821, 822, 823, 826, 830, 835, 836, 839, 842, 846, 847, 852, 853, 854, 855, 856, 857, 858, 861, 862, 865, 867, 871, 872, 876, 878, 880, 882, 883, 885, 886, 890, 891, 896, 899, 902, 903, 904, 907, 927, 931, 932, 936, 937, 951, 967, 972, 983, 991, 1000, 1001, 1013, 1049, 1063, 1069, 1071, 1072, 1073, 1074, 1075, 1080, 1083, 1088, 1096, 1100, 1104, 1105, 1109, 1110, 1111, 1112, 1119, 1122, 1154, 1162, 1188, 1190, 1194, 1195, 1206, 1220, 1225, 1228, 1244, 1246, 1247, 1256, 1257, 1258, 1259, 1260, 1265, 1277, 1279, 1281, 1286, 1293, 1303, 1305, 1306, 1315, 1317, 1319, 1321, 1325, 1326, 1330, 1331, 1332, 1334], "all": [1, 5, 9, 14, 18, 21, 26, 31, 34, 36, 37, 43, 49, 54, 60, 67, 100, 108, 113, 120, 121, 124, 125, 126, 128, 131, 132, 134, 137, 138, 147, 148, 151, 154, 159, 163, 165, 171, 174, 181, 199, 205, 207, 209, 210, 211, 212, 214, 215, 220, 222, 226, 227, 231, 234, 241, 242, 243, 247, 253, 255, 258, 259, 264, 266, 267, 271, 274, 276, 277, 278, 283, 285, 309, 321, 323, 346, 361, 368, 380, 391, 397, 398, 399, 400, 457, 462, 468, 475, 478, 480, 484, 488, 494, 495, 497, 501, 512, 513, 520, 539, 543, 552, 553, 572, 575, 576, 578, 579, 580, 581, 582, 583, 590, 598, 603, 607, 609, 614, 639, 645, 647, 653, 654, 660, 661, 663, 666, 671, 677, 681, 687, 688, 689, 690, 694, 709, 718, 728, 738, 746, 747, 748, 749, 752, 753, 755, 762, 764, 769, 770, 773, 781, 789, 796, 797, 798, 804, 814, 820, 826, 829, 832, 835, 836, 839, 842, 844, 846, 848, 861, 866, 867, 871, 876, 883, 888, 889, 891, 897, 899, 903, 904, 906, 927, 932, 960, 1006, 1008, 1011, 1012, 1013, 1014, 1090, 1098, 1116, 1121, 1131, 1132, 1139, 1158, 1162, 1190, 1194, 1200, 1229, 1236, 1237, 1243, 1244, 1246, 1249, 1254, 1260, 1264, 1270, 1271, 1272, 1273, 1277, 1294, 1305, 1325, 1333, 1334], "support": [1, 35, 36, 37, 42, 62, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 139, 147, 151, 154, 159, 210, 211, 212, 213, 217, 219, 224, 242, 243, 253, 254, 257, 263, 268, 271, 309, 454, 536, 592, 607, 645, 647, 663, 676, 677, 678, 682, 694, 810, 814, 820, 861, 862, 889, 890, 927, 932, 1073, 1155, 1194, 1229, 1246, 1259, 1260, 1261, 1265, 1277, 1306, 1308, 1325, 1333], "target": [1, 35, 36, 37, 59, 125, 271, 309, 659, 693, 695, 696, 932, 1242, 1276, 1278, 1279], "thi": [1, 2, 5, 11, 13, 15, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 161, 162, 163, 164, 167, 169, 171, 174, 175, 177, 179, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 207, 208, 209, 210, 212, 213, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 229, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 246, 247, 250, 251, 253, 255, 256, 257, 260, 261, 263, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 289, 290, 295, 308, 309, 320, 323, 324, 325, 334, 346, 352, 353, 354, 359, 367, 368, 370, 371, 374, 386, 387, 388, 389, 390, 391, 392, 394, 400, 401, 414, 423, 424, 427, 430, 431, 434, 437, 445, 448, 452, 454, 459, 469, 475, 477, 479, 480, 482, 485, 487, 489, 492, 497, 509, 513, 514, 520, 523, 530, 531, 532, 533, 534, 535, 537, 541, 543, 544, 548, 549, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 564, 566, 569, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 592, 598, 600, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 637, 638, 639, 640, 645, 646, 647, 650, 652, 653, 659, 664, 665, 669, 670, 671, 672, 673, 674, 675, 678, 680, 681, 687, 688, 689, 690, 691, 692, 697, 703, 705, 707, 709, 712, 713, 717, 718, 720, 721, 722, 723, 727, 731, 732, 740, 743, 745, 746, 750, 751, 752, 753, 763, 764, 766, 768, 769, 772, 773, 775, 777, 780, 782, 785, 786, 787, 791, 792, 793, 795, 799, 803, 804, 805, 810, 814, 826, 829, 830, 831, 834, 835, 836, 839, 840, 842, 844, 846, 852, 853, 854, 855, 856, 857, 859, 861, 862, 866, 867, 871, 872, 876, 878, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 895, 896, 897, 899, 902, 903, 904, 905, 906, 909, 910, 915, 926, 927, 931, 932, 938, 939, 948, 960, 966, 967, 968, 973, 980, 982, 984, 985, 986, 991, 994, 1002, 1003, 1004, 1005, 1006, 1007, 1014, 1015, 1017, 1028, 1041, 1042, 1045, 1048, 1049, 1052, 1055, 1063, 1066, 1068, 1071, 1073, 1077, 1078, 1086, 1087, 1089, 1091, 1097, 1101, 1103, 1104, 1106, 1107, 1113, 1115, 1117, 1118, 1128, 1132, 1133, 1139, 1142, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1160, 1163, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1229, 1230, 1232, 1233, 1235, 1236, 1242, 1247, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1261, 1263, 1264, 1270, 1271, 1272, 1273, 1279, 1280, 1286, 1287, 1289, 1292, 1293, 1295, 1296, 1299, 1301, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1325, 1329, 1333, 1334], "featur": [1, 42, 59, 70, 72, 266, 271, 309], "i": [1, 2, 13, 15, 18, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 59, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 94, 96, 97, 99, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 158, 159, 163, 164, 167, 171, 174, 176, 177, 179, 182, 186, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 208, 210, 211, 212, 213, 214, 215, 216, 219, 222, 223, 227, 229, 230, 231, 238, 240, 241, 242, 243, 244, 247, 250, 253, 254, 255, 256, 257, 259, 261, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 283, 285, 286, 295, 308, 309, 317, 320, 322, 323, 324, 325, 335, 338, 345, 346, 353, 358, 391, 392, 394, 397, 398, 399, 400, 403, 413, 423, 424, 427, 431, 434, 445, 453, 454, 455, 456, 459, 463, 467, 475, 477, 479, 482, 498, 504, 512, 513, 516, 518, 520, 530, 535, 536, 538, 541, 543, 545, 548, 553, 555, 559, 562, 563, 564, 566, 574, 592, 600, 603, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 674, 675, 676, 677, 678, 681, 682, 685, 687, 688, 689, 690, 693, 694, 695, 696, 698, 700, 703, 707, 723, 724, 727, 728, 729, 730, 732, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 755, 756, 758, 759, 764, 768, 769, 770, 771, 773, 774, 777, 780, 782, 785, 787, 790, 791, 792, 793, 795, 799, 801, 802, 803, 804, 805, 810, 814, 829, 830, 831, 834, 835, 836, 839, 840, 842, 844, 846, 849, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 866, 867, 871, 872, 876, 880, 883, 884, 886, 888, 889, 890, 891, 892, 896, 897, 899, 900, 903, 906, 909, 915, 927, 931, 932, 936, 937, 938, 939, 952, 959, 960, 967, 972, 983, 986, 991, 994, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1017, 1027, 1045, 1049, 1052, 1063, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1082, 1088, 1089, 1090, 1091, 1096, 1097, 1099, 1106, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1123, 1131, 1132, 1135, 1137, 1139, 1149, 1154, 1155, 1160, 1162, 1170, 1188, 1190, 1192, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1213, 1214, 1215, 1216, 1218, 1220, 1224, 1225, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1265, 1268, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1281, 1283, 1286, 1294, 1299, 1303, 1305, 1306, 1308, 1313, 1314, 1315, 1325, 1333, 1334], "primarili": 1, "intend": [1, 125, 143, 144, 145, 146, 703, 984, 1286], "us": [1, 8, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 36, 37, 42, 43, 46, 47, 48, 49, 50, 52, 53, 54, 60, 61, 62, 69, 83, 91, 92, 109, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 162, 163, 165, 171, 172, 174, 180, 181, 182, 185, 192, 193, 194, 195, 196, 197, 205, 207, 209, 210, 211, 213, 216, 217, 219, 222, 224, 226, 227, 229, 230, 231, 236, 240, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 263, 264, 265, 266, 267, 268, 271, 273, 274, 276, 277, 278, 279, 282, 283, 284, 285, 287, 295, 309, 312, 318, 320, 322, 324, 325, 334, 335, 358, 363, 364, 367, 368, 371, 375, 376, 391, 394, 397, 398, 406, 408, 412, 416, 419, 421, 426, 430, 431, 433, 434, 437, 445, 448, 450, 453, 454, 455, 456, 457, 461, 462, 463, 467, 477, 480, 481, 482, 498, 513, 530, 538, 543, 545, 553, 554, 555, 558, 575, 578, 580, 582, 583, 592, 600, 603, 605, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 634, 636, 638, 639, 644, 646, 647, 649, 651, 652, 655, 656, 657, 659, 660, 662, 667, 668, 676, 677, 678, 682, 684, 686, 689, 690, 691, 692, 693, 695, 696, 700, 703, 704, 707, 717, 718, 724, 725, 727, 728, 729, 730, 732, 736, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 766, 770, 771, 773, 774, 777, 778, 779, 781, 783, 784, 787, 790, 791, 792, 793, 795, 796, 797, 798, 801, 802, 803, 804, 805, 810, 813, 814, 825, 826, 829, 830, 831, 832, 835, 836, 839, 840, 841, 842, 846, 847, 848, 849, 852, 853, 854, 856, 857, 858, 862, 864, 865, 871, 880, 882, 883, 887, 890, 891, 892, 896, 897, 899, 900, 902, 903, 905, 906, 907, 915, 927, 932, 936, 937, 939, 968, 972, 976, 977, 984, 986, 992, 993, 1006, 1007, 1008, 1011, 1012, 1020, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1052, 1055, 1063, 1066, 1069, 1072, 1073, 1074, 1075, 1080, 1081, 1085, 1088, 1091, 1094, 1095, 1096, 1097, 1103, 1106, 1113, 1115, 1117, 1119, 1132, 1149, 1156, 1162, 1169, 1170, 1188, 1190, 1192, 1195, 1197, 1198, 1200, 1212, 1213, 1216, 1218, 1221, 1222, 1228, 1230, 1232, 1234, 1235, 1238, 1239, 1242, 1243, 1245, 1250, 1251, 1259, 1260, 1261, 1265, 1267, 1276, 1278, 1279, 1283, 1286, 1295, 1300, 1302, 1304, 1305, 1306, 1314, 1315, 1325, 1329, 1333, 1334], "librari": [1, 101, 122, 125, 553, 814, 931, 1334], "author": 1, "domain": [1, 660, 1243], "specif": [1, 31, 36, 37, 108, 110, 112, 114, 120, 123, 124, 125, 129, 130, 131, 135, 165, 210, 212, 266, 309, 434, 437, 693, 695, 696, 700, 723, 814, 832, 861, 927, 932, 1052, 1055, 1276, 1278, 1279, 1283, 1303, 1313, 1325, 1334], "capabl": [1, 37, 309], "which": [1, 7, 11, 21, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 111, 113, 120, 121, 122, 123, 124, 125, 131, 132, 134, 135, 136, 139, 143, 144, 150, 153, 155, 164, 165, 171, 174, 179, 180, 192, 193, 194, 195, 196, 197, 203, 213, 240, 266, 267, 272, 274, 278, 309, 320, 358, 399, 427, 431, 434, 445, 454, 460, 482, 484, 488, 491, 493, 494, 495, 543, 553, 555, 564, 566, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 675, 698, 738, 755, 756, 758, 759, 760, 801, 802, 804, 814, 830, 832, 839, 842, 844, 853, 854, 856, 857, 862, 880, 884, 896, 897, 927, 932, 972, 1013, 1045, 1049, 1052, 1063, 1073, 1078, 1079, 1096, 1100, 1105, 1109, 1110, 1111, 1112, 1162, 1216, 1258, 1281, 1303, 1305, 1325, 1333, 1334], "mai": [1, 36, 38, 43, 44, 45, 46, 60, 61, 62, 70, 72, 108, 110, 111, 112, 114, 120, 121, 122, 124, 126, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 143, 145, 171, 177, 179, 193, 213, 216, 240, 251, 255, 266, 268, 271, 276, 277, 278, 309, 324, 391, 392, 399, 400, 401, 414, 427, 431, 434, 437, 445, 457, 477, 516, 541, 543, 553, 555, 563, 600, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 664, 665, 667, 738, 746, 747, 750, 751, 755, 756, 758, 759, 764, 789, 791, 792, 801, 802, 814, 835, 836, 839, 846, 853, 862, 866, 867, 880, 887, 891, 899, 905, 906, 909, 915, 927, 985, 986, 1006, 1007, 1008, 1013, 1014, 1015, 1028, 1045, 1049, 1052, 1055, 1063, 1071, 1078, 1091, 1135, 1170, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1221, 1247, 1248, 1250, 1279, 1303, 1306, 1308, 1325, 1334], "exist": [1, 35, 36, 37, 54, 96, 124, 135, 150, 273, 277, 282, 283, 309, 319, 362, 365, 366, 403, 430, 554, 814, 878, 899, 902, 903, 927, 932, 1017, 1048, 1169, 1325], "belong": [1, 193, 309, 853, 927], "core": [1, 309, 1334], "cannot": [1, 97, 98, 120, 121, 125, 126, 128, 131, 132, 156, 216, 243, 244, 267, 285, 295, 309, 363, 457, 530, 555, 634, 655, 684, 706, 777, 814, 888, 906, 915, 927, 932, 976, 1149, 1170, 1212, 1238, 1267, 1305, 1325], "overrid": [1, 37, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 129, 130, 131, 147, 148, 154, 156, 309, 554, 814, 927, 1169, 1325], "str": [1, 3, 4, 6, 7, 10, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 69, 72, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 147, 148, 150, 153, 154, 155, 159, 164, 165, 168, 171, 172, 173, 174, 175, 177, 178, 182, 183, 184, 185, 188, 189, 191, 192, 193, 194, 196, 197, 199, 201, 205, 207, 208, 210, 212, 213, 217, 219, 221, 222, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 248, 251, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 317, 318, 319, 341, 346, 358, 362, 363, 364, 365, 366, 368, 370, 381, 392, 394, 396, 404, 427, 430, 431, 434, 437, 445, 454, 457, 459, 463, 465, 469, 470, 473, 479, 482, 507, 508, 518, 519, 520, 536, 540, 543, 552, 555, 563, 565, 566, 567, 569, 576, 577, 578, 579, 580, 581, 582, 583, 589, 592, 596, 598, 600, 606, 607, 609, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 639, 646, 647, 704, 705, 706, 709, 718, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 810, 814, 821, 830, 832, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 849, 852, 853, 854, 856, 857, 859, 861, 862, 871, 872, 876, 878, 879, 880, 881, 884, 885, 887, 888, 889, 890, 891, 896, 897, 898, 899, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 931, 932, 935, 955, 960, 972, 977, 981, 982, 1007, 1008, 1018, 1045, 1048, 1049, 1052, 1055, 1063, 1073, 1077, 1081, 1126, 1127, 1128, 1139, 1162, 1179, 1180, 1188, 1193, 1194, 1216, 1217, 1287, 1289, 1290, 1300, 1301, 1302, 1303, 1313, 1325, 1330, 1333, 1334], "dt": [1, 54, 125, 131, 240, 278, 309, 612, 760, 814, 823, 880, 927, 932, 1332], "attempt": [1, 394, 814, 840, 927], "do": [1, 37, 43, 44, 45, 46, 54, 60, 61, 110, 111, 114, 120, 134, 143, 144, 145, 146, 171, 179, 193, 194, 196, 197, 209, 212, 213, 231, 240, 261, 273, 276, 309, 391, 399, 513, 553, 612, 688, 689, 690, 787, 790, 805, 814, 831, 835, 836, 839, 844, 853, 854, 856, 857, 862, 866, 867, 876, 880, 888, 927, 932, 1006, 1013, 1078, 1132, 1271, 1272, 1273, 1308, 1315, 1325], "so": [1, 122, 123, 134, 156, 191, 193, 194, 196, 197, 231, 240, 309, 335, 345, 394, 467, 482, 518, 543, 555, 612, 676, 677, 678, 688, 689, 690, 704, 814, 840, 853, 854, 856, 857, 880, 927, 932, 959, 1137, 1259, 1260, 1261, 1271, 1272, 1273], "rais": [1, 16, 17, 21, 36, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 125, 131, 134, 143, 145, 161, 231, 241, 267, 309, 345, 363, 399, 430, 431, 445, 516, 518, 541, 563, 600, 651, 655, 662, 675, 693, 695, 696, 698, 700, 757, 774, 814, 959, 976, 1013, 1048, 1049, 1063, 1135, 1137, 1160, 1188, 1234, 1238, 1245, 1258, 1276, 1278, 1279, 1281, 1283, 1305, 1315, 1325], "an": [1, 31, 34, 35, 36, 37, 43, 44, 45, 55, 57, 58, 70, 71, 92, 95, 97, 98, 101, 103, 108, 110, 111, 114, 120, 121, 122, 123, 124, 125, 127, 131, 134, 136, 137, 148, 150, 154, 165, 166, 167, 177, 180, 185, 193, 194, 196, 197, 209, 210, 211, 213, 216, 227, 231, 237, 238, 240, 241, 255, 261, 267, 271, 273, 276, 277, 282, 285, 295, 309, 319, 342, 345, 357, 363, 369, 375, 376, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 399, 403, 404, 427, 430, 434, 448, 454, 462, 463, 469, 470, 473, 497, 509, 510, 513, 516, 518, 541, 542, 543, 552, 553, 555, 564, 566, 575, 576, 599, 600, 608, 612, 613, 615, 617, 619, 621, 623, 626, 628, 630, 651, 655, 660, 662, 664, 693, 695, 696, 698, 700, 712, 719, 727, 733, 737, 755, 756, 758, 759, 761, 763, 766, 770, 771, 772, 773, 774, 786, 787, 789, 790, 793, 796, 801, 802, 804, 805, 810, 814, 832, 833, 834, 836, 839, 844, 846, 849, 853, 854, 856, 857, 862, 867, 876, 880, 888, 891, 899, 902, 904, 906, 915, 927, 931, 932, 956, 959, 971, 976, 981, 990, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1013, 1017, 1052, 1066, 1071, 1073, 1106, 1118, 1128, 1129, 1132, 1135, 1137, 1160, 1161, 1170, 1199, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1213, 1216, 1234, 1238, 1243, 1245, 1247, 1276, 1278, 1279, 1281, 1283, 1305, 1315, 1325, 1333], "attributeerror": 1, "howev": [1, 111, 122, 177, 216, 267, 309, 1071, 1325], "can": [1, 15, 28, 37, 42, 52, 53, 54, 60, 61, 68, 69, 71, 83, 91, 92, 111, 120, 121, 122, 125, 126, 131, 132, 134, 137, 139, 140, 148, 149, 150, 154, 156, 159, 164, 166, 174, 175, 185, 192, 193, 194, 195, 196, 197, 205, 207, 209, 216, 227, 231, 240, 242, 243, 246, 254, 266, 267, 271, 272, 273, 276, 282, 285, 295, 309, 312, 320, 324, 358, 368, 382, 385, 391, 394, 399, 423, 424, 427, 430, 431, 434, 437, 445, 454, 460, 463, 482, 497, 513, 543, 553, 555, 563, 566, 572, 575, 576, 578, 580, 582, 583, 592, 598, 600, 605, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 636, 639, 641, 644, 647, 652, 661, 666, 676, 677, 678, 688, 689, 690, 693, 704, 709, 718, 736, 738, 754, 757, 764, 766, 770, 771, 777, 804, 810, 813, 814, 825, 830, 831, 835, 836, 840, 842, 844, 846, 853, 854, 856, 857, 880, 882, 884, 888, 890, 891, 896, 902, 905, 906, 927, 932, 939, 972, 1006, 1007, 1013, 1041, 1042, 1045, 1048, 1049, 1052, 1055, 1063, 1073, 1079, 1096, 1132, 1162, 1170, 1175, 1188, 1192, 1194, 1213, 1216, 1218, 1222, 1225, 1228, 1235, 1236, 1237, 1244, 1249, 1259, 1260, 1261, 1271, 1272, 1273, 1276, 1279, 1303, 1304, 1305, 1325, 1329, 1333], "other": [1, 21, 33, 37, 38, 42, 52, 61, 119, 120, 121, 122, 125, 134, 143, 144, 145, 146, 174, 176, 179, 182, 186, 212, 213, 222, 223, 241, 243, 246, 247, 271, 277, 280, 282, 283, 307, 309, 317, 321, 323, 334, 335, 374, 396, 451, 452, 463, 467, 472, 474, 482, 487, 500, 507, 531, 532, 533, 534, 550, 559, 562, 571, 573, 586, 587, 591, 607, 647, 707, 708, 716, 719, 726, 728, 730, 736, 739, 740, 741, 749, 753, 755, 760, 779, 781, 784, 793, 796, 798, 814, 826, 836, 842, 849, 861, 862, 871, 872, 882, 883, 899, 902, 903, 904, 927, 932, 938, 991, 1010, 1070, 1078, 1104, 1126, 1150, 1151, 1152, 1153, 1194, 1215, 1307, 1316, 1324, 1325], "onli": [1, 11, 14, 21, 31, 34, 35, 37, 43, 47, 49, 53, 54, 59, 62, 92, 120, 121, 122, 124, 125, 126, 128, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 154, 159, 162, 174, 179, 193, 196, 198, 210, 213, 216, 217, 219, 224, 231, 240, 242, 243, 257, 263, 265, 266, 267, 277, 278, 295, 309, 318, 320, 322, 324, 335, 373, 374, 394, 399, 427, 435, 457, 466, 475, 497, 553, 555, 575, 576, 577, 578, 579, 580, 581, 582, 583, 592, 598, 605, 615, 617, 619, 621, 623, 626, 628, 630, 652, 678, 709, 721, 738, 755, 756, 777, 814, 835, 840, 842, 853, 854, 856, 857, 858, 862, 865, 880, 899, 915, 927, 931, 932, 936, 937, 938, 988, 991, 1007, 1013, 1045, 1078, 1084, 1089, 1106, 1170, 1188, 1192, 1235, 1261, 1299, 1302, 1305, 1325, 1333, 1334], "gener": [1, 122, 123, 141, 147, 148, 149, 150, 151, 152, 154, 161, 169, 231, 244, 264, 267, 273, 309, 530, 634, 640, 733, 755, 758, 770, 771, 773, 790, 801, 802, 814, 927, 1149, 1212, 1224, 1300, 1325, 1334], "userwarn": 1, "pl": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 94, 96, 97, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 156, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1256, 1257, 1259, 1260, 1261, 1262, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1325, 1329, 1333, 1334], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 53, 55, 56, 57, 58, 122, 148, 150, 154, 159, 230, 273, 309, 317, 596, 660, 690, 726, 776, 814, 836, 875, 927, 932, 1243, 1334], "__init__": [1, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 147, 1333], "self": [1, 48, 49, 50, 52, 55, 56, 57, 58, 60, 61, 166, 167, 179, 199, 201, 202, 203, 215, 217, 219, 221, 222, 224, 228, 229, 231, 233, 234, 236, 237, 238, 244, 252, 253, 255, 256, 257, 259, 264, 273, 275, 278, 279, 280, 284, 285, 286, 309, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 361, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 570, 571, 572, 573, 574, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 810, 814, 829, 830, 831, 832, 834, 835, 836, 838, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 927, 938, 939, 981, 994, 1078, 1082, 1092, 1168, 1169, 1170, 1181, 1185, 1186, 1191, 1194, 1213, 1216, 1218, 1230, 1312, 1316, 1325], "_expr": [1, 56], "hello": [1, 21, 48, 51, 688, 689, 690, 932, 1139, 1271, 1272, 1273], "return": [1, 6, 7, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99, 102, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 156, 157, 162, 164, 166, 169, 170, 173, 175, 177, 178, 179, 180, 181, 184, 185, 187, 188, 191, 192, 193, 195, 196, 199, 201, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 225, 226, 227, 229, 230, 231, 235, 240, 241, 242, 243, 244, 255, 258, 259, 260, 266, 267, 268, 271, 272, 273, 274, 278, 282, 283, 290, 292, 294, 295, 298, 303, 309, 320, 322, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 341, 343, 345, 346, 357, 362, 363, 364, 365, 366, 367, 368, 377, 378, 379, 380, 381, 392, 393, 399, 400, 402, 405, 406, 407, 409, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 454, 459, 467, 470, 471, 473, 476, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 501, 502, 505, 506, 508, 514, 516, 518, 519, 520, 522, 523, 530, 540, 541, 542, 549, 553, 554, 555, 564, 566, 567, 572, 596, 600, 602, 606, 607, 608, 610, 611, 634, 635, 641, 642, 643, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 672, 673, 674, 679, 680, 682, 683, 684, 685, 694, 698, 703, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 726, 727, 731, 733, 734, 735, 736, 737, 738, 743, 745, 754, 755, 756, 757, 758, 759, 760, 763, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 786, 787, 790, 793, 796, 799, 800, 801, 802, 804, 805, 814, 830, 833, 835, 836, 838, 839, 843, 844, 846, 851, 853, 854, 856, 857, 858, 861, 864, 865, 867, 875, 876, 878, 880, 884, 888, 894, 895, 896, 897, 902, 903, 910, 912, 914, 918, 923, 927, 931, 932, 936, 937, 938, 946, 947, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 971, 973, 975, 976, 977, 980, 983, 986, 990, 1007, 1008, 1013, 1014, 1016, 1019, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1070, 1071, 1073, 1077, 1078, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1133, 1135, 1137, 1138, 1139, 1141, 1142, 1149, 1159, 1160, 1161, 1168, 1169, 1170, 1175, 1182, 1188, 1194, 1195, 1196, 1197, 1198, 1212, 1214, 1215, 1225, 1233, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1262, 1263, 1265, 1266, 1267, 1268, 1277, 1281, 1286, 1294, 1296, 1299, 1306, 1309, 1311, 1312, 1313, 1316, 1325, 1333, 1334], "lit": [1, 319, 362, 482, 497, 575, 662, 746, 750, 764, 787, 790, 805, 814, 1081, 1325], "alia": [1, 13, 54, 56, 58, 90, 193, 215, 231, 236, 240, 255, 275, 282, 285, 309, 317, 321, 362, 363, 364, 365, 366, 367, 381, 382, 383, 384, 385, 392, 395, 400, 401, 403, 404, 405, 406, 407, 409, 410, 411, 414, 415, 418, 420, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 442, 444, 445, 446, 447, 448, 451, 452, 465, 467, 472, 474, 479, 482, 486, 490, 497, 500, 502, 526, 538, 545, 550, 555, 559, 560, 561, 562, 564, 568, 571, 573, 575, 586, 587, 591, 593, 597, 600, 603, 605, 633, 635, 651, 652, 654, 655, 657, 659, 660, 662, 663, 667, 668, 678, 679, 682, 683, 684, 685, 686, 691, 692, 694, 704, 705, 706, 708, 716, 717, 719, 725, 726, 733, 734, 735, 739, 740, 741, 755, 758, 760, 761, 764, 765, 770, 773, 776, 777, 789, 796, 801, 804, 814, 853, 859, 865, 880, 891, 898, 902, 906, 927, 1007, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1121, 1188, 1193, 1242, 1243, 1267, 1268, 1325], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 48, 51, 652, 678, 688, 689, 690, 701, 932, 1139, 1235, 1261, 1271, 1272, 1273, 1284], "select": [1, 9, 35, 47, 48, 49, 54, 55, 56, 57, 94, 118, 120, 121, 122, 123, 124, 126, 128, 132, 134, 140, 149, 163, 208, 209, 213, 216, 227, 230, 241, 247, 253, 255, 269, 275, 278, 285, 309, 316, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 348, 349, 350, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 370, 372, 373, 377, 378, 379, 380, 391, 393, 395, 396, 397, 398, 401, 403, 404, 414, 423, 424, 427, 430, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 453, 455, 456, 457, 458, 459, 460, 464, 466, 468, 471, 475, 477, 478, 479, 480, 483, 484, 488, 496, 497, 498, 499, 501, 513, 514, 543, 546, 547, 548, 549, 553, 555, 556, 557, 558, 570, 572, 574, 575, 577, 579, 581, 584, 585, 589, 590, 591, 592, 594, 595, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 614, 625, 632, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 659, 660, 661, 662, 693, 704, 706, 710, 714, 715, 717, 718, 720, 721, 722, 723, 724, 727, 729, 732, 734, 735, 736, 737, 740, 742, 743, 744, 745, 748, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 778, 780, 782, 783, 785, 786, 789, 790, 794, 795, 796, 797, 799, 803, 810, 814, 829, 837, 862, 875, 883, 884, 889, 891, 898, 904, 906, 927, 932, 1048, 1085, 1132, 1213, 1216, 1229, 1249, 1276, 1295, 1325, 1333], "shape": [1, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 105, 108, 109, 110, 111, 112, 113, 114, 115, 120, 129, 130, 134, 140, 147, 150, 154, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 185, 187, 188, 190, 192, 193, 198, 199, 201, 203, 204, 205, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 244, 246, 250, 253, 254, 255, 256, 257, 258, 259, 262, 264, 265, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 570, 571, 572, 573, 574, 575, 576, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 829, 830, 832, 833, 835, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 934, 935, 938, 940, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 987, 988, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1104, 1105, 1108, 1109, 1110, 1111, 1112, 1116, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1175, 1181, 1182, 1184, 1185, 1186, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1220, 1222, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1256, 1257, 1259, 1260, 1261, 1262, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1292, 1294, 1297, 1298, 1300, 1301, 1302, 1307, 1309, 1310, 1311, 1312, 1313, 1316, 1325, 1333], "3": [1, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 92, 94, 97, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 125, 129, 130, 131, 134, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 317, 318, 319, 320, 322, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 380, 381, 382, 383, 384, 385, 391, 392, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 410, 411, 413, 414, 415, 417, 418, 420, 422, 425, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 498, 500, 501, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 546, 547, 548, 549, 550, 552, 553, 555, 571, 572, 573, 574, 575, 576, 578, 580, 582, 583, 586, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 644, 646, 647, 648, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 667, 668, 671, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 694, 695, 700, 704, 705, 706, 707, 708, 709, 711, 717, 718, 721, 722, 723, 725, 726, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 934, 935, 938, 940, 942, 943, 944, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1021, 1024, 1025, 1027, 1029, 1030, 1031, 1034, 1037, 1038, 1040, 1046, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1063, 1065, 1066, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1121, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1222, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1236, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1250, 1251, 1254, 1259, 1260, 1261, 1262, 1264, 1265, 1269, 1270, 1277, 1278, 1283, 1287, 1289, 1290, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1304, 1305, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1325, 1333, 1334], "1": [1, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 94, 96, 97, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 150, 154, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 676, 677, 684, 685, 686, 688, 689, 690, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 810, 814, 829, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 865, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 934, 935, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 980, 981, 985, 987, 988, 989, 991, 994, 995, 996, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1124, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1244, 1245, 1247, 1249, 1250, 1251, 1259, 1260, 1267, 1268, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1325, 1329, 1333, 1334], "2": [1, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 94, 97, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 316, 317, 318, 319, 321, 323, 325, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 372, 373, 374, 379, 380, 381, 382, 383, 384, 385, 391, 392, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 409, 413, 417, 422, 423, 424, 427, 428, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 644, 645, 646, 647, 648, 650, 652, 654, 655, 656, 657, 659, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 783, 785, 786, 789, 793, 794, 795, 796, 797, 799, 802, 803, 804, 810, 814, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 934, 935, 938, 941, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 980, 985, 987, 988, 989, 990, 994, 995, 997, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1017, 1019, 1020, 1023, 1025, 1029, 1030, 1031, 1034, 1037, 1038, 1040, 1041, 1042, 1047, 1048, 1049, 1053, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1222, 1224, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1237, 1242, 1244, 1245, 1246, 1247, 1249, 1251, 1259, 1260, 1267, 1268, 1271, 1272, 1273, 1276, 1277, 1279, 1280, 1281, 1282, 1284, 1285, 1287, 1289, 1290, 1292, 1293, 1294, 1297, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1325, 1329, 1333, 1334], "column_0": [1, 216, 273, 309], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 37, 55, 211, 309, 684, 685, 1267, 1268], "splitfram": [1, 55], "df": [1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 55, 56, 79, 94, 96, 109, 110, 111, 112, 113, 114, 115, 121, 122, 123, 134, 147, 148, 150, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 185, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 367, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 617, 619, 621, 623, 625, 626, 628, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 810, 814, 853, 880, 884, 898, 899, 912, 915, 923, 927, 932, 1048, 1073, 1249, 1267, 1268, 1301, 1325, 1334], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 14, 36, 37, 47, 51, 54, 55, 57, 60, 61, 63, 69, 83, 108, 110, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 148, 149, 150, 154, 168, 172, 175, 177, 178, 182, 190, 192, 193, 201, 210, 226, 229, 241, 242, 243, 246, 254, 262, 263, 271, 273, 274, 275, 276, 282, 287, 288, 309, 318, 346, 357, 358, 359, 392, 399, 459, 465, 470, 478, 487, 551, 553, 555, 564, 565, 592, 600, 606, 608, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 646, 647, 660, 683, 704, 706, 712, 716, 736, 738, 740, 756, 759, 761, 769, 771, 774, 777, 794, 796, 802, 814, 837, 843, 845, 849, 852, 853, 882, 890, 897, 898, 902, 904, 907, 908, 927, 932, 960, 971, 972, 973, 989, 1007, 1013, 1071, 1077, 1082, 1085, 1087, 1091, 1092, 1104, 1170, 1188, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1235, 1243, 1261, 1266, 1295, 1304, 1307, 1325, 1334], "with_row_index": [1, 284, 309, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 814, 905, 927, 1213, 1325], "name": [1, 19, 23, 25, 32, 34, 35, 37, 40, 43, 48, 49, 50, 51, 52, 55, 56, 57, 58, 62, 83, 96, 108, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 145, 146, 147, 148, 150, 153, 154, 155, 164, 165, 168, 172, 173, 174, 178, 182, 183, 184, 188, 189, 191, 192, 195, 208, 209, 210, 212, 213, 216, 218, 220, 222, 223, 225, 229, 231, 235, 241, 242, 243, 245, 246, 247, 254, 255, 258, 262, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 282, 283, 284, 285, 286, 287, 294, 309, 319, 324, 358, 362, 363, 365, 366, 368, 392, 434, 437, 457, 463, 482, 491, 493, 494, 495, 497, 543, 552, 555, 563, 565, 568, 592, 598, 600, 609, 647, 660, 661, 676, 677, 704, 706, 707, 709, 718, 723, 727, 728, 729, 730, 732, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 748, 749, 752, 753, 762, 763, 768, 769, 772, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 791, 792, 793, 795, 796, 797, 798, 799, 803, 804, 810, 814, 830, 832, 837, 841, 842, 845, 849, 852, 855, 861, 862, 871, 872, 878, 881, 882, 883, 884, 890, 891, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 914, 927, 931, 932, 935, 972, 990, 1007, 1052, 1055, 1162, 1188, 1193, 1242, 1243, 1244, 1259, 1260, 1287, 1290, 1300, 1301, 1306, 1313, 1325, 1333, 1334], "n": [1, 13, 14, 18, 26, 34, 41, 43, 49, 50, 55, 56, 57, 58, 69, 71, 117, 120, 121, 125, 130, 134, 150, 162, 166, 179, 187, 193, 199, 210, 211, 215, 216, 242, 243, 244, 250, 251, 256, 259, 260, 263, 265, 279, 292, 294, 303, 309, 325, 353, 358, 367, 368, 391, 395, 399, 401, 403, 410, 436, 448, 460, 463, 471, 476, 502, 511, 517, 519, 530, 531, 535, 538, 540, 543, 545, 593, 596, 606, 626, 627, 630, 631, 634, 637, 638, 644, 649, 663, 667, 668, 676, 684, 685, 688, 689, 694, 696, 711, 713, 717, 718, 719, 723, 724, 726, 742, 744, 755, 756, 757, 758, 759, 760, 766, 768, 786, 787, 790, 791, 792, 795, 799, 803, 805, 814, 833, 835, 851, 853, 858, 865, 886, 887, 892, 894, 895, 900, 912, 914, 923, 927, 932, 967, 972, 980, 990, 1006, 1009, 1013, 1015, 1017, 1024, 1054, 1066, 1078, 1079, 1086, 1090, 1121, 1130, 1136, 1138, 1149, 1150, 1154, 1159, 1162, 1184, 1207, 1209, 1212, 1220, 1221, 1228, 1232, 1246, 1250, 1251, 1259, 1267, 1268, 1277, 1279, 1294, 1296, 1302, 1309, 1313, 1314, 1325, 1333, 1334], "filter": [1, 55, 124, 134, 135, 140, 174, 205, 206, 207, 212, 231, 295, 309, 563, 565, 657, 686, 725, 754, 757, 764, 804, 814, 842, 846, 859, 861, 891, 915, 927, 932, 1216, 1325], "col": [1, 13, 34, 37, 43, 54, 55, 56, 57, 112, 114, 134, 148, 150, 182, 192, 193, 206, 208, 216, 227, 230, 231, 240, 241, 246, 254, 266, 271, 275, 276, 282, 287, 309, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 486, 487, 490, 491, 493, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 577, 579, 581, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 736, 737, 739, 740, 741, 743, 745, 748, 754, 757, 760, 764, 765, 766, 767, 768, 769, 778, 780, 782, 783, 785, 788, 789, 795, 797, 799, 800, 803, 804, 814, 849, 852, 853, 859, 875, 880, 882, 890, 891, 898, 902, 904, 907, 927, 932, 1045, 1048, 1132, 1195, 1213, 1216, 1249, 1276, 1325, 1334], "0": [1, 8, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 36, 37, 42, 46, 47, 52, 54, 55, 56, 58, 62, 70, 79, 92, 109, 120, 121, 122, 123, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 154, 157, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 175, 176, 180, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 231, 232, 233, 236, 237, 238, 242, 243, 244, 245, 246, 251, 253, 254, 255, 256, 257, 258, 260, 264, 265, 266, 267, 268, 269, 271, 273, 276, 278, 279, 282, 284, 285, 287, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 309, 316, 318, 319, 321, 324, 326, 327, 328, 329, 330, 331, 334, 335, 336, 339, 340, 342, 345, 355, 358, 360, 369, 372, 373, 375, 376, 377, 378, 379, 386, 387, 388, 389, 390, 391, 392, 393, 397, 398, 399, 405, 406, 408, 411, 412, 415, 416, 418, 419, 420, 421, 425, 426, 430, 431, 432, 433, 435, 440, 441, 443, 444, 445, 448, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 466, 467, 469, 471, 472, 474, 475, 477, 480, 481, 484, 485, 488, 489, 491, 492, 493, 494, 495, 497, 498, 500, 505, 506, 509, 510, 513, 516, 517, 518, 523, 525, 526, 538, 541, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 564, 569, 570, 571, 573, 575, 584, 585, 586, 587, 588, 590, 591, 593, 596, 597, 598, 600, 601, 602, 603, 607, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 642, 643, 644, 648, 649, 653, 654, 659, 660, 662, 665, 669, 670, 671, 672, 675, 680, 681, 687, 693, 696, 707, 708, 709, 710, 712, 713, 714, 715, 716, 719, 724, 725, 727, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 746, 750, 751, 752, 753, 755, 757, 761, 764, 770, 771, 773, 775, 777, 780, 781, 782, 786, 788, 789, 800, 801, 802, 803, 804, 805, 810, 814, 829, 832, 833, 834, 838, 839, 841, 843, 847, 848, 851, 852, 853, 854, 855, 856, 857, 860, 861, 864, 866, 867, 870, 874, 876, 877, 881, 882, 887, 888, 890, 891, 892, 895, 900, 902, 904, 905, 906, 907, 909, 910, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 927, 932, 939, 940, 941, 942, 943, 944, 945, 946, 948, 950, 953, 959, 969, 972, 974, 981, 984, 985, 987, 988, 990, 992, 993, 995, 996, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1020, 1022, 1025, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1043, 1044, 1048, 1049, 1050, 1051, 1058, 1059, 1061, 1062, 1063, 1066, 1069, 1072, 1073, 1074, 1075, 1080, 1084, 1086, 1089, 1091, 1094, 1095, 1097, 1100, 1101, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1117, 1118, 1119, 1124, 1125, 1128, 1129, 1132, 1135, 1136, 1137, 1142, 1144, 1145, 1157, 1160, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1184, 1188, 1189, 1190, 1194, 1198, 1199, 1200, 1202, 1203, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1214, 1215, 1217, 1221, 1225, 1226, 1227, 1228, 1231, 1232, 1236, 1237, 1242, 1243, 1245, 1248, 1249, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1276, 1279, 1295, 1296, 1297, 1298, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1312, 1314, 1315, 1325, 1334], "drop": [1, 111, 173, 174, 216, 274, 282, 309, 395, 397, 398, 511, 512, 600, 814, 842, 897, 902, 927, 1009, 1011, 1012, 1130, 1131, 1188, 1325], "aaa": [1, 37, 309, 651, 662, 704, 706, 932, 1234, 1245], "bbb": [1, 37, 309, 704, 706, 932], "ccc": [1, 37, 309, 704, 706, 932], "ddd": [1, 37, 309, 704, 706], "eee": [1, 37, 309, 932], "fff": 1, "schema": [1, 15, 29, 32, 35, 36, 47, 55, 56, 57, 62, 103, 104, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 162, 166, 167, 175, 177, 211, 216, 223, 227, 267, 271, 309, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 406, 542, 543, 563, 577, 579, 581, 664, 665, 726, 796, 814, 833, 834, 843, 866, 867, 872, 884, 909, 915, 927, 932, 994, 1247, 1248, 1325], "txt": [1, 13, 134, 651, 662, 1245], "string": [1, 3, 4, 6, 7, 13, 15, 16, 17, 21, 32, 34, 35, 36, 37, 40, 41, 43, 47, 53, 66, 69, 72, 83, 90, 91, 92, 97, 111, 115, 120, 121, 122, 123, 134, 143, 144, 145, 146, 147, 154, 158, 164, 165, 175, 177, 185, 191, 192, 193, 195, 213, 229, 231, 240, 243, 245, 246, 247, 254, 265, 266, 272, 273, 276, 278, 282, 283, 286, 287, 309, 317, 341, 346, 363, 364, 365, 368, 371, 427, 431, 434, 437, 445, 454, 457, 459, 465, 469, 482, 520, 566, 567, 592, 596, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 647, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 705, 707, 718, 726, 728, 730, 736, 739, 740, 741, 749, 753, 755, 756, 758, 759, 765, 779, 781, 784, 793, 796, 798, 801, 802, 804, 814, 826, 830, 832, 843, 844, 852, 853, 855, 862, 880, 881, 882, 883, 884, 890, 896, 902, 903, 907, 927, 932, 960, 976, 977, 978, 983, 984, 1045, 1049, 1052, 1055, 1063, 1073, 1077, 1096, 1117, 1139, 1194, 1233, 1234, 1235, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1289, 1302, 1303, 1325, 1334], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 907, 908, 911, 913, 916, 917, 918, 919, 920, 921, 922], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 13, 57, 60, 61, 193, 230, 236, 240, 271, 276, 283, 309, 317, 319, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 358, 363, 364, 369, 374, 381, 382, 383, 384, 385, 392, 395, 399, 400, 402, 405, 406, 407, 409, 410, 411, 413, 415, 417, 418, 420, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 446, 447, 449, 451, 452, 454, 461, 462, 467, 472, 474, 475, 480, 481, 482, 486, 487, 490, 491, 493, 494, 495, 497, 500, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 550, 552, 555, 571, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 592, 593, 596, 597, 598, 600, 603, 607, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 633, 637, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 697, 698, 699, 701, 702, 703, 705, 707, 708, 709, 716, 719, 726, 728, 730, 738, 739, 741, 746, 747, 749, 754, 756, 757, 761, 771, 776, 779, 781, 784, 794, 798, 800, 802, 804, 810, 814, 835, 836, 844, 846, 853, 859, 875, 876, 880, 888, 903, 927, 932, 1007, 1048, 1188, 1325], "tp": [1, 57], "cast": [1, 36, 56, 57, 108, 110, 111, 114, 143, 144, 145, 146, 185, 193, 194, 196, 197, 230, 240, 266, 267, 271, 282, 309, 323, 384, 385, 401, 434, 437, 448, 591, 596, 605, 612, 664, 665, 666, 703, 710, 716, 741, 794, 814, 853, 854, 856, 857, 875, 880, 902, 927, 931, 932, 984, 986, 1000, 1001, 1015, 1052, 1055, 1066, 1192, 1247, 1248, 1249, 1286, 1293, 1301, 1305, 1307, 1308, 1325], "int64": [1, 36, 37, 40, 56, 57, 62, 63, 83, 97, 120, 129, 175, 185, 193, 194, 196, 197, 230, 240, 245, 261, 268, 309, 339, 340, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 384, 385, 438, 439, 440, 441, 442, 443, 444, 448, 454, 457, 553, 555, 577, 579, 581, 596, 605, 612, 664, 698, 710, 716, 733, 762, 770, 771, 774, 790, 796, 814, 843, 853, 854, 856, 857, 875, 880, 881, 884, 927, 953, 954, 956, 957, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 1000, 1001, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1068, 1070, 1073, 1170, 1192, 1215, 1281, 1293, 1305, 1306, 1307, 1308, 1325], "int8": [1, 57, 83, 185, 309, 357, 358, 384, 385, 407, 411, 420, 422, 429, 432, 446, 447, 542, 710, 787, 790, 805, 814, 971, 972, 1000, 1001, 1009, 1021, 1025, 1038, 1040, 1047, 1050, 1064, 1065, 1161, 1196, 1293, 1305, 1312, 1325], "int16": [1, 57, 271, 309, 384, 385, 428, 710, 814, 932, 1000, 1001, 1046, 1293, 1302, 1325], "int32": [1, 57, 62, 108, 111, 147, 149, 150, 193, 194, 196, 197, 211, 240, 266, 309, 344, 345, 347, 369, 402, 414, 415, 417, 418, 425, 449, 454, 610, 612, 716, 790, 814, 853, 854, 856, 857, 880, 927, 932, 955, 958, 959, 961, 1016, 1028, 1032, 1034, 1035, 1043, 1067, 1073, 1168, 1197, 1307, 1308, 1325], "b": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 57, 62, 83, 94, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 125, 161, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 189, 190, 191, 192, 193, 198, 199, 201, 203, 205, 207, 208, 209, 210, 211, 212, 214, 217, 219, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 238, 239, 241, 242, 243, 244, 245, 246, 250, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 309, 317, 319, 320, 322, 323, 334, 336, 341, 346, 361, 362, 363, 364, 365, 366, 368, 369, 380, 392, 396, 434, 437, 457, 459, 461, 462, 463, 465, 468, 475, 478, 480, 481, 482, 484, 488, 491, 493, 494, 495, 497, 501, 507, 513, 520, 531, 532, 533, 534, 552, 553, 555, 560, 572, 575, 576, 577, 578, 579, 580, 581, 589, 590, 592, 596, 598, 600, 603, 607, 609, 611, 639, 645, 647, 655, 658, 662, 664, 676, 677, 704, 705, 709, 718, 721, 725, 727, 728, 729, 730, 732, 736, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 761, 762, 763, 764, 765, 768, 769, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 792, 795, 796, 797, 798, 799, 803, 814, 829, 830, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 861, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 882, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 935, 938, 960, 975, 976, 977, 978, 979, 983, 985, 986, 1007, 1010, 1052, 1055, 1069, 1070, 1071, 1078, 1081, 1096, 1104, 1117, 1126, 1150, 1151, 1152, 1153, 1188, 1193, 1238, 1241, 1245, 1247, 1259, 1260, 1287, 1289, 1290, 1292, 1306, 1311, 1325, 1333], "4": [1, 9, 14, 18, 26, 32, 34, 36, 37, 38, 39, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 125, 134, 142, 154, 161, 163, 164, 165, 166, 167, 170, 174, 178, 179, 180, 181, 185, 187, 188, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 220, 222, 223, 225, 226, 227, 229, 230, 231, 232, 236, 240, 242, 243, 249, 250, 254, 255, 258, 259, 261, 262, 263, 264, 267, 270, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 316, 317, 318, 319, 321, 323, 336, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 360, 361, 367, 368, 369, 372, 373, 374, 380, 381, 384, 385, 391, 393, 396, 403, 406, 407, 417, 428, 429, 430, 431, 432, 434, 437, 439, 442, 444, 445, 447, 451, 452, 454, 458, 459, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 494, 495, 497, 500, 501, 502, 510, 511, 512, 513, 514, 516, 517, 519, 528, 530, 531, 532, 533, 534, 535, 536, 540, 542, 547, 550, 552, 553, 555, 571, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 591, 592, 594, 595, 596, 597, 598, 601, 603, 607, 608, 609, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 641, 645, 646, 647, 648, 651, 654, 660, 662, 663, 667, 668, 673, 674, 676, 677, 682, 683, 684, 685, 691, 692, 693, 694, 698, 703, 704, 706, 707, 708, 709, 711, 716, 717, 718, 719, 725, 726, 728, 730, 732, 734, 735, 736, 737, 739, 741, 742, 744, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 761, 763, 764, 768, 770, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 810, 814, 829, 830, 832, 833, 834, 835, 836, 838, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 880, 886, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 905, 906, 907, 908, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 938, 941, 948, 955, 957, 958, 959, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 980, 988, 989, 991, 1006, 1008, 1010, 1020, 1025, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1052, 1055, 1057, 1060, 1062, 1063, 1064, 1065, 1070, 1073, 1077, 1078, 1080, 1081, 1085, 1086, 1087, 1090, 1091, 1094, 1095, 1096, 1098, 1104, 1109, 1110, 1111, 1112, 1116, 1121, 1129, 1130, 1131, 1132, 1133, 1138, 1143, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1159, 1161, 1176, 1179, 1180, 1181, 1184, 1185, 1186, 1190, 1191, 1194, 1195, 1198, 1203, 1205, 1206, 1207, 1208, 1209, 1212, 1214, 1220, 1222, 1225, 1228, 1229, 1230, 1234, 1237, 1243, 1245, 1246, 1250, 1251, 1256, 1257, 1265, 1267, 1268, 1274, 1275, 1276, 1277, 1281, 1286, 1287, 1290, 1292, 1294, 1302, 1305, 1307, 1309, 1316, 1325, 1329, 1334], "c": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 55, 57, 62, 109, 111, 113, 115, 125, 134, 161, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 178, 182, 185, 189, 190, 191, 192, 193, 199, 201, 203, 211, 212, 214, 217, 219, 221, 222, 224, 226, 227, 228, 229, 231, 232, 233, 235, 238, 239, 241, 244, 245, 246, 253, 254, 255, 256, 257, 259, 261, 264, 265, 266, 267, 268, 269, 272, 276, 277, 279, 280, 282, 287, 291, 292, 293, 296, 297, 299, 302, 303, 309, 317, 319, 320, 322, 324, 341, 361, 368, 392, 463, 482, 497, 507, 520, 552, 555, 575, 576, 590, 592, 596, 600, 639, 684, 693, 718, 721, 728, 730, 732, 736, 739, 741, 742, 743, 744, 746, 747, 749, 763, 764, 765, 768, 769, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 797, 798, 799, 803, 810, 814, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 852, 853, 861, 864, 871, 874, 876, 878, 879, 881, 882, 888, 889, 890, 891, 896, 899, 902, 904, 907, 911, 912, 913, 916, 917, 919, 922, 923, 927, 931, 932, 985, 1007, 1096, 1117, 1126, 1188, 1267, 1276, 1290, 1311, 1325], "5": [1, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 34, 36, 38, 39, 42, 50, 52, 54, 55, 57, 58, 62, 108, 111, 112, 113, 114, 115, 117, 121, 142, 143, 145, 148, 150, 154, 165, 166, 167, 171, 178, 179, 180, 181, 185, 187, 188, 190, 191, 192, 193, 199, 200, 203, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 225, 226, 227, 229, 231, 232, 233, 236, 240, 243, 249, 250, 254, 255, 258, 259, 261, 262, 263, 264, 266, 267, 270, 271, 273, 276, 277, 278, 281, 282, 284, 285, 287, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 317, 318, 321, 337, 338, 343, 344, 345, 347, 349, 353, 358, 360, 367, 368, 369, 373, 374, 391, 392, 393, 395, 396, 399, 402, 403, 404, 405, 406, 411, 415, 417, 418, 420, 425, 430, 432, 434, 435, 437, 438, 444, 448, 452, 454, 456, 457, 460, 462, 466, 467, 471, 472, 474, 476, 478, 480, 482, 486, 490, 491, 493, 494, 495, 497, 500, 502, 510, 513, 514, 516, 517, 519, 522, 525, 526, 530, 531, 532, 533, 534, 535, 539, 540, 545, 571, 573, 575, 587, 591, 592, 593, 594, 595, 596, 600, 601, 603, 607, 608, 609, 611, 612, 614, 615, 617, 618, 619, 620, 621, 623, 626, 628, 629, 630, 631, 632, 635, 641, 647, 654, 662, 663, 666, 667, 668, 694, 698, 708, 711, 717, 718, 719, 732, 737, 738, 739, 740, 742, 744, 746, 747, 748, 749, 754, 755, 757, 760, 761, 762, 763, 764, 768, 770, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 795, 797, 798, 799, 803, 810, 814, 832, 833, 834, 835, 836, 839, 844, 845, 846, 847, 848, 850, 851, 852, 853, 858, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 880, 886, 888, 889, 890, 891, 892, 893, 894, 899, 901, 902, 905, 906, 907, 910, 911, 912, 913, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 938, 941, 945, 948, 951, 952, 955, 957, 958, 959, 961, 963, 967, 972, 973, 974, 980, 989, 991, 998, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1034, 1048, 1050, 1052, 1053, 1055, 1056, 1062, 1064, 1065, 1066, 1070, 1073, 1075, 1077, 1078, 1079, 1087, 1090, 1091, 1094, 1096, 1102, 1108, 1121, 1129, 1132, 1133, 1138, 1141, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1158, 1159, 1164, 1168, 1176, 1181, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1198, 1200, 1201, 1202, 1204, 1205, 1208, 1212, 1214, 1222, 1225, 1228, 1231, 1237, 1245, 1246, 1249, 1250, 1277, 1281, 1294, 1303, 1305, 1308, 1309, 1312, 1316, 1325, 1334], "6": [1, 9, 14, 32, 34, 36, 37, 38, 39, 40, 41, 42, 50, 52, 53, 55, 57, 62, 91, 92, 108, 111, 112, 113, 114, 125, 129, 130, 142, 165, 168, 172, 173, 174, 175, 176, 178, 179, 182, 187, 188, 189, 190, 191, 193, 199, 201, 203, 204, 206, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 224, 225, 228, 231, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 267, 268, 269, 273, 275, 276, 278, 279, 280, 282, 284, 285, 292, 302, 303, 309, 312, 317, 321, 343, 344, 345, 347, 353, 361, 368, 369, 384, 385, 396, 399, 403, 407, 422, 427, 428, 429, 440, 441, 443, 446, 447, 450, 452, 461, 462, 467, 468, 471, 476, 478, 480, 502, 503, 504, 514, 517, 531, 532, 533, 534, 538, 555, 587, 591, 599, 602, 603, 604, 608, 610, 612, 615, 617, 619, 621, 623, 626, 628, 629, 630, 635, 647, 654, 658, 667, 668, 698, 708, 711, 718, 726, 728, 730, 738, 746, 747, 748, 754, 757, 761, 764, 770, 776, 777, 781, 797, 810, 814, 832, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 858, 860, 861, 863, 865, 867, 871, 874, 876, 878, 880, 881, 882, 884, 886, 888, 889, 890, 891, 894, 898, 901, 902, 905, 906, 912, 922, 923, 927, 932, 955, 957, 958, 959, 961, 967, 989, 995, 997, 1000, 1001, 1010, 1013, 1045, 1065, 1070, 1077, 1087, 1091, 1122, 1123, 1133, 1136, 1150, 1151, 1152, 1153, 1157, 1176, 1187, 1190, 1191, 1195, 1197, 1203, 1205, 1207, 1209, 1214, 1222, 1237, 1241, 1250, 1281, 1293, 1305, 1325, 1333, 1334], "7": [1, 17, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 52, 55, 57, 62, 129, 130, 142, 157, 165, 168, 169, 171, 172, 173, 175, 176, 178, 182, 187, 189, 193, 199, 201, 204, 212, 217, 219, 221, 223, 224, 228, 231, 233, 235, 238, 240, 241, 243, 244, 245, 246, 250, 253, 256, 257, 258, 259, 265, 267, 268, 269, 276, 278, 279, 280, 309, 317, 321, 344, 345, 347, 356, 385, 402, 403, 407, 417, 428, 430, 431, 445, 447, 458, 471, 476, 480, 481, 502, 517, 531, 532, 533, 534, 591, 603, 608, 612, 628, 629, 647, 662, 697, 711, 738, 746, 747, 754, 757, 758, 764, 769, 776, 777, 797, 814, 832, 837, 839, 841, 843, 845, 849, 851, 853, 858, 860, 861, 865, 872, 874, 877, 878, 880, 881, 882, 886, 891, 894, 927, 932, 945, 958, 959, 961, 970, 1016, 1017, 1021, 1028, 1034, 1048, 1049, 1063, 1065, 1076, 1095, 1118, 1136, 1150, 1151, 1152, 1153, 1194, 1195, 1208, 1214, 1245, 1280, 1325, 1334], "float32": [1, 11, 34, 43, 57, 165, 185, 265, 266, 267, 271, 309, 454, 774, 814, 832, 927, 932, 1073, 1099, 1168, 1303, 1305, 1308, 1325], "lazi": [1, 47, 48, 49, 50, 52, 57, 62, 134, 150, 213, 230, 231, 255, 309, 555, 766, 787, 790, 805, 814, 839, 861, 862, 904, 907, 908, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 927, 932, 1333, 1334], "i16": [1, 57, 407, 428, 447, 639, 814, 932, 1046, 1302, 1325, 1334], "i32": [1, 57, 108, 111, 115, 147, 149, 150, 246, 255, 309, 344, 345, 347, 369, 402, 411, 414, 415, 417, 418, 420, 425, 449, 610, 639, 738, 804, 814, 882, 927, 958, 959, 961, 1016, 1028, 1032, 1034, 1035, 1043, 1067, 1168, 1197, 1325, 1334], "f32": [1, 57, 165, 255, 265, 271, 309, 639, 814, 832, 891, 927, 932, 1168, 1325], "i64": [1, 11, 14, 17, 18, 22, 28, 47, 49, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 129, 130, 134, 164, 165, 166, 167, 168, 172, 174, 175, 178, 179, 181, 182, 187, 188, 190, 191, 192, 193, 199, 201, 203, 205, 207, 209, 212, 213, 216, 217, 222, 223, 224, 229, 230, 231, 232, 235, 236, 238, 239, 240, 244, 246, 250, 253, 254, 255, 257, 259, 262, 269, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 299, 302, 303, 309, 317, 319, 323, 334, 339, 340, 342, 343, 348, 350, 351, 352, 353, 354, 356, 359, 361, 367, 368, 374, 382, 383, 384, 385, 391, 392, 395, 396, 410, 436, 438, 439, 440, 441, 442, 443, 444, 454, 457, 459, 460, 462, 463, 464, 465, 467, 468, 470, 471, 473, 476, 478, 479, 480, 481, 482, 486, 487, 490, 491, 493, 494, 495, 497, 499, 502, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 549, 552, 553, 555, 571, 572, 573, 575, 576, 578, 580, 582, 583, 588, 592, 593, 596, 597, 598, 599, 600, 603, 604, 605, 607, 608, 609, 610, 611, 612, 634, 636, 637, 639, 640, 641, 645, 646, 647, 663, 676, 677, 694, 698, 703, 704, 706, 707, 708, 709, 710, 711, 717, 718, 719, 720, 722, 725, 733, 736, 739, 741, 746, 747, 748, 749, 754, 757, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 783, 784, 786, 789, 793, 794, 797, 798, 799, 800, 804, 810, 814, 830, 832, 833, 835, 836, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 858, 861, 862, 863, 865, 867, 868, 871, 872, 873, 875, 876, 878, 879, 880, 882, 884, 886, 889, 890, 891, 893, 894, 896, 897, 898, 899, 902, 905, 906, 907, 908, 911, 912, 913, 915, 916, 919, 922, 923, 927, 932, 934, 935, 938, 957, 962, 964, 966, 967, 968, 970, 973, 980, 991, 994, 998, 999, 1000, 1001, 1006, 1007, 1024, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1077, 1078, 1079, 1081, 1082, 1085, 1086, 1087, 1090, 1092, 1104, 1121, 1130, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1143, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1162, 1163, 1170, 1175, 1181, 1188, 1191, 1192, 1193, 1194, 1195, 1197, 1201, 1204, 1208, 1212, 1213, 1216, 1220, 1222, 1224, 1225, 1229, 1230, 1281, 1287, 1292, 1294, 1301, 1309, 1310, 1316, 1325, 1333, 1334], "register_series_namespac": [1, 55, 56, 57], "math": [1, 11, 58, 393, 734, 735, 814, 995, 997, 1226, 1297, 1325], "mathshortcut": [1, 58], "": [1, 12, 34, 35, 36, 37, 42, 43, 47, 50, 58, 63, 83, 97, 108, 115, 120, 121, 122, 123, 125, 131, 135, 136, 139, 140, 154, 164, 165, 174, 177, 182, 187, 192, 193, 194, 195, 196, 197, 203, 209, 212, 213, 222, 229, 231, 236, 238, 240, 243, 246, 247, 254, 264, 267, 272, 274, 275, 276, 277, 282, 283, 309, 346, 368, 404, 410, 434, 437, 457, 463, 467, 498, 520, 553, 555, 564, 572, 584, 585, 592, 593, 605, 611, 647, 651, 659, 660, 661, 662, 663, 676, 677, 682, 683, 685, 693, 694, 695, 696, 700, 701, 704, 706, 707, 718, 727, 728, 729, 730, 736, 742, 745, 748, 749, 752, 753, 762, 763, 765, 766, 772, 776, 777, 778, 779, 781, 783, 784, 786, 793, 794, 796, 797, 798, 804, 810, 814, 830, 832, 842, 852, 853, 854, 855, 856, 857, 862, 871, 880, 882, 883, 890, 896, 897, 898, 899, 902, 903, 909, 915, 927, 932, 934, 935, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1023, 1024, 1027, 1029, 1030, 1034, 1035, 1037, 1041, 1042, 1046, 1049, 1050, 1052, 1055, 1063, 1065, 1066, 1067, 1068, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1250, 1251, 1256, 1257, 1259, 1260, 1261, 1262, 1265, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1325, 1329], "_": [1, 54, 58, 231, 264, 268, 309, 346, 520, 652, 660, 667, 668, 678, 683, 684, 888, 927, 985, 1235, 1243, 1250, 1251, 1261, 1267, 1300, 1325], "squar": [1, 58, 295, 498, 648, 814, 915, 1119, 1231, 1325], "cube": [1, 58, 372, 597, 814, 987, 1325], "s2": [1, 53, 91, 92, 145, 146, 185, 309, 972, 989, 1010, 1070, 1087, 1104, 1118, 1126, 1162, 1176, 1191, 1316, 1325], "renam": [1, 111, 120, 121, 157, 162, 183, 186, 192, 194, 195, 196, 197, 202, 237, 246, 247, 260, 282, 283, 287, 289, 290, 309, 319, 324, 386, 387, 388, 389, 390, 469, 485, 489, 492, 497, 509, 523, 541, 551, 552, 554, 568, 569, 575, 576, 577, 578, 580, 582, 583, 598, 613, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 706, 707, 709, 712, 713, 731, 750, 751, 752, 753, 775, 793, 796, 814, 852, 854, 855, 856, 857, 866, 882, 883, 895, 902, 903, 907, 909, 910, 927, 935, 939, 1002, 1003, 1004, 1005, 1007, 1101, 1107, 1128, 1142, 1160, 1169, 1188, 1199, 1215, 1217, 1236, 1245, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1290, 1295, 1296, 1301, 1325], "n2": [1, 358], "s3": [1, 36, 124, 135, 136, 139, 140, 309, 972, 1162, 1325], "n3": 1, "8": [1, 12, 32, 34, 36, 38, 39, 40, 41, 42, 43, 47, 52, 54, 55, 57, 58, 62, 78, 82, 88, 129, 130, 142, 165, 168, 169, 171, 172, 173, 174, 175, 176, 178, 182, 187, 189, 191, 199, 201, 209, 212, 213, 216, 217, 219, 221, 224, 233, 235, 238, 241, 243, 244, 245, 246, 250, 253, 255, 256, 257, 259, 265, 267, 268, 269, 276, 279, 280, 282, 309, 321, 323, 336, 344, 345, 347, 382, 385, 391, 403, 471, 477, 480, 481, 511, 513, 517, 523, 531, 532, 533, 534, 573, 591, 597, 608, 609, 614, 639, 645, 647, 669, 672, 673, 674, 693, 726, 732, 738, 742, 744, 747, 749, 761, 763, 768, 769, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 798, 799, 803, 814, 832, 837, 839, 841, 842, 843, 845, 849, 851, 858, 861, 865, 867, 876, 878, 881, 882, 886, 891, 894, 902, 927, 932, 958, 959, 961, 997, 1006, 1028, 1091, 1095, 1118, 1130, 1132, 1136, 1142, 1150, 1151, 1152, 1153, 1184, 1195, 1198, 1200, 1203, 1205, 1207, 1209, 1252, 1255, 1256, 1257, 1276, 1325, 1334], "9": [1, 10, 32, 34, 36, 37, 38, 39, 42, 47, 52, 54, 62, 142, 169, 171, 185, 194, 199, 204, 216, 231, 240, 242, 243, 246, 258, 259, 276, 280, 282, 302, 309, 317, 321, 323, 336, 344, 345, 347, 352, 354, 382, 385, 393, 403, 463, 471, 480, 487, 497, 511, 517, 529, 537, 575, 591, 602, 608, 612, 614, 625, 628, 629, 641, 645, 660, 697, 705, 707, 740, 746, 747, 754, 757, 769, 802, 814, 839, 854, 858, 860, 865, 880, 882, 894, 902, 922, 927, 932, 953, 954, 958, 959, 961, 966, 968, 1008, 1021, 1032, 1035, 1043, 1049, 1063, 1064, 1104, 1118, 1130, 1136, 1148, 1156, 1195, 1200, 1206, 1208, 1210, 1225, 1243, 1280, 1289, 1304, 1325], "27": [1, 58, 266, 302, 309, 385, 422, 429, 446, 454, 616, 618, 620, 622, 624, 627, 629, 631, 814, 922, 1303, 1325, 1334], "16": [1, 37, 56, 75, 85, 142, 156, 171, 186, 193, 240, 282, 309, 382, 385, 480, 554, 573, 597, 612, 698, 707, 746, 760, 761, 764, 814, 839, 853, 880, 888, 902, 927, 932, 1049, 1063, 1169, 1184, 1215, 1226, 1281, 1297, 1325], "64": [1, 56, 58, 69, 71, 74, 77, 84, 87, 141, 161, 271, 309, 379, 573, 597, 814, 1184, 1325], "25": [1, 28, 37, 58, 115, 171, 193, 213, 240, 266, 271, 278, 282, 309, 395, 407, 409, 428, 431, 445, 447, 454, 600, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 719, 755, 756, 757, 758, 759, 760, 766, 777, 801, 802, 814, 839, 853, 862, 869, 880, 900, 902, 927, 932, 1008, 1009, 1023, 1049, 1063, 1069, 1073, 1091, 1184, 1188, 1325], "125": [1, 37, 58, 255, 309, 317, 814, 891, 927, 1184, 1325], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 394, 469, 814, 840, 927], "activ": [2, 8, 9, 19, 20, 22, 23, 24, 25, 29, 30, 513, 660, 1132, 1243], "bool": [2, 8, 9, 10, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 54, 60, 61, 62, 91, 92, 108, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 161, 164, 165, 166, 167, 171, 176, 181, 182, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 205, 206, 207, 210, 212, 213, 220, 229, 231, 240, 241, 242, 243, 244, 248, 252, 254, 255, 258, 262, 264, 267, 268, 272, 273, 274, 275, 277, 278, 280, 282, 291, 293, 296, 299, 309, 319, 320, 321, 322, 323, 324, 334, 337, 338, 341, 345, 346, 354, 359, 362, 363, 365, 366, 367, 368, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 413, 430, 432, 445, 450, 451, 452, 453, 454, 455, 456, 472, 474, 477, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 498, 500, 503, 504, 508, 513, 516, 518, 520, 530, 537, 541, 544, 550, 551, 553, 555, 559, 560, 561, 562, 563, 567, 586, 587, 589, 591, 594, 595, 600, 603, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 639, 644, 646, 647, 650, 651, 652, 654, 655, 657, 662, 675, 676, 677, 678, 683, 684, 686, 693, 695, 696, 698, 700, 704, 706, 717, 718, 720, 723, 726, 727, 728, 729, 730, 731, 733, 736, 737, 738, 741, 742, 745, 746, 750, 755, 756, 757, 758, 759, 770, 771, 774, 777, 787, 790, 796, 801, 802, 804, 805, 814, 830, 832, 833, 835, 836, 839, 844, 846, 848, 849, 852, 853, 854, 855, 856, 857, 861, 862, 866, 867, 871, 876, 880, 885, 888, 890, 891, 896, 897, 898, 899, 902, 911, 913, 916, 919, 927, 931, 932, 936, 937, 939, 948, 951, 952, 955, 959, 960, 968, 973, 975, 976, 978, 979, 981, 983, 986, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1027, 1048, 1050, 1063, 1069, 1070, 1072, 1074, 1075, 1082, 1088, 1091, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1122, 1123, 1127, 1128, 1132, 1135, 1137, 1139, 1149, 1156, 1160, 1163, 1170, 1182, 1185, 1186, 1188, 1190, 1191, 1192, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1215, 1216, 1217, 1218, 1223, 1228, 1230, 1233, 1234, 1235, 1237, 1238, 1240, 1245, 1258, 1259, 1260, 1261, 1266, 1267, 1269, 1276, 1278, 1279, 1281, 1283, 1300, 1304, 1305, 1306, 1310, 1313, 1315, 1325, 1333], "none": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 61, 66, 69, 70, 92, 108, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 162, 166, 170, 171, 174, 180, 181, 191, 193, 194, 196, 197, 198, 204, 208, 212, 213, 214, 216, 217, 219, 222, 224, 227, 228, 231, 240, 241, 244, 250, 251, 253, 254, 255, 257, 262, 264, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 290, 294, 309, 320, 322, 323, 324, 336, 337, 338, 345, 346, 358, 361, 374, 380, 381, 382, 385, 392, 397, 398, 406, 427, 430, 431, 445, 452, 453, 454, 455, 456, 457, 460, 461, 462, 468, 475, 477, 480, 481, 482, 491, 493, 494, 495, 501, 503, 504, 512, 518, 520, 522, 530, 531, 532, 533, 534, 536, 543, 551, 553, 554, 555, 563, 566, 567, 569, 574, 587, 588, 589, 590, 593, 600, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 645, 646, 650, 651, 654, 656, 657, 660, 662, 663, 664, 665, 666, 667, 668, 671, 673, 674, 675, 681, 682, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 698, 700, 703, 704, 705, 706, 716, 728, 729, 730, 731, 733, 739, 741, 743, 745, 749, 755, 756, 757, 758, 759, 760, 762, 763, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 784, 786, 790, 791, 792, 796, 798, 800, 801, 802, 804, 814, 833, 834, 836, 838, 839, 842, 847, 848, 853, 854, 856, 857, 860, 861, 862, 864, 866, 867, 871, 874, 880, 884, 886, 887, 888, 889, 890, 891, 897, 898, 899, 904, 909, 910, 914, 915, 927, 931, 932, 936, 937, 939, 946, 947, 951, 952, 959, 960, 972, 990, 991, 1007, 1008, 1010, 1011, 1012, 1020, 1029, 1030, 1031, 1037, 1048, 1049, 1063, 1069, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1089, 1091, 1093, 1094, 1095, 1096, 1106, 1111, 1112, 1115, 1118, 1119, 1120, 1122, 1123, 1126, 1131, 1137, 1139, 1141, 1149, 1150, 1151, 1152, 1153, 1155, 1162, 1169, 1170, 1171, 1172, 1173, 1174, 1183, 1188, 1189, 1190, 1194, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1212, 1213, 1216, 1217, 1220, 1221, 1224, 1225, 1228, 1229, 1232, 1233, 1234, 1237, 1239, 1240, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1256, 1257, 1258, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1281, 1283, 1286, 1289, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1314, 1325, 1333], "true": [2, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 60, 61, 62, 108, 109, 110, 111, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 128, 131, 132, 134, 135, 137, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 159, 161, 164, 165, 166, 167, 171, 176, 181, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 203, 205, 206, 207, 210, 212, 213, 214, 219, 220, 226, 227, 229, 231, 232, 240, 241, 242, 243, 244, 246, 254, 255, 258, 262, 264, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 282, 288, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 318, 319, 320, 321, 322, 323, 324, 335, 337, 338, 341, 345, 346, 354, 358, 362, 363, 365, 366, 367, 368, 369, 381, 382, 383, 384, 385, 392, 399, 401, 404, 407, 410, 413, 423, 424, 427, 428, 430, 431, 432, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 456, 470, 472, 473, 474, 477, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 498, 500, 503, 504, 508, 516, 518, 520, 537, 541, 543, 550, 553, 555, 559, 560, 561, 562, 563, 564, 567, 568, 586, 587, 589, 591, 594, 595, 600, 605, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 639, 644, 646, 647, 650, 651, 652, 654, 655, 657, 662, 664, 666, 675, 676, 677, 683, 684, 686, 693, 695, 696, 698, 700, 704, 706, 717, 718, 720, 723, 726, 727, 728, 729, 730, 731, 733, 736, 737, 738, 742, 755, 757, 758, 764, 770, 777, 787, 790, 796, 801, 804, 805, 814, 830, 832, 833, 834, 835, 836, 839, 844, 846, 848, 852, 853, 854, 855, 856, 857, 861, 862, 864, 866, 867, 871, 876, 880, 882, 888, 890, 891, 896, 897, 898, 899, 902, 908, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 931, 932, 936, 937, 939, 949, 951, 952, 955, 959, 960, 968, 975, 976, 978, 979, 981, 983, 986, 989, 990, 1007, 1013, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1027, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1070, 1072, 1074, 1075, 1082, 1088, 1091, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1122, 1123, 1127, 1135, 1137, 1139, 1156, 1160, 1170, 1176, 1182, 1185, 1186, 1188, 1191, 1192, 1206, 1215, 1228, 1230, 1233, 1234, 1235, 1237, 1238, 1240, 1245, 1247, 1249, 1258, 1259, 1260, 1266, 1267, 1269, 1276, 1278, 1279, 1281, 1283, 1300, 1305, 1306, 1313, 1315, 1316, 1325, 1334], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1325, 1333], "decim": [2, 10, 11, 12, 28, 29, 34, 37, 43, 120, 121, 134, 309, 632, 697, 814, 927, 932, 1210, 1280, 1325], "temporari": [2, 35, 309], "set": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 54, 55, 60, 61, 66, 69, 70, 72, 109, 110, 111, 114, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 168, 174, 184, 192, 193, 194, 195, 196, 197, 198, 210, 213, 217, 219, 220, 222, 224, 240, 242, 244, 246, 253, 255, 257, 258, 264, 266, 267, 271, 273, 274, 276, 277, 282, 309, 320, 322, 324, 345, 346, 358, 374, 392, 430, 448, 454, 475, 487, 516, 518, 520, 530, 531, 532, 533, 534, 536, 541, 543, 553, 554, 555, 566, 596, 600, 607, 612, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 634, 640, 644, 645, 650, 664, 665, 671, 676, 677, 681, 682, 687, 688, 689, 690, 691, 692, 693, 695, 696, 700, 723, 727, 729, 733, 737, 741, 755, 756, 757, 758, 759, 760, 770, 771, 774, 787, 790, 791, 792, 796, 801, 802, 804, 805, 814, 826, 835, 836, 842, 844, 852, 853, 854, 855, 856, 857, 861, 862, 866, 867, 871, 880, 882, 884, 889, 891, 897, 899, 902, 909, 915, 927, 931, 936, 937, 959, 960, 972, 976, 984, 991, 1007, 1048, 1066, 1073, 1083, 1089, 1104, 1114, 1135, 1137, 1139, 1149, 1150, 1151, 1152, 1153, 1155, 1160, 1162, 1169, 1170, 1188, 1194, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1212, 1213, 1214, 1217, 1224, 1228, 1229, 1233, 1247, 1248, 1254, 1259, 1260, 1264, 1265, 1270, 1271, 1272, 1273, 1276, 1278, 1279, 1283, 1305, 1313, 1325, 1334], "remov": [2, 5, 93, 120, 121, 134, 161, 172, 217, 219, 224, 257, 264, 278, 309, 324, 431, 445, 454, 457, 552, 576, 616, 618, 620, 622, 624, 627, 629, 631, 671, 681, 687, 688, 689, 690, 691, 692, 762, 814, 841, 927, 984, 1007, 1049, 1063, 1188, 1254, 1264, 1270, 1271, 1272, 1273, 1274, 1275, 1279, 1300, 1304, 1315, 1325], "onc": [2, 50, 120, 121, 156, 216, 242, 244, 287, 309, 530, 553, 555, 634, 691, 692, 814, 831, 907, 927, 1149, 1170, 1212, 1274, 1275, 1325], "stabil": [2, 198, 309, 475, 814, 1089, 1325], "current": [2, 3, 4, 6, 7, 31, 35, 49, 115, 122, 123, 125, 132, 139, 166, 167, 212, 213, 255, 266, 271, 309, 409, 453, 455, 456, 543, 593, 814, 833, 834, 861, 862, 891, 927, 932, 990, 994, 1014, 1023, 1072, 1074, 1075, 1184, 1303, 1308, 1325, 1333], "consid": [2, 38, 43, 44, 45, 46, 60, 61, 70, 72, 91, 92, 120, 121, 122, 132, 134, 139, 140, 143, 144, 145, 146, 174, 176, 186, 209, 216, 222, 242, 255, 266, 271, 274, 276, 277, 309, 324, 368, 374, 391, 392, 431, 467, 477, 553, 555, 574, 575, 578, 580, 582, 583, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 718, 746, 764, 791, 792, 810, 814, 835, 836, 842, 858, 865, 871, 891, 897, 899, 915, 927, 932, 983, 986, 991, 1006, 1007, 1049, 1070, 1091, 1106, 1170, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1215, 1216, 1303, 1308, 1325], "beta": 2, "cfg": [3, 5, 18, 159], "previous": [3, 4], "save": [3, 4, 7, 193, 213, 240, 278, 309, 400, 409, 427, 431, 445, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 801, 802, 810, 814, 826, 853, 862, 880, 927, 1023, 1045, 1049, 1063], "option": [3, 4, 5, 6, 7, 31, 35, 36, 37, 54, 70, 120, 122, 123, 124, 125, 126, 128, 132, 135, 136, 137, 139, 140, 142, 147, 148, 149, 150, 153, 154, 155, 193, 208, 213, 222, 255, 262, 273, 277, 309, 399, 498, 566, 613, 615, 617, 619, 621, 623, 626, 628, 630, 644, 652, 678, 682, 723, 796, 804, 814, 826, 853, 861, 862, 871, 891, 899, 927, 932, 1013, 1115, 1119, 1199, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1228, 1235, 1261, 1265, 1301, 1313, 1325], "from": [3, 4, 5, 6, 7, 11, 17, 29, 33, 34, 36, 37, 43, 47, 48, 49, 54, 62, 83, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 165, 171, 172, 177, 179, 184, 191, 193, 196, 210, 211, 212, 213, 214, 222, 231, 235, 240, 241, 243, 244, 246, 247, 255, 264, 271, 273, 274, 276, 277, 278, 284, 309, 312, 358, 392, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 454, 457, 467, 469, 480, 498, 517, 530, 543, 555, 566, 584, 585, 587, 592, 593, 596, 600, 602, 612, 614, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 634, 647, 659, 660, 663, 664, 665, 675, 682, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 721, 734, 735, 738, 739, 754, 755, 756, 757, 758, 759, 760, 774, 790, 800, 801, 802, 810, 813, 814, 832, 839, 840, 841, 846, 853, 856, 861, 862, 871, 878, 880, 882, 883, 891, 897, 899, 904, 905, 927, 932, 972, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1073, 1078, 1115, 1119, 1136, 1149, 1162, 1179, 1180, 1181, 1184, 1188, 1200, 1212, 1242, 1243, 1246, 1247, 1248, 1258, 1265, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1283, 1300, 1316, 1325, 1333, 1334], "json": [3, 4, 6, 7, 40, 41, 129, 130, 136, 138, 309, 394, 469, 566, 569, 664, 665, 666, 705, 814, 826, 840, 884, 927, 931, 1247, 1248, 1249, 1289], "paramet": [3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 69, 70, 71, 72, 79, 83, 92, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 164, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 289, 292, 294, 295, 301, 303, 309, 317, 319, 320, 321, 322, 323, 324, 334, 341, 342, 345, 346, 353, 354, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 399, 401, 403, 404, 410, 427, 430, 431, 432, 434, 436, 437, 445, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 487, 498, 500, 502, 507, 508, 509, 510, 511, 513, 516, 517, 518, 519, 520, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 550, 551, 552, 553, 554, 555, 566, 567, 571, 573, 576, 577, 578, 579, 580, 581, 586, 587, 591, 592, 593, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 706, 707, 708, 709, 711, 712, 713, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 830, 832, 833, 835, 836, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 865, 866, 867, 871, 872, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 909, 912, 914, 915, 921, 923, 927, 931, 932, 935, 936, 937, 938, 939, 948, 955, 956, 959, 960, 967, 968, 972, 973, 975, 976, 977, 978, 979, 980, 981, 984, 990, 991, 992, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1017, 1018, 1024, 1045, 1048, 1049, 1050, 1052, 1054, 1055, 1063, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1089, 1090, 1091, 1094, 1095, 1096, 1106, 1114, 1115, 1119, 1121, 1126, 1127, 1128, 1129, 1130, 1132, 1135, 1136, 1137, 1138, 1139, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1169, 1170, 1184, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1224, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1286, 1287, 1290, 1294, 1295, 1296, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1309, 1310, 1313, 1314, 1315, 1316, 1325, 1333], "produc": [3, 4, 150, 154, 212, 309, 342, 509, 510, 563, 776, 861, 866, 867, 927, 956, 1128, 1129], "load_from_fil": [3, 6, 7], "file": [3, 4, 6, 7, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 179, 309, 394, 469, 566, 569, 579, 581, 814, 840, 884, 927, 931, 1078, 1325], "path": [4, 7, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 309, 394, 566, 569, 636, 666, 814, 840, 884, 888, 927, 931, 1218, 1249, 1325, 1334], "load": [4, 6, 7, 111, 113, 122, 124, 125, 131, 135, 136, 153, 155, 309, 814, 826, 858, 865, 927, 931, 1334], "reset": [5, 159], "default": [5, 8, 10, 11, 15, 28, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 54, 60, 61, 62, 66, 69, 70, 71, 108, 110, 111, 112, 113, 114, 115, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 134, 139, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 159, 171, 174, 177, 192, 193, 194, 195, 196, 197, 198, 210, 212, 213, 220, 222, 229, 231, 240, 241, 242, 243, 244, 250, 256, 258, 264, 266, 267, 271, 274, 276, 277, 279, 284, 294, 309, 319, 320, 322, 346, 353, 358, 371, 392, 399, 430, 431, 445, 450, 452, 453, 455, 456, 475, 516, 520, 530, 535, 536, 538, 541, 543, 545, 546, 554, 563, 566, 584, 585, 587, 593, 600, 603, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 634, 637, 640, 649, 650, 659, 671, 675, 681, 682, 687, 688, 689, 690, 693, 695, 696, 698, 700, 723, 724, 727, 729, 733, 737, 738, 741, 742, 744, 755, 756, 757, 758, 759, 760, 763, 766, 770, 771, 772, 774, 786, 787, 790, 795, 796, 801, 802, 803, 805, 814, 835, 836, 839, 842, 844, 852, 853, 854, 855, 856, 857, 861, 862, 871, 880, 884, 886, 892, 897, 899, 900, 905, 914, 927, 932, 936, 937, 960, 967, 972, 984, 991, 1007, 1008, 1013, 1048, 1049, 1063, 1069, 1071, 1072, 1074, 1075, 1089, 1135, 1139, 1149, 1154, 1155, 1160, 1162, 1169, 1179, 1180, 1184, 1188, 1190, 1194, 1212, 1220, 1224, 1232, 1233, 1234, 1242, 1245, 1254, 1258, 1264, 1265, 1270, 1271, 1272, 1273, 1276, 1278, 1279, 1281, 1283, 1303, 1305, 1313, 1314, 1325, 1334], "state": [5, 101, 746, 750, 826, 844, 846, 876, 888, 927], "note": [5, 11, 21, 36, 37, 47, 51, 52, 53, 54, 61, 68, 69, 71, 84, 91, 92, 108, 109, 110, 112, 114, 115, 120, 122, 123, 124, 125, 129, 130, 135, 136, 140, 143, 145, 148, 150, 154, 156, 159, 161, 164, 169, 171, 180, 193, 194, 196, 197, 198, 208, 209, 210, 212, 213, 216, 227, 230, 231, 240, 241, 242, 243, 250, 255, 263, 266, 268, 271, 272, 273, 277, 278, 282, 284, 285, 309, 353, 374, 384, 385, 397, 398, 404, 423, 424, 427, 431, 445, 454, 461, 467, 469, 475, 482, 491, 493, 497, 513, 516, 535, 541, 543, 555, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 598, 607, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 637, 644, 651, 659, 660, 661, 662, 663, 667, 668, 676, 677, 682, 688, 689, 690, 693, 694, 703, 704, 709, 710, 719, 728, 730, 738, 746, 755, 756, 758, 759, 760, 764, 774, 787, 789, 790, 801, 802, 804, 805, 810, 814, 825, 830, 836, 839, 846, 847, 853, 854, 856, 857, 858, 862, 865, 878, 880, 886, 888, 890, 891, 896, 899, 902, 905, 906, 927, 932, 967, 991, 1000, 1001, 1008, 1011, 1012, 1018, 1041, 1042, 1045, 1049, 1063, 1073, 1080, 1088, 1089, 1096, 1132, 1135, 1154, 1160, 1170, 1194, 1198, 1206, 1213, 1216, 1220, 1223, 1228, 1234, 1242, 1243, 1244, 1245, 1246, 1250, 1251, 1259, 1260, 1265, 1271, 1272, 1273, 1276, 1277, 1286, 1293, 1306, 1308, 1325, 1329, 1333], "method": [5, 32, 35, 36, 37, 38, 39, 51, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 109, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 147, 150, 154, 159, 162, 171, 174, 179, 183, 186, 192, 194, 195, 196, 197, 202, 204, 210, 216, 217, 219, 224, 227, 233, 237, 241, 242, 243, 250, 257, 260, 274, 282, 289, 290, 295, 301, 309, 317, 320, 321, 324, 353, 374, 386, 387, 388, 389, 390, 394, 434, 437, 451, 452, 460, 467, 469, 472, 474, 480, 485, 489, 492, 497, 500, 509, 523, 535, 541, 550, 551, 552, 554, 555, 569, 571, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 591, 597, 598, 601, 603, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 637, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 689, 690, 691, 692, 697, 703, 708, 709, 712, 713, 719, 721, 726, 742, 777, 788, 806, 807, 809, 810, 814, 815, 816, 819, 820, 821, 822, 823, 826, 836, 839, 840, 842, 854, 855, 856, 857, 860, 866, 877, 886, 895, 897, 902, 909, 910, 915, 921, 927, 938, 939, 967, 984, 991, 1002, 1003, 1004, 1005, 1008, 1052, 1055, 1078, 1079, 1094, 1101, 1107, 1128, 1142, 1154, 1160, 1169, 1170, 1189, 1190, 1199, 1205, 1215, 1217, 1220, 1236, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1280, 1286, 1295, 1296, 1307, 1315, 1317, 1319, 1321, 1325, 1326, 1330, 1331, 1332], "oper": [5, 37, 53, 62, 92, 97, 98, 105, 108, 110, 111, 112, 113, 114, 120, 122, 162, 167, 179, 182, 185, 192, 195, 202, 203, 214, 216, 223, 227, 229, 230, 234, 238, 240, 243, 244, 250, 261, 267, 268, 273, 276, 286, 287, 309, 317, 318, 321, 353, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 451, 452, 467, 469, 472, 474, 497, 500, 530, 531, 532, 533, 534, 535, 543, 550, 568, 571, 573, 574, 575, 576, 578, 580, 582, 583, 586, 587, 588, 591, 592, 597, 598, 605, 616, 618, 620, 622, 624, 627, 629, 631, 634, 637, 708, 709, 719, 726, 727, 729, 740, 741, 745, 761, 804, 814, 826, 834, 839, 846, 852, 855, 858, 861, 865, 871, 872, 886, 891, 907, 927, 931, 967, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1078, 1149, 1150, 1151, 1152, 1153, 1154, 1192, 1212, 1220, 1299, 1304, 1305, 1306, 1315, 1325], "environ": [5, 31, 132, 139, 153, 156, 266, 309], "ani": [5, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 59, 60, 61, 69, 70, 72, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 140, 147, 149, 150, 152, 154, 159, 162, 169, 174, 179, 181, 182, 185, 208, 210, 211, 216, 220, 229, 230, 241, 242, 243, 255, 258, 262, 263, 266, 267, 268, 271, 274, 276, 277, 285, 309, 317, 320, 321, 324, 346, 369, 391, 392, 431, 432, 451, 452, 462, 463, 467, 470, 472, 474, 477, 487, 500, 507, 513, 520, 550, 551, 553, 554, 555, 568, 571, 573, 575, 576, 578, 580, 582, 583, 586, 587, 591, 596, 598, 600, 607, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 650, 652, 675, 689, 690, 691, 692, 693, 695, 696, 698, 700, 708, 709, 712, 719, 726, 727, 728, 730, 731, 741, 742, 743, 774, 777, 791, 792, 804, 814, 835, 836, 842, 848, 849, 875, 891, 897, 899, 906, 927, 931, 932, 936, 939, 960, 986, 1006, 1007, 1049, 1050, 1078, 1081, 1085, 1091, 1104, 1118, 1126, 1132, 1139, 1169, 1170, 1188, 1194, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1214, 1217, 1233, 1235, 1258, 1276, 1278, 1279, 1281, 1283, 1295, 1303, 1304, 1305, 1306, 1308, 1325, 1333, 1334], "local": [5, 36, 122, 124, 135, 136, 139, 309, 445, 594, 595, 814, 983, 985, 1019, 1020, 1049, 1053, 1063, 1185, 1186, 1325], "non": [5, 34, 36, 37, 43, 54, 69, 70, 113, 141, 170, 194, 197, 211, 222, 240, 246, 247, 250, 273, 277, 282, 283, 309, 374, 380, 381, 399, 430, 482, 543, 553, 554, 555, 593, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 653, 654, 660, 667, 703, 707, 728, 730, 739, 740, 741, 743, 745, 749, 753, 760, 779, 781, 784, 791, 792, 793, 796, 798, 814, 838, 854, 857, 871, 880, 882, 883, 886, 899, 902, 903, 927, 931, 932, 991, 1008, 1013, 1048, 1096, 1162, 1170, 1184, 1194, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1220, 1236, 1237, 1243, 1250, 1286, 1305, 1325], "env": [5, 155], "back": [5, 54, 179, 193, 196, 267, 268, 309, 566, 592, 701, 814, 853, 856, 884, 927, 1078, 1284, 1306, 1325], "valu": [5, 11, 12, 13, 14, 18, 29, 31, 33, 34, 37, 40, 43, 47, 51, 53, 54, 62, 63, 66, 79, 80, 89, 92, 97, 110, 111, 113, 114, 120, 121, 122, 123, 125, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 163, 164, 171, 174, 176, 179, 180, 181, 182, 186, 191, 193, 196, 198, 199, 204, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 229, 231, 232, 233, 235, 240, 241, 242, 243, 244, 250, 251, 254, 256, 257, 258, 259, 262, 263, 267, 268, 272, 273, 276, 277, 278, 279, 286, 290, 291, 293, 296, 297, 299, 300, 309, 316, 317, 318, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 385, 391, 392, 395, 397, 398, 403, 407, 422, 428, 446, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 535, 537, 538, 539, 540, 543, 544, 545, 547, 549, 550, 553, 554, 555, 556, 557, 558, 570, 571, 572, 573, 574, 584, 585, 586, 587, 590, 592, 593, 596, 597, 600, 601, 603, 606, 607, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 648, 650, 651, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 668, 673, 674, 676, 677, 679, 682, 684, 685, 686, 694, 703, 705, 708, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 732, 736, 739, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 763, 764, 769, 770, 771, 772, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 797, 798, 804, 814, 829, 830, 839, 842, 847, 848, 849, 853, 856, 859, 860, 861, 862, 868, 869, 870, 871, 873, 874, 877, 878, 880, 884, 886, 887, 890, 892, 893, 896, 899, 900, 910, 911, 913, 916, 917, 919, 920, 927, 932, 934, 936, 937, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 973, 974, 976, 977, 978, 979, 984, 988, 991, 992, 993, 995, 996, 997, 1006, 1007, 1008, 1009, 1011, 1012, 1017, 1021, 1040, 1046, 1064, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1100, 1101, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1120, 1121, 1122, 1123, 1124, 1125, 1128, 1129, 1130, 1131, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1149, 1154, 1156, 1157, 1158, 1159, 1163, 1164, 1169, 1170, 1171, 1172, 1174, 1175, 1177, 1179, 1180, 1181, 1183, 1184, 1187, 1188, 1189, 1190, 1194, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1213, 1214, 1215, 1216, 1217, 1220, 1221, 1225, 1226, 1227, 1228, 1230, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1256, 1257, 1259, 1260, 1262, 1265, 1267, 1268, 1269, 1277, 1286, 1289, 1293, 1294, 1295, 1296, 1297, 1298, 1305, 1306, 1307, 1311, 1313, 1315, 1316, 1325, 1334], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 94, 96, 97, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 676, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 931, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1256, 1257, 1259, 1260, 1261, 1262, 1265, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1325, 1333], "contain": [6, 34, 35, 36, 37, 43, 54, 59, 110, 113, 115, 122, 123, 124, 135, 136, 143, 144, 149, 150, 152, 154, 164, 174, 193, 196, 206, 211, 227, 266, 267, 271, 272, 277, 290, 309, 320, 322, 324, 346, 365, 366, 394, 487, 520, 554, 555, 650, 657, 659, 661, 662, 666, 685, 686, 703, 727, 728, 729, 730, 741, 745, 777, 814, 830, 840, 842, 853, 856, 876, 896, 899, 910, 927, 931, 932, 936, 937, 960, 1007, 1139, 1169, 1176, 1188, 1233, 1240, 1242, 1244, 1245, 1249, 1268, 1269, 1286, 1299, 1305, 1325], "save_to_fil": 6, "json_str": [6, 129, 130], "written": [7, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 309, 566, 884, 927], "leav": [7, 222, 309, 543, 871, 927], "directli": [7, 31, 49, 61, 122, 150, 154, 159, 243, 266, 309, 453, 455, 456, 607, 790, 814, 836, 927, 984, 1072, 1074, 1075, 1194, 1303, 1325, 1334], "ascii": [8, 21, 652, 663, 667, 668, 670, 678, 680, 682, 694, 703, 932, 1235, 1246, 1250, 1251, 1253, 1261, 1263, 1265, 1277, 1286], "charact": [8, 10, 13, 21, 27, 28, 29, 34, 35, 43, 119, 120, 121, 123, 134, 309, 427, 658, 660, 663, 667, 668, 670, 671, 672, 673, 674, 676, 677, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 703, 876, 927, 932, 1045, 1241, 1243, 1246, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1259, 1260, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1277, 1286], "displai": [8, 11, 12, 13, 14, 18, 20, 24, 26, 37, 171, 191, 309, 839, 927], "tabl": [8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 35, 36, 37, 48, 49, 50, 52, 108, 115, 124, 125, 135, 136, 212, 231, 255, 261, 268, 276, 277, 309, 861, 891, 899, 927, 1333], "outlin": 8, "fals": [8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 54, 60, 61, 62, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 161, 164, 165, 166, 167, 171, 176, 185, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 205, 206, 207, 210, 212, 213, 214, 219, 220, 226, 227, 229, 231, 232, 240, 241, 242, 243, 244, 248, 252, 254, 255, 258, 262, 264, 267, 268, 272, 273, 274, 277, 278, 280, 282, 291, 293, 296, 297, 299, 302, 309, 320, 321, 322, 324, 334, 337, 338, 341, 345, 346, 354, 359, 362, 365, 366, 367, 368, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 413, 430, 432, 445, 450, 451, 452, 453, 454, 455, 456, 474, 477, 482, 483, 484, 486, 487, 488, 490, 491, 493, 494, 495, 496, 498, 500, 503, 504, 508, 513, 516, 518, 520, 530, 537, 541, 544, 550, 551, 553, 555, 559, 562, 564, 567, 586, 587, 589, 591, 594, 595, 600, 603, 612, 613, 614, 615, 617, 619, 621, 623, 625, 626, 628, 630, 634, 636, 639, 644, 646, 647, 650, 651, 652, 654, 657, 662, 664, 675, 676, 677, 678, 683, 684, 686, 693, 695, 696, 698, 717, 718, 720, 723, 726, 727, 728, 729, 730, 733, 736, 737, 738, 741, 742, 745, 746, 750, 755, 756, 757, 758, 759, 770, 771, 774, 787, 790, 796, 801, 802, 804, 805, 814, 830, 832, 833, 834, 835, 836, 839, 844, 846, 852, 853, 854, 855, 856, 857, 861, 862, 864, 866, 867, 876, 880, 885, 888, 890, 891, 896, 897, 899, 902, 911, 913, 916, 917, 919, 922, 927, 931, 932, 936, 937, 948, 951, 952, 955, 959, 960, 968, 973, 975, 976, 978, 979, 981, 983, 986, 989, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1027, 1048, 1050, 1063, 1069, 1070, 1072, 1073, 1074, 1075, 1082, 1083, 1087, 1088, 1096, 1097, 1098, 1100, 1102, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1119, 1122, 1123, 1127, 1132, 1135, 1137, 1139, 1149, 1156, 1160, 1163, 1176, 1182, 1185, 1186, 1188, 1190, 1191, 1192, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1215, 1218, 1223, 1228, 1230, 1233, 1234, 1235, 1237, 1240, 1245, 1247, 1258, 1259, 1260, 1261, 1266, 1267, 1269, 1276, 1278, 1279, 1281, 1300, 1305, 1306, 1310, 1313, 1315, 1316, 1325, 1333], "revert": [8, 10, 11], "utf8_full_condens": [8, 21, 115], "format": [8, 12, 16, 17, 21, 33, 34, 37, 38, 39, 43, 118, 120, 121, 122, 126, 128, 134, 140, 178, 191, 210, 222, 242, 243, 263, 307, 309, 431, 434, 437, 566, 567, 693, 695, 696, 700, 760, 844, 845, 871, 884, 927, 1052, 1055, 1276, 1278, 1279, 1283, 1324], "style": [8, 21, 37, 122, 231, 309], "abc": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 317, 660, 676, 689, 814, 932, 1243, 1259, 1260], "xyz": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 317, 654, 660, 814, 1237, 1243, 1301, 1325], "f64": [8, 10, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 47, 54, 56, 58, 62, 79, 109, 111, 129, 140, 147, 150, 165, 166, 167, 169, 171, 172, 175, 180, 181, 185, 190, 191, 192, 193, 203, 204, 212, 213, 218, 219, 220, 221, 225, 231, 232, 233, 253, 254, 256, 258, 271, 279, 282, 287, 291, 293, 296, 297, 298, 299, 301, 302, 309, 316, 319, 326, 327, 328, 329, 330, 331, 349, 355, 360, 369, 372, 373, 377, 378, 379, 392, 393, 397, 398, 432, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 466, 467, 472, 474, 480, 481, 491, 493, 494, 495, 497, 498, 500, 513, 525, 526, 538, 545, 546, 547, 548, 550, 556, 557, 558, 570, 573, 575, 584, 585, 586, 587, 593, 597, 600, 601, 602, 603, 607, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 642, 643, 644, 648, 649, 707, 714, 715, 719, 724, 734, 735, 739, 740, 742, 744, 761, 762, 777, 780, 781, 782, 795, 803, 810, 814, 832, 833, 839, 841, 847, 848, 852, 853, 860, 861, 862, 869, 870, 877, 890, 892, 900, 902, 904, 907, 911, 913, 916, 917, 918, 919, 921, 922, 927, 932, 940, 941, 942, 943, 944, 945, 963, 969, 974, 987, 988, 995, 996, 997, 1007, 1008, 1011, 1012, 1050, 1072, 1073, 1074, 1075, 1076, 1080, 1084, 1091, 1094, 1095, 1132, 1144, 1145, 1157, 1164, 1165, 1166, 1167, 1184, 1188, 1190, 1194, 1200, 1202, 1203, 1205, 1206, 1207, 1209, 1210, 1211, 1226, 1227, 1231, 1297, 1298, 1312, 1325, 1334], "multi": [9, 37, 120, 121, 271, 309, 457, 659, 814, 1242], "automat": [9, 49, 52, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 134, 138, 150, 154, 156, 246, 255, 282, 309, 431, 445, 553, 554, 607, 688, 689, 690, 814, 882, 891, 902, 927, 931, 1049, 1063, 1169, 1194, 1271, 1272, 1273, 1308, 1325, 1333], "turn": [9, 43, 44, 45, 46, 60, 61, 120, 121, 134, 701, 835, 836, 844, 846, 866, 867, 876, 927, 1284], "struct": [9, 106, 115, 227, 246, 270, 275, 282, 309, 358, 392, 477, 543, 577, 579, 581, 600, 610, 611, 661, 664, 684, 685, 723, 746, 747, 749, 750, 751, 776, 814, 882, 898, 902, 915, 927, 972, 1007, 1162, 1188, 1197, 1244, 1247, 1267, 1268, 1305, 1325], "v": [9, 10, 42, 49, 50, 177, 309, 635, 728, 730, 814, 1214, 1325], "v2": [9, 126, 137], "out": [9, 15, 35, 43, 44, 45, 46, 115, 142, 240, 243, 309, 345, 363, 516, 518, 541, 651, 655, 662, 804, 880, 927, 959, 976, 1135, 1137, 1160, 1234, 1238, 1245], "separ": [10, 11, 25, 28, 33, 34, 43, 117, 119, 120, 121, 125, 134, 229, 231, 264, 273, 275, 309, 324, 343, 346, 514, 520, 555, 658, 741, 746, 747, 750, 751, 814, 898, 927, 957, 960, 1133, 1139, 1241, 1292, 1300, 1325], "set_thousands_separ": 10, "thousand": [10, 28], "group": [10, 28, 37, 42, 46, 47, 121, 165, 192, 193, 194, 195, 196, 197, 211, 227, 229, 231, 240, 243, 276, 278, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 318, 368, 391, 459, 465, 470, 473, 513, 553, 555, 563, 565, 592, 603, 611, 612, 646, 647, 651, 659, 660, 661, 662, 676, 677, 718, 723, 777, 814, 832, 852, 853, 854, 855, 856, 857, 880, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 931, 932, 1006, 1132, 1198, 1234, 1242, 1243, 1244, 1245, 1259, 1260, 1313, 1325], "9876": 10, "54321": 10, "1010101": 10, "123456": [10, 932], "78": 10, "tbl_cell_numeric_align": [10, 11, 28], "right": [10, 11, 16, 17, 19, 28, 37, 70, 120, 121, 143, 144, 145, 146, 193, 194, 196, 197, 212, 213, 240, 277, 309, 392, 453, 455, 456, 482, 531, 532, 533, 534, 600, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 644, 680, 739, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 861, 862, 880, 899, 927, 1007, 1072, 1074, 1075, 1096, 1150, 1151, 1152, 1153, 1188, 1214, 1228, 1263, 1325], "thousands_separ": [10, 11, 28], "decimal_separ": [10, 28], "float_precis": [10, 11, 28, 34, 37, 43, 309, 927], "print": [10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 121, 142, 143, 145, 175, 191, 192, 211, 214, 265, 286, 309, 479, 567, 814, 835, 859, 927, 932, 1104, 1302, 1325, 1334], "876": 10, "543": 10, "010": [10, 698, 1281], "101": [10, 28, 403, 698, 932, 1281, 1334], "000": [10, 11, 28, 37, 309, 1334], "123": [10, 654, 660, 677, 703, 804, 932, 1237, 1243, 1286, 1301, 1325], "456": [10, 11, 403, 932, 1017, 1301, 1325], "780": 10, "precis": [11, 12, 34, 37, 43, 70, 122, 210, 242, 243, 263, 266, 271, 309, 401, 697, 927, 932, 1015, 1280], "int": [11, 13, 14, 15, 18, 26, 27, 34, 35, 37, 42, 43, 46, 49, 52, 56, 63, 70, 111, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 166, 171, 177, 180, 181, 183, 187, 189, 191, 198, 199, 200, 202, 203, 208, 210, 211, 213, 215, 216, 217, 219, 224, 226, 227, 237, 238, 241, 244, 249, 250, 251, 253, 256, 257, 259, 260, 265, 269, 272, 276, 279, 281, 284, 285, 292, 303, 309, 317, 341, 345, 353, 355, 358, 360, 361, 367, 368, 391, 395, 399, 453, 455, 456, 460, 461, 462, 468, 470, 471, 473, 475, 476, 477, 502, 508, 511, 516, 517, 518, 519, 530, 535, 536, 538, 540, 541, 542, 543, 545, 591, 593, 596, 597, 600, 603, 606, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 640, 645, 649, 659, 663, 664, 665, 670, 673, 674, 675, 676, 680, 682, 684, 685, 694, 697, 698, 703, 711, 712, 713, 717, 718, 724, 726, 733, 742, 744, 754, 757, 760, 766, 768, 770, 771, 786, 787, 790, 791, 792, 795, 796, 799, 800, 803, 805, 814, 830, 833, 839, 846, 847, 848, 851, 858, 862, 865, 876, 886, 887, 889, 892, 894, 895, 896, 900, 901, 905, 906, 912, 923, 927, 932, 946, 947, 955, 959, 967, 969, 972, 974, 980, 981, 989, 990, 1006, 1009, 1010, 1013, 1071, 1072, 1074, 1075, 1079, 1080, 1081, 1085, 1086, 1089, 1090, 1091, 1118, 1120, 1121, 1127, 1128, 1130, 1135, 1136, 1137, 1138, 1149, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1164, 1176, 1177, 1179, 1180, 1181, 1183, 1184, 1187, 1188, 1190, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1220, 1221, 1224, 1229, 1232, 1242, 1246, 1247, 1248, 1253, 1256, 1257, 1258, 1259, 1263, 1265, 1267, 1268, 1277, 1280, 1281, 1286, 1293, 1294, 1295, 1296, 1302, 1309, 1314, 1325, 1333, 1334], "control": [11, 12, 37, 52, 61, 62, 125, 148, 150, 255, 266, 309, 607, 814, 836, 844, 891, 927, 1194, 1303, 1325], "number": [11, 12, 13, 14, 15, 18, 26, 34, 35, 37, 42, 43, 46, 53, 54, 68, 69, 70, 84, 92, 102, 108, 110, 111, 112, 114, 117, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 137, 138, 139, 141, 148, 150, 153, 155, 156, 157, 164, 166, 170, 177, 178, 180, 181, 191, 199, 210, 211, 214, 215, 226, 227, 244, 250, 251, 256, 259, 272, 276, 279, 290, 292, 294, 303, 309, 335, 351, 353, 358, 361, 367, 368, 380, 391, 392, 395, 399, 402, 411, 414, 417, 420, 422, 432, 446, 447, 449, 453, 454, 455, 456, 460, 461, 462, 468, 476, 491, 493, 501, 502, 511, 519, 522, 523, 528, 530, 535, 538, 540, 543, 545, 592, 596, 600, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 640, 649, 663, 664, 665, 667, 668, 669, 672, 676, 682, 684, 685, 694, 697, 711, 717, 718, 724, 738, 742, 743, 744, 760, 768, 773, 791, 792, 795, 799, 803, 814, 830, 833, 838, 845, 846, 847, 848, 858, 865, 876, 886, 887, 892, 894, 896, 900, 910, 912, 914, 923, 927, 965, 967, 972, 980, 990, 1006, 1007, 1009, 1013, 1016, 1025, 1028, 1034, 1038, 1040, 1050, 1064, 1065, 1067, 1071, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1090, 1103, 1120, 1121, 1130, 1138, 1141, 1142, 1147, 1149, 1154, 1159, 1162, 1176, 1177, 1188, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1220, 1221, 1224, 1232, 1246, 1247, 1248, 1250, 1251, 1252, 1255, 1259, 1265, 1267, 1268, 1277, 1280, 1294, 1309, 1314, 1325, 1334], "place": [11, 12, 34, 43, 164, 173, 179, 201, 202, 203, 231, 236, 238, 243, 251, 254, 272, 280, 309, 334, 346, 354, 367, 368, 520, 537, 638, 646, 647, 717, 718, 736, 814, 830, 887, 890, 896, 927, 938, 948, 960, 968, 1078, 1139, 1156, 1191, 1221, 1230, 1325], "float": [11, 12, 34, 37, 43, 73, 74, 120, 121, 125, 134, 140, 143, 144, 145, 146, 147, 150, 154, 161, 171, 177, 180, 213, 233, 244, 251, 266, 267, 301, 309, 341, 373, 392, 397, 398, 432, 450, 451, 452, 453, 455, 456, 461, 466, 467, 472, 474, 480, 484, 488, 491, 493, 494, 495, 500, 508, 530, 546, 550, 556, 570, 584, 585, 586, 587, 597, 600, 601, 613, 614, 615, 617, 619, 621, 623, 624, 626, 628, 630, 632, 634, 719, 788, 790, 814, 839, 847, 862, 877, 887, 888, 921, 927, 932, 955, 981, 988, 1007, 1008, 1010, 1011, 1012, 1030, 1031, 1050, 1069, 1071, 1072, 1074, 1075, 1080, 1084, 1091, 1103, 1119, 1127, 1128, 1149, 1165, 1179, 1180, 1187, 1188, 1189, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1212, 1216, 1217, 1228, 1232, 1293, 1305, 1314, 1325, 1334], "point": [11, 12, 37, 38, 43, 44, 45, 46, 60, 61, 70, 72, 73, 74, 132, 139, 140, 150, 154, 180, 193, 196, 214, 255, 266, 271, 276, 277, 309, 373, 391, 392, 397, 431, 432, 461, 466, 467, 477, 491, 493, 530, 555, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 791, 792, 814, 835, 836, 847, 853, 856, 866, 867, 878, 891, 899, 927, 986, 988, 1006, 1007, 1011, 1049, 1050, 1080, 1084, 1091, 1103, 1149, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1303, 1308, 1325], "standard": [11, 37, 256, 266, 271, 309, 414, 455, 626, 627, 644, 649, 666, 795, 810, 814, 892, 927, 1028, 1074, 1228, 1232, 1249, 1325, 1334], "behaviour": [11, 54, 62, 174, 255, 309, 651, 659, 660, 662, 676, 677, 719, 814, 842, 891, 927, 1234, 1242, 1243, 1245, 1259, 1260], "when": [11, 15, 18, 20, 24, 34, 35, 36, 37, 42, 43, 46, 52, 53, 69, 83, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 125, 126, 128, 131, 132, 134, 135, 137, 138, 140, 143, 144, 145, 146, 150, 154, 162, 164, 171, 175, 177, 179, 181, 185, 193, 194, 196, 197, 212, 216, 230, 240, 241, 243, 246, 247, 250, 254, 264, 266, 267, 271, 272, 274, 277, 283, 309, 353, 374, 394, 399, 453, 455, 456, 462, 535, 543, 554, 564, 596, 607, 637, 646, 647, 652, 663, 667, 668, 678, 682, 688, 689, 690, 693, 694, 736, 738, 746, 750, 764, 814, 830, 839, 840, 848, 853, 854, 856, 857, 861, 866, 867, 880, 882, 883, 886, 890, 896, 897, 899, 903, 927, 967, 991, 1008, 1013, 1071, 1072, 1074, 1075, 1078, 1081, 1154, 1169, 1194, 1213, 1216, 1220, 1235, 1246, 1250, 1251, 1261, 1265, 1271, 1272, 1273, 1276, 1277, 1300, 1305, 1325], "larger": [11, 43, 44, 45, 46, 60, 61, 467, 742, 814, 835, 836, 927], "should": [11, 35, 37, 43, 44, 45, 46, 62, 108, 110, 112, 114, 124, 125, 129, 130, 134, 138, 140, 147, 148, 150, 154, 164, 172, 210, 213, 216, 241, 242, 243, 254, 263, 264, 272, 275, 295, 309, 318, 367, 368, 371, 391, 394, 448, 454, 457, 491, 493, 513, 555, 566, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 644, 647, 717, 718, 723, 736, 760, 762, 774, 777, 791, 792, 804, 814, 830, 840, 841, 846, 861, 862, 867, 884, 890, 896, 898, 927, 932, 984, 1006, 1066, 1073, 1132, 1170, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1214, 1228, 1304, 1313, 1325], "ensur": [11, 37, 123, 149, 152, 192, 195, 229, 241, 267, 309, 482, 553, 814, 852, 855, 866, 867, 927, 931, 932, 1305, 1325], "awar": [11, 122, 210, 242, 243, 263, 309, 454, 652, 678, 814, 846, 927, 1073, 1235, 1261, 1279, 1325], "both": [11, 26, 34, 43, 53, 91, 92, 122, 193, 194, 196, 197, 212, 213, 223, 240, 241, 268, 277, 309, 323, 374, 392, 457, 482, 600, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 682, 755, 756, 758, 759, 801, 802, 810, 814, 825, 853, 854, 856, 857, 861, 862, 872, 880, 899, 927, 932, 991, 1096, 1106, 1265, 1306, 1325], "limit": [11, 12, 46, 122, 123, 134, 156, 181, 309, 361, 375, 376, 462, 468, 814, 848, 858, 927, 992, 993, 1081, 1325], "represent": [11, 40, 41, 68, 69, 71, 84, 115, 265, 309, 371, 402, 407, 411, 414, 415, 417, 418, 420, 422, 425, 428, 429, 432, 446, 447, 449, 716, 814, 844, 864, 927, 984, 985, 1016, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1050, 1064, 1065, 1067, 1302, 1307, 1325], "look": [11, 193, 309, 362, 543, 553, 814, 853, 927, 975], "appli": [11, 21, 34, 37, 43, 47, 62, 122, 134, 147, 150, 154, 171, 185, 216, 230, 255, 266, 295, 309, 334, 402, 405, 406, 407, 411, 413, 414, 415, 417, 418, 420, 422, 425, 428, 429, 432, 435, 446, 447, 449, 455, 456, 551, 553, 555, 596, 613, 615, 616, 617, 618, 621, 622, 628, 629, 676, 677, 693, 695, 696, 700, 736, 746, 747, 750, 751, 764, 775, 776, 777, 789, 804, 814, 839, 858, 865, 866, 867, 875, 891, 915, 927, 991, 1016, 1019, 1020, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1050, 1053, 1064, 1065, 1067, 1074, 1075, 1170, 1199, 1201, 1202, 1204, 1208, 1259, 1260, 1276, 1278, 1279, 1283, 1325], "float64": [11, 34, 37, 43, 111, 120, 129, 147, 150, 175, 177, 185, 245, 271, 282, 309, 326, 327, 328, 329, 330, 331, 369, 377, 378, 379, 393, 432, 454, 457, 491, 493, 602, 642, 643, 714, 715, 762, 787, 790, 805, 814, 843, 881, 902, 927, 932, 1050, 1073, 1306, 1312, 1325], "dtype": [11, 37, 53, 57, 63, 69, 83, 91, 92, 108, 110, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 131, 134, 147, 148, 149, 150, 154, 161, 165, 193, 194, 196, 197, 213, 240, 265, 266, 267, 268, 271, 276, 285, 309, 324, 369, 370, 384, 385, 448, 457, 470, 507, 516, 541, 549, 551, 553, 554, 555, 605, 606, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 639, 664, 665, 693, 710, 712, 716, 722, 731, 733, 762, 766, 770, 771, 773, 774, 775, 776, 777, 787, 790, 796, 805, 814, 832, 853, 854, 856, 857, 862, 880, 906, 927, 932, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 981, 982, 983, 985, 990, 1000, 1001, 1008, 1009, 1066, 1070, 1071, 1097, 1099, 1103, 1106, 1113, 1115, 1117, 1122, 1123, 1126, 1135, 1161, 1168, 1169, 1170, 1196, 1215, 1222, 1247, 1248, 1276, 1293, 1302, 1303, 1305, 1306, 1307, 1308, 1312, 1325, 1334], "doe": [11, 34, 36, 43, 54, 62, 102, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 124, 125, 129, 130, 134, 135, 138, 140, 167, 179, 193, 198, 211, 212, 241, 242, 243, 274, 282, 285, 309, 312, 448, 467, 475, 543, 554, 689, 690, 721, 810, 814, 834, 839, 846, 853, 856, 861, 867, 897, 902, 906, 927, 994, 1066, 1078, 1088, 1089, 1169, 1223, 1315, 1325, 1329], "cover": 11, "nativ": [11, 35, 120, 122, 125, 126, 128, 132, 210, 216, 242, 243, 263, 267, 295, 309, 555, 777, 814, 820, 891, 915, 927, 1170, 1305, 1325, 1334], "level": [11, 37, 42, 46, 134, 137, 138, 139, 185, 216, 227, 309, 463, 814, 826, 858, 865, 927], "larg": [11, 12, 15, 54, 122, 125, 131], "maximum": [11, 27, 34, 43, 70, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 140, 148, 149, 150, 152, 154, 191, 193, 217, 218, 309, 339, 505, 556, 584, 594, 603, 663, 664, 665, 668, 682, 694, 778, 779, 814, 853, 868, 927, 953, 1029, 1124, 1171, 1179, 1185, 1190, 1246, 1247, 1248, 1251, 1265, 1277, 1325], "import": [11, 17, 29, 32, 34, 36, 37, 38, 39, 42, 54, 69, 108, 109, 112, 113, 120, 122, 123, 129, 130, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 165, 171, 172, 174, 191, 193, 211, 213, 222, 229, 231, 255, 264, 266, 271, 276, 278, 309, 312, 393, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 463, 566, 614, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 734, 735, 738, 754, 755, 756, 757, 758, 759, 760, 801, 802, 810, 814, 826, 832, 836, 839, 840, 841, 842, 853, 862, 867, 871, 884, 927, 995, 997, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1100, 1105, 1109, 1110, 1115, 1200, 1226, 1297, 1325, 1329, 1334], "pi": [11, 393, 814, 995, 997, 1226, 1297, 1325], "e": [11, 32, 34, 36, 38, 39, 42, 43, 109, 120, 126, 128, 137, 140, 152, 191, 199, 209, 236, 259, 261, 267, 276, 309, 317, 324, 394, 450, 454, 457, 482, 546, 555, 560, 561, 563, 564, 565, 567, 568, 639, 644, 662, 689, 690, 762, 777, 804, 814, 840, 864, 878, 927, 932, 1069, 1070, 1073, 1096, 1215, 1228, 1245, 1325, 1334], "const": 11, "15": [11, 37, 142, 171, 193, 203, 216, 240, 309, 391, 395, 424, 431, 445, 454, 596, 612, 628, 665, 747, 757, 800, 801, 814, 839, 853, 880, 927, 932, 1006, 1009, 1049, 1063, 1073, 1248, 1325], "141592653589793": 11, "718281828459045": [11, 450, 546, 814, 1069, 1165, 1325], "fix": [11, 63, 72, 125, 148, 448, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 760, 814, 1066, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "align": [11, 16, 17, 37, 54, 62, 309], "numer": [11, 17, 34, 37, 43, 124, 135, 165, 172, 213, 222, 231, 267, 268, 276, 309, 317, 374, 467, 482, 548, 571, 573, 597, 606, 639, 661, 703, 708, 719, 814, 826, 832, 841, 862, 871, 927, 932, 991, 1008, 1070, 1096, 1113, 1215, 1222, 1244, 1286, 1305, 1325, 1334], "column": [11, 17, 18, 19, 22, 23, 25, 36, 37, 40, 53, 54, 55, 62, 69, 83, 92, 94, 96, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 164, 165, 169, 170, 172, 173, 174, 175, 178, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 201, 202, 203, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 254, 256, 257, 258, 262, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 287, 294, 309, 319, 320, 322, 334, 343, 352, 354, 357, 368, 374, 380, 381, 392, 402, 403, 405, 406, 407, 411, 413, 414, 415, 417, 418, 420, 422, 425, 428, 429, 432, 434, 435, 437, 446, 447, 449, 454, 457, 459, 463, 465, 477, 481, 482, 497, 501, 507, 514, 516, 537, 541, 542, 543, 554, 555, 561, 563, 565, 566, 575, 578, 580, 582, 583, 592, 598, 600, 604, 606, 608, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 639, 646, 647, 650, 658, 662, 663, 684, 685, 693, 694, 695, 696, 697, 698, 700, 705, 707, 709, 718, 725, 727, 728, 729, 730, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 814, 830, 832, 838, 841, 842, 843, 845, 849, 852, 853, 854, 855, 856, 857, 861, 862, 867, 868, 869, 870, 871, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 885, 890, 892, 893, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 914, 915, 927, 932, 936, 937, 957, 966, 968, 971, 983, 985, 991, 1007, 1016, 1019, 1020, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1050, 1052, 1053, 1055, 1064, 1065, 1067, 1073, 1077, 1088, 1091, 1095, 1126, 1133, 1135, 1156, 1161, 1188, 1195, 1198, 1222, 1233, 1241, 1245, 1267, 1268, 1276, 1278, 1279, 1280, 1281, 1283, 1289, 1292, 1300, 1301, 1313, 1325, 1334], "order": [11, 37, 43, 44, 45, 46, 47, 49, 54, 60, 66, 111, 122, 141, 143, 144, 164, 174, 182, 192, 193, 194, 195, 196, 197, 212, 229, 230, 231, 240, 242, 244, 248, 254, 266, 267, 272, 274, 278, 309, 334, 354, 359, 367, 368, 371, 397, 398, 463, 512, 530, 537, 544, 603, 612, 634, 635, 636, 646, 647, 679, 689, 690, 691, 692, 706, 717, 718, 720, 721, 723, 736, 804, 814, 825, 830, 842, 849, 852, 853, 854, 855, 856, 857, 861, 871, 880, 885, 890, 891, 896, 897, 927, 932, 948, 968, 973, 984, 986, 1011, 1012, 1082, 1114, 1131, 1149, 1156, 1163, 1190, 1196, 1212, 1214, 1218, 1230, 1262, 1290, 1310, 1311, 1313, 1325, 1334], "cleanli": [11, 191, 309], "line": [11, 21, 37, 120, 121, 125, 134, 191, 205, 207, 309, 312, 659, 1242], "up": [11, 37, 83, 123, 210, 213, 242, 243, 263, 309, 324, 373, 555, 663, 694, 814, 861, 862, 867, 927, 932, 988, 1246, 1277, 1325], "xx": [11, 55, 57, 154, 171, 255, 309, 839, 927, 932], "yy": [11, 55, 57, 154, 171, 255, 309, 839, 927, 932], "11111111": 11, "44444444444": 11, "100000": [11, 28], "987654321": 11, "23456789": 11, "11": [11, 17, 42, 46, 142, 150, 163, 171, 213, 240, 309, 319, 423, 424, 427, 431, 445, 469, 480, 517, 569, 593, 603, 612, 614, 628, 645, 726, 797, 802, 814, 829, 835, 836, 839, 858, 865, 876, 880, 894, 927, 932, 1045, 1049, 1063, 1170, 1200, 1325], "111": 11, "100": [11, 18, 28, 37, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 250, 309, 607, 637, 652, 664, 665, 678, 697, 759, 814, 886, 927, 932, 1166, 1194, 1201, 1202, 1204, 1220, 1235, 1247, 1248, 1261, 1280, 1325, 1334], "988": 11, "44": [11, 223, 309, 396, 814, 872, 927], "444": 11, "23": [11, 150, 171, 193, 240, 271, 309, 403, 407, 411, 428, 431, 447, 612, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 757, 760, 800, 801, 802, 814, 839, 853, 880, 891, 927, 932, 1017, 1025, 1308, 1325, 1334], "789": [11, 932], "fmt": [12, 213, 309, 479, 765, 814, 859, 927], "floatfmt": 12, "mix": [12, 213, 267, 309, 891, 927, 932, 1008, 1279, 1325], "how": [12, 36, 37, 54, 62, 96, 123, 132, 139, 174, 212, 213, 231, 276, 277, 309, 342, 371, 395, 430, 431, 445, 480, 509, 510, 511, 592, 606, 625, 693, 696, 738, 757, 804, 814, 842, 861, 899, 927, 931, 956, 984, 1009, 1048, 1049, 1063, 1128, 1129, 1130, 1206, 1276, 1279, 1325], "full": [12, 54, 62, 69, 111, 114, 120, 121, 122, 124, 129, 134, 135, 136, 138, 140, 193, 194, 196, 197, 212, 240, 277, 309, 663, 664, 665, 693, 694, 695, 696, 700, 853, 854, 856, 857, 861, 866, 867, 880, 899, 927, 932, 1246, 1247, 1248, 1276, 1277, 1278, 1279, 1283, 1325, 1334], "scientif": 12, "notat": [12, 37, 309], "small": [12, 123, 214, 309, 431, 846, 927, 1334], "2304980958725870923": 12, "1e6": 12, "1e": [12, 143, 144, 145, 146], "230498": 12, "0000e": 12, "230498095872587": 12, "1000000": [12, 1061], "00000001": [12, 726, 814], "plai": [13, 741], "sam": 13, "As": [13, 53, 91, 92, 108, 110, 111, 112, 114, 125, 129, 130, 138, 266, 271, 309, 543, 804, 927], "time": [13, 36, 47, 52, 59, 60, 61, 69, 71, 124, 134, 135, 150, 151, 154, 171, 179, 193, 194, 196, 197, 213, 240, 278, 309, 341, 367, 368, 400, 401, 403, 404, 405, 409, 410, 423, 424, 427, 430, 431, 434, 436, 437, 445, 448, 454, 507, 508, 543, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 640, 693, 696, 700, 716, 717, 718, 740, 741, 755, 756, 757, 758, 759, 760, 766, 801, 802, 814, 835, 836, 839, 853, 854, 856, 857, 862, 876, 880, 927, 932, 955, 980, 1014, 1015, 1017, 1018, 1023, 1024, 1045, 1048, 1049, 1052, 1054, 1055, 1063, 1066, 1073, 1078, 1126, 1127, 1128, 1198, 1224, 1276, 1279, 1283, 1307, 1309, 1325, 1334], "goe": 13, "By": [13, 15, 31, 54, 120, 121, 134, 193, 212, 213, 240, 242, 250, 256, 277, 278, 279, 309, 353, 427, 431, 445, 535, 538, 545, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 637, 649, 724, 742, 744, 755, 756, 758, 759, 760, 774, 795, 801, 802, 803, 814, 835, 853, 861, 862, 880, 886, 892, 900, 927, 967, 1045, 1049, 1063, 1154, 1220, 1232, 1314, 1325], "begin": [13, 37, 309, 453, 455, 456, 659, 694, 814, 1072, 1074, 1075, 1242, 1277, 1325], "beauti": 13, "friendship": 13, "len_byt": [13, 668, 669, 1251, 1252], "len": [13, 37, 150, 154, 211, 231, 285, 290, 295, 309, 380, 523, 555, 563, 565, 743, 770, 814, 906, 910, 915, 927, 1142, 1325], "u32": [13, 47, 122, 163, 165, 170, 228, 284, 285, 290, 294, 300, 302, 309, 318, 325, 332, 333, 334, 335, 336, 339, 340, 342, 351, 380, 381, 477, 501, 505, 506, 510, 522, 528, 574, 590, 603, 611, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 635, 654, 662, 667, 668, 716, 721, 723, 727, 732, 736, 737, 743, 745, 770, 773, 785, 814, 829, 832, 838, 874, 905, 906, 910, 914, 920, 922, 927, 932, 948, 949, 950, 953, 954, 956, 965, 981, 985, 1091, 1124, 1125, 1129, 1141, 1147, 1190, 1198, 1214, 1237, 1245, 1250, 1251, 1307, 1311, 1313, 1325], "go": [13, 120, 121, 134, 657, 1240], "37": [13, 932], "bea": 13, "48": [13, 150, 240, 309, 612, 707, 814, 880, 927, 932], "fmt_str_length": [13, 756, 759], "50": [13, 28, 37, 171, 179, 191, 309, 374, 431, 445, 756, 814, 839, 927, 932, 991, 1008, 1063, 1325], "element": [14, 15, 26, 149, 152, 164, 170, 208, 231, 241, 254, 256, 272, 279, 309, 324, 326, 327, 328, 329, 330, 331, 342, 343, 367, 368, 372, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 397, 398, 458, 459, 463, 475, 487, 501, 509, 510, 512, 513, 514, 517, 522, 523, 531, 532, 533, 534, 538, 545, 547, 548, 555, 592, 593, 603, 606, 614, 615, 617, 619, 621, 623, 625, 626, 628, 630, 635, 641, 642, 643, 647, 648, 649, 684, 685, 697, 714, 715, 717, 718, 724, 736, 742, 744, 791, 792, 795, 803, 814, 830, 838, 890, 892, 896, 900, 927, 939, 940, 941, 942, 943, 944, 945, 956, 957, 980, 987, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1076, 1077, 1082, 1090, 1104, 1118, 1120, 1121, 1128, 1129, 1131, 1132, 1133, 1136, 1141, 1142, 1150, 1151, 1152, 1153, 1166, 1167, 1170, 1184, 1190, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1214, 1225, 1226, 1227, 1231, 1232, 1267, 1268, 1280, 1294, 1297, 1298, 1302, 1309, 1310, 1314, 1325], "empti": [14, 32, 34, 43, 98, 111, 120, 121, 125, 131, 134, 166, 167, 193, 222, 309, 774, 793, 833, 834, 853, 871, 927, 932, 990, 994, 1099, 1325], "alwai": [14, 34, 36, 43, 47, 70, 72, 120, 192, 195, 212, 216, 255, 295, 309, 563, 693, 755, 804, 861, 867, 891, 927, 1170, 1276, 1325, 1333, 1334], "neg": [14, 68, 69, 70, 71, 120, 121, 126, 128, 132, 141, 193, 194, 196, 197, 199, 215, 240, 250, 251, 253, 259, 285, 309, 353, 535, 536, 596, 612, 637, 638, 645, 663, 682, 694, 814, 853, 854, 856, 857, 880, 886, 887, 889, 905, 906, 927, 932, 967, 1090, 1121, 1154, 1155, 1220, 1221, 1229, 1246, 1265, 1277, 1294, 1325], "result": [14, 34, 40, 41, 42, 43, 44, 45, 46, 54, 62, 112, 113, 114, 122, 123, 124, 125, 134, 137, 139, 140, 154, 179, 193, 196, 198, 212, 213, 227, 231, 240, 243, 250, 251, 266, 267, 268, 278, 285, 287, 294, 309, 399, 431, 434, 437, 445, 453, 454, 455, 456, 460, 467, 475, 482, 498, 542, 543, 553, 555, 566, 592, 600, 607, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 636, 637, 638, 683, 684, 696, 719, 723, 745, 746, 747, 750, 751, 755, 756, 757, 758, 759, 760, 774, 776, 787, 790, 791, 792, 805, 814, 831, 835, 839, 853, 854, 856, 857, 861, 866, 867, 876, 880, 884, 886, 887, 906, 907, 914, 927, 938, 1007, 1049, 1052, 1055, 1063, 1072, 1074, 1075, 1078, 1079, 1089, 1096, 1119, 1161, 1170, 1188, 1194, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1218, 1220, 1221, 1266, 1267, 1279, 1304, 1305, 1306, 1313, 1325, 1333, 1334], "being": [14, 38, 43, 44, 45, 46, 60, 61, 70, 72, 120, 121, 122, 132, 134, 139, 140, 165, 178, 255, 264, 266, 271, 276, 277, 309, 324, 391, 392, 431, 477, 555, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 738, 761, 791, 792, 814, 832, 835, 836, 845, 846, 891, 899, 927, 986, 1006, 1007, 1049, 1091, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1300, 1303, 1308, 1325, 1334], "A": [14, 34, 37, 43, 47, 50, 60, 61, 66, 72, 115, 120, 121, 122, 123, 134, 136, 141, 156, 185, 193, 212, 213, 218, 220, 225, 231, 258, 262, 276, 277, 278, 282, 283, 309, 316, 397, 398, 403, 434, 437, 451, 452, 460, 472, 474, 484, 488, 491, 493, 500, 543, 550, 553, 564, 577, 586, 587, 609, 614, 615, 617, 619, 621, 623, 626, 628, 630, 651, 652, 653, 654, 659, 660, 661, 662, 663, 666, 668, 676, 677, 678, 682, 694, 703, 740, 760, 761, 765, 814, 853, 861, 862, 878, 899, 902, 903, 927, 932, 1011, 1012, 1017, 1052, 1055, 1079, 1200, 1201, 1202, 1204, 1207, 1208, 1209, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1246, 1249, 1251, 1259, 1260, 1261, 1265, 1277, 1286, 1325, 1333], "content": [14, 640, 814, 1224, 1325], "final": [14, 37, 54, 139, 213, 309, 453, 455, 456, 814, 839, 846, 927, 931, 1072, 1074, 1075, 1325], "item": [14, 62, 121, 191, 241, 244, 309, 341, 345, 346, 395, 459, 508, 511, 518, 520, 530, 634, 685, 814, 955, 959, 960, 1009, 1077, 1127, 1130, 1137, 1139, 1149, 1212, 1268, 1325], "num": [14, 37, 270, 309, 482, 814, 1096, 1325], "fmt_table_cell_list_len": 14, "10": [14, 17, 18, 28, 32, 34, 36, 37, 38, 39, 42, 46, 47, 54, 62, 115, 123, 134, 142, 167, 171, 179, 190, 191, 193, 199, 201, 203, 204, 209, 213, 226, 230, 231, 232, 236, 238, 240, 246, 255, 259, 282, 287, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 319, 323, 332, 333, 334, 336, 374, 382, 385, 395, 399, 400, 402, 403, 405, 406, 409, 411, 415, 417, 418, 420, 423, 424, 425, 430, 431, 432, 435, 445, 448, 454, 475, 476, 480, 487, 497, 502, 511, 517, 519, 526, 536, 538, 540, 545, 547, 563, 565, 575, 590, 593, 596, 607, 612, 645, 698, 707, 711, 726, 738, 739, 746, 755, 757, 758, 761, 764, 766, 768, 774, 776, 799, 802, 814, 835, 836, 839, 853, 858, 860, 865, 875, 876, 880, 882, 893, 894, 902, 907, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 932, 991, 1009, 1013, 1014, 1016, 1017, 1023, 1034, 1048, 1063, 1066, 1069, 1073, 1090, 1104, 1121, 1130, 1138, 1145, 1155, 1157, 1159, 1164, 1166, 1170, 1184, 1194, 1213, 1216, 1281, 1294, 1303, 1305, 1308, 1325, 1334], "size": [15, 42, 46, 120, 121, 122, 147, 148, 149, 150, 154, 156, 177, 276, 309, 608, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 733, 770, 771, 791, 792, 814, 835, 927, 1071, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1325, 1334], "overwrit": [15, 35, 36, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 138, 161, 277, 309, 319, 707, 814, 846, 927], "chunk": [15, 46, 117, 120, 121, 132, 134, 137, 138, 139, 150, 154, 179, 211, 226, 267, 309, 323, 604, 814, 927, 938, 989, 1078, 1087, 1176, 1191, 1299, 1305, 1325], "stream": [15, 38, 39, 43, 44, 45, 46, 60, 61, 128, 164, 192, 195, 212, 272, 274, 309, 553, 814, 830, 835, 836, 844, 846, 852, 855, 861, 866, 867, 871, 876, 888, 890, 896, 897, 927], "engin": [15, 35, 122, 123, 125, 156, 192, 195, 212, 216, 267, 274, 295, 309, 553, 814, 852, 855, 861, 866, 867, 871, 897, 915, 927, 1170, 1305, 1325], "determin": [15, 34, 37, 43, 54, 62, 89, 120, 121, 122, 125, 131, 132, 134, 139, 141, 162, 185, 193, 196, 210, 211, 216, 231, 240, 273, 278, 309, 371, 413, 430, 431, 445, 477, 543, 554, 563, 600, 606, 607, 615, 617, 619, 621, 623, 626, 628, 630, 644, 652, 663, 693, 694, 696, 697, 757, 787, 790, 805, 814, 853, 856, 880, 927, 984, 1027, 1048, 1049, 1063, 1091, 1162, 1169, 1188, 1194, 1228, 1235, 1276, 1279, 1280, 1325], "thread": [15, 34, 43, 61, 117, 120, 121, 123, 156, 157, 254, 309, 324, 367, 368, 513, 555, 647, 717, 718, 736, 814, 830, 836, 890, 896, 927, 968, 1132, 1156, 1230, 1325], "pool": [15, 61, 156, 157, 836, 927], "For": [15, 36, 37, 122, 123, 124, 125, 135, 136, 174, 179, 212, 213, 240, 266, 295, 309, 312, 423, 424, 453, 455, 456, 467, 543, 555, 564, 605, 644, 651, 659, 660, 661, 662, 663, 694, 746, 750, 760, 764, 765, 810, 814, 842, 862, 880, 915, 927, 931, 1072, 1074, 1075, 1078, 1106, 1170, 1192, 1228, 1234, 1242, 1243, 1244, 1245, 1246, 1277, 1303, 1325, 1329], "some": [15, 31, 37, 53, 92, 111, 120, 121, 122, 125, 134, 161, 174, 243, 267, 309, 394, 810, 814, 840, 842, 927, 1104, 1325, 1334], "dataset": [15, 42, 72, 120, 121, 125, 131, 134, 140, 212, 271, 309, 498, 814, 826, 861, 866, 867, 927, 1119, 1325], "esp": 15, "have": [15, 31, 37, 53, 54, 69, 92, 109, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 179, 210, 212, 213, 234, 240, 242, 243, 263, 271, 285, 309, 391, 394, 453, 455, 456, 555, 564, 603, 607, 612, 661, 814, 840, 861, 871, 880, 905, 906, 927, 931, 932, 1006, 1008, 1072, 1074, 1075, 1078, 1088, 1190, 1194, 1279, 1325, 1334], "too": [15, 846, 927], "optimist": 15, "lead": [15, 42, 115, 140, 193, 194, 196, 197, 220, 240, 250, 258, 309, 353, 454, 470, 473, 535, 553, 555, 612, 636, 637, 671, 687, 688, 690, 712, 742, 814, 853, 854, 856, 857, 866, 867, 880, 886, 909, 915, 927, 967, 1073, 1154, 1170, 1218, 1220, 1254, 1270, 1271, 1273, 1325], "memori": [15, 46, 60, 61, 62, 108, 109, 112, 113, 114, 120, 121, 122, 125, 126, 132, 134, 137, 138, 139, 161, 179, 216, 242, 243, 252, 267, 295, 309, 592, 604, 639, 814, 835, 836, 927, 1078, 1170, 1191, 1222, 1223, 1305, 1325], "error": [15, 36, 61, 100, 103, 110, 111, 114, 120, 121, 134, 165, 231, 241, 267, 309, 319, 345, 346, 363, 369, 399, 497, 516, 518, 520, 541, 575, 651, 655, 659, 661, 662, 664, 666, 693, 695, 696, 700, 814, 832, 836, 909, 915, 927, 959, 960, 976, 981, 1013, 1135, 1137, 1139, 1160, 1234, 1238, 1242, 1244, 1245, 1247, 1249, 1276, 1278, 1279, 1283, 1305, 1325], "row": [15, 21, 26, 34, 35, 37, 40, 42, 43, 46, 54, 55, 57, 62, 99, 102, 107, 111, 112, 113, 114, 115, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 143, 144, 150, 162, 164, 166, 174, 179, 182, 185, 187, 191, 192, 193, 195, 198, 199, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 222, 227, 243, 244, 253, 259, 260, 263, 265, 266, 271, 272, 274, 276, 277, 284, 285, 290, 292, 294, 295, 303, 309, 334, 335, 343, 358, 368, 459, 467, 471, 476, 502, 514, 543, 592, 593, 608, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 645, 647, 658, 664, 665, 711, 713, 718, 733, 736, 741, 743, 745, 750, 751, 764, 768, 770, 771, 773, 789, 791, 792, 799, 804, 814, 830, 833, 835, 842, 846, 849, 850, 851, 853, 858, 861, 862, 863, 865, 867, 871, 889, 894, 895, 896, 897, 899, 905, 906, 910, 912, 914, 915, 923, 927, 948, 957, 1077, 1078, 1086, 1090, 1121, 1133, 1184, 1195, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1229, 1241, 1247, 1248, 1294, 1296, 1325, 1334], "per": [15, 34, 37, 43, 125, 148, 150, 164, 191, 227, 228, 247, 254, 272, 283, 298, 300, 301, 309, 324, 345, 368, 513, 516, 518, 541, 553, 555, 575, 576, 578, 580, 582, 583, 647, 718, 723, 736, 814, 830, 883, 890, 896, 903, 918, 920, 921, 927, 931, 959, 1132, 1135, 1137, 1160, 1313, 1325], "everi": [15, 34, 43, 120, 121, 134, 187, 193, 196, 260, 263, 278, 309, 337, 338, 339, 340, 343, 345, 351, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 431, 445, 459, 471, 505, 506, 511, 514, 517, 518, 519, 528, 531, 536, 540, 611, 658, 713, 746, 747, 750, 751, 814, 846, 851, 853, 856, 895, 927, 951, 952, 953, 954, 957, 959, 965, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1049, 1063, 1077, 1086, 1088, 1124, 1125, 1130, 1133, 1136, 1137, 1138, 1147, 1150, 1155, 1159, 1198, 1241, 1296, 1325], "process": [15, 34, 43, 44, 45, 46, 60, 61, 120, 121, 122, 134, 156, 242, 309, 835, 836, 927], "liter": [16, 17, 21, 36, 122, 153, 154, 155, 246, 247, 250, 277, 282, 283, 309, 319, 362, 374, 403, 451, 452, 460, 467, 472, 474, 482, 500, 550, 554, 571, 573, 586, 587, 597, 607, 651, 654, 662, 676, 677, 707, 708, 719, 728, 730, 733, 739, 740, 741, 749, 753, 754, 757, 770, 774, 779, 781, 784, 793, 796, 798, 800, 814, 848, 882, 883, 886, 899, 902, 903, 927, 932, 975, 991, 1017, 1079, 1096, 1194, 1213, 1216, 1220, 1234, 1237, 1245, 1259, 1260, 1325], "left": [16, 17, 37, 49, 54, 143, 144, 145, 146, 193, 194, 196, 197, 212, 213, 240, 277, 309, 392, 453, 455, 456, 480, 482, 600, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 670, 716, 739, 746, 747, 750, 751, 755, 756, 758, 759, 764, 789, 801, 802, 804, 814, 853, 854, 856, 857, 861, 862, 880, 899, 927, 1007, 1072, 1074, 1075, 1096, 1188, 1214, 1253, 1307, 1325], "center": [16, 17, 37, 309, 453, 455, 456, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 814, 1072, 1074, 1075, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "cell": [16, 17, 37, 309], "valueerror": [16, 21], "recognis": [16, 17, 21, 932], "column_abc": 16, "column_xyz": 16, "keyerror": 17, "datetim": [17, 34, 37, 43, 54, 115, 124, 125, 135, 150, 151, 152, 154, 165, 171, 191, 193, 194, 196, 197, 211, 213, 240, 255, 278, 309, 312, 341, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 508, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 693, 696, 716, 738, 754, 755, 756, 758, 759, 760, 766, 774, 801, 802, 814, 832, 839, 853, 854, 856, 857, 862, 880, 927, 932, 955, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1115, 1127, 1128, 1179, 1180, 1217, 1276, 1279, 1305, 1307, 1325], "date": [17, 37, 54, 69, 120, 121, 123, 125, 131, 134, 140, 165, 171, 191, 193, 194, 196, 197, 211, 213, 240, 255, 309, 312, 341, 399, 401, 402, 403, 404, 407, 410, 413, 414, 417, 422, 423, 424, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 508, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 693, 695, 716, 738, 755, 756, 758, 759, 766, 774, 800, 814, 832, 839, 853, 854, 856, 857, 862, 880, 927, 932, 955, 1013, 1015, 1016, 1017, 1018, 1021, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1073, 1115, 1127, 1128, 1179, 1180, 1217, 1276, 1278, 1307, 1325], "333": [17, 633, 814, 1211, 1325], "mno": [17, 21], "2023": [17, 37, 115, 142, 211, 309, 403, 760, 774, 932, 1017], "29": [17, 142, 400, 423, 1014, 1041], "2001": [17, 401, 402, 407, 410, 413, 417, 422, 427, 428, 429, 431, 436, 445, 446, 447, 448, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 693, 814, 932, 1015, 1016, 1021, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1043, 1045, 1046, 1047, 1049, 1054, 1063, 1064, 1065, 1066, 1067, 1276], "null": [17, 34, 36, 43, 49, 54, 62, 69, 110, 111, 114, 120, 121, 130, 134, 138, 140, 147, 150, 154, 161, 164, 166, 170, 171, 174, 176, 181, 185, 186, 204, 212, 219, 220, 221, 228, 231, 233, 250, 251, 254, 256, 257, 258, 262, 267, 268, 272, 275, 277, 279, 282, 290, 309, 320, 322, 323, 324, 334, 337, 338, 345, 346, 353, 354, 361, 363, 367, 368, 374, 380, 381, 382, 385, 395, 397, 398, 427, 430, 438, 439, 440, 441, 442, 443, 444, 452, 453, 454, 455, 456, 457, 460, 461, 462, 468, 480, 481, 491, 493, 494, 495, 501, 503, 504, 511, 512, 515, 516, 518, 520, 521, 522, 531, 532, 533, 534, 535, 537, 541, 543, 553, 555, 574, 587, 588, 589, 590, 593, 604, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 637, 638, 639, 641, 646, 647, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 673, 674, 675, 682, 684, 685, 686, 693, 694, 696, 698, 703, 704, 705, 706, 716, 717, 718, 727, 728, 729, 730, 736, 739, 740, 741, 743, 745, 749, 757, 762, 773, 774, 779, 781, 784, 791, 792, 796, 798, 804, 814, 830, 833, 838, 839, 842, 848, 860, 861, 874, 884, 886, 887, 890, 896, 898, 899, 902, 904, 910, 927, 932, 936, 937, 939, 948, 951, 952, 959, 960, 967, 968, 976, 990, 991, 1009, 1011, 1012, 1048, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1070, 1072, 1073, 1074, 1075, 1079, 1081, 1088, 1094, 1095, 1111, 1112, 1114, 1120, 1122, 1123, 1126, 1130, 1131, 1134, 1135, 1137, 1139, 1140, 1141, 1151, 1153, 1154, 1156, 1160, 1162, 1170, 1183, 1184, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1215, 1220, 1221, 1225, 1230, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1256, 1257, 1258, 1265, 1267, 1268, 1269, 1276, 1277, 1279, 1281, 1286, 1289, 1302, 1305, 1306, 1307, 1315, 1325, 1333, 1334], "07": [17, 120, 150, 171, 309, 399, 402, 403, 417, 430, 431, 445, 693, 754, 755, 757, 758, 766, 839, 927, 932, 1013, 1017, 1048, 1276], "05": [17, 140, 143, 144, 145, 146, 150, 165, 171, 278, 309, 399, 402, 403, 404, 405, 406, 411, 415, 417, 418, 420, 423, 424, 425, 430, 432, 434, 435, 437, 438, 738, 754, 755, 757, 758, 832, 839, 862, 927, 932, 1017, 1018, 1019, 1020, 1048, 1049, 1052, 1053, 1055, 1056, 1063], "visibl": [18, 177, 309, 1071, 1325], "eg": [18, 26, 37, 62, 123, 159, 266, 309, 431, 693, 696, 719, 814, 932, 1088, 1276, 1279, 1325], "low": [18, 122, 600, 814, 1188, 1325], "rang": [18, 37, 122, 123, 171, 177, 193, 211, 309, 325, 393, 399, 407, 422, 428, 429, 431, 445, 446, 480, 733, 738, 740, 754, 755, 756, 757, 758, 759, 770, 771, 800, 801, 802, 814, 839, 853, 927, 932, 1008, 1013, 1021, 1040, 1046, 1047, 1049, 1063, 1064, 1071, 1184, 1325], "98": [18, 203, 309, 367, 470, 473, 646, 697, 717, 814, 1280], "99": [18, 37, 180, 181, 203, 206, 277, 309, 318, 367, 460, 462, 470, 473, 646, 717, 804, 814, 847, 848, 899, 927, 1069, 1079, 1325], "tbl_col": 18, "95": [18, 318, 814, 932], "96": [18, 171, 309, 318, 814, 839, 927, 1119, 1325], "97": [18, 203, 309, 318, 814, 1119, 1325], "move": [19, 243, 309, 399, 453, 454, 455, 456, 615, 617, 621, 628, 814, 1013, 1072, 1073, 1074, 1075, 1201, 1202, 1204, 1208, 1325], "inlin": [19, 243, 309, 651, 659, 660, 662, 676, 677, 1234, 1242, 1243, 1245, 1259, 1260], "parenthes": 19, "inform": [20, 24, 35, 59, 124, 132, 135, 136, 139, 143, 145, 169, 171, 309, 312, 498, 644, 651, 659, 660, 662, 676, 677, 814, 839, 876, 927, 931, 985, 1119, 1228, 1234, 1242, 1243, 1245, 1259, 1260, 1325, 1329], "below": [20, 36, 124, 125, 135, 136, 174, 231, 309, 462, 663, 694, 755, 756, 758, 759, 801, 802, 804, 810, 814, 842, 927, 1246, 1277, 1333], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 54, 115], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 659, 666, 1242, 1249], "rounded_corn": 21, "border": 21, "includ": [21, 31, 34, 36, 37, 43, 59, 113, 122, 124, 135, 136, 150, 151, 164, 171, 177, 229, 243, 271, 272, 273, 276, 277, 309, 368, 392, 432, 467, 477, 482, 600, 614, 615, 617, 619, 621, 623, 625, 626, 628, 630, 683, 684, 688, 689, 718, 738, 746, 750, 791, 792, 814, 830, 839, 896, 899, 927, 932, 1007, 1008, 1050, 1071, 1091, 1096, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1266, 1267, 1271, 1315, 1325], "divid": [21, 392, 431, 445, 453, 455, 456, 467, 498, 600, 814, 1007, 1049, 1063, 1072, 1074, 1075, 1119, 1188, 1325], "same": [21, 36, 37, 51, 53, 54, 60, 61, 62, 91, 92, 126, 134, 143, 144, 145, 146, 148, 159, 182, 192, 216, 231, 242, 243, 254, 274, 282, 283, 287, 295, 309, 316, 323, 357, 397, 398, 463, 467, 469, 470, 473, 542, 559, 562, 592, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 647, 667, 706, 814, 835, 836, 849, 852, 866, 867, 890, 897, 902, 903, 907, 927, 934, 939, 971, 1007, 1011, 1012, 1017, 1161, 1170, 1188, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1250, 1304, 1316, 1325], "dens": [21, 191, 309, 603, 814, 1190, 1325], "space": [21, 193, 309, 853, 927, 932], "horizont": [21, 62, 96, 185, 201, 217, 218, 219, 220, 224, 225, 257, 258, 276, 309, 728, 730, 740, 741, 746, 747, 749, 750, 751, 753, 761, 764, 779, 781, 784, 789, 798], "markdown": 21, "compat": [21, 37, 42, 46, 309, 651, 653, 654, 659, 660, 661, 662, 676, 677, 927, 932, 1234, 1236, 1237, 1242, 1243, 1244, 1245, 1259, 1260], "utf8": [21, 120, 121, 134, 663, 682, 694, 1246, 1265, 1277], "No": [21, 701, 1284], "round": [21, 37, 56, 115, 122, 309, 373, 379, 466, 633, 714, 814, 988, 1084, 1211, 1325], "corner": [21, 37, 115, 309], "op": [21, 125, 154, 309, 606, 814, 927, 1279, 1325], "The": [21, 35, 36, 37, 42, 46, 47, 51, 53, 54, 59, 60, 63, 68, 69, 71, 72, 79, 83, 84, 92, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 138, 139, 140, 143, 144, 145, 146, 150, 151, 152, 154, 156, 171, 173, 174, 175, 178, 179, 182, 191, 192, 193, 196, 198, 204, 210, 213, 216, 223, 229, 240, 241, 242, 243, 246, 247, 255, 266, 267, 275, 278, 282, 283, 285, 286, 287, 295, 309, 319, 361, 362, 363, 364, 392, 397, 398, 399, 407, 422, 427, 428, 431, 434, 445, 446, 457, 460, 463, 467, 468, 475, 512, 516, 541, 553, 554, 555, 566, 592, 600, 603, 606, 607, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 641, 644, 650, 655, 656, 659, 663, 664, 665, 671, 673, 674, 676, 677, 681, 687, 688, 689, 690, 691, 692, 693, 694, 704, 707, 738, 762, 766, 774, 777, 791, 792, 793, 796, 804, 806, 807, 809, 810, 814, 815, 816, 819, 821, 822, 823, 839, 842, 845, 849, 852, 853, 856, 858, 860, 862, 865, 867, 872, 876, 880, 882, 883, 884, 891, 898, 902, 903, 906, 907, 915, 927, 931, 935, 938, 975, 976, 977, 990, 1007, 1008, 1011, 1012, 1013, 1021, 1040, 1045, 1046, 1049, 1052, 1063, 1064, 1078, 1079, 1082, 1089, 1131, 1135, 1169, 1170, 1188, 1190, 1194, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1225, 1228, 1233, 1238, 1239, 1246, 1247, 1248, 1254, 1256, 1257, 1259, 1260, 1264, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1304, 1305, 1317, 1319, 1321, 1325, 1326, 1330, 1331, 1332, 1334], "one": [21, 34, 35, 37, 43, 52, 54, 99, 108, 110, 111, 112, 113, 114, 120, 121, 125, 129, 130, 131, 134, 153, 155, 159, 165, 181, 182, 191, 192, 193, 194, 196, 197, 210, 222, 231, 240, 241, 242, 248, 250, 267, 270, 288, 309, 318, 353, 392, 462, 463, 467, 470, 473, 535, 543, 548, 575, 576, 578, 580, 582, 583, 611, 612, 637, 646, 659, 660, 661, 678, 704, 777, 794, 804, 810, 814, 832, 848, 849, 852, 853, 854, 856, 857, 871, 880, 885, 886, 904, 908, 927, 938, 967, 972, 1007, 1081, 1115, 1154, 1162, 1167, 1188, 1198, 1220, 1242, 1243, 1244, 1261, 1287, 1305, 1325, 1329], "more": [21, 37, 40, 42, 46, 52, 54, 62, 91, 92, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 143, 145, 150, 159, 169, 171, 182, 209, 210, 214, 216, 222, 227, 241, 242, 244, 255, 266, 267, 271, 274, 295, 309, 312, 321, 324, 359, 463, 467, 498, 530, 544, 548, 553, 555, 591, 634, 644, 660, 667, 693, 695, 696, 720, 732, 743, 763, 769, 772, 780, 782, 785, 786, 794, 804, 814, 839, 871, 891, 897, 927, 931, 932, 939, 973, 985, 1008, 1115, 1119, 1149, 1163, 1170, 1212, 1228, 1243, 1250, 1276, 1278, 1279, 1303, 1305, 1310, 1325, 1329, 1334], "semigraph": 21, "box": [21, 216, 309], "draw": [21, 26, 150, 154, 1334], "found": [21, 34, 37, 43, 49, 94, 104, 106, 111, 115, 175, 255, 309, 635, 662, 666, 691, 692, 693, 696, 814, 891, 927, 1214, 1245, 1249, 1274, 1275, 1276, 1279, 1325, 1333], "unicod": [21, 663, 668, 682, 694, 932, 1246, 1251, 1265, 1277], "block": [21, 61, 192, 195, 274, 309, 804, 836, 852, 855, 878, 897, 905, 906, 915, 927, 1213, 1216, 1325], "http": [21, 37, 38, 39, 109, 122, 123, 126, 128, 161, 169, 309, 659, 661, 888, 927, 1242, 1244], "en": [21, 37, 309], "wikipedia": 21, "org": [21, 38, 39, 109, 122, 123, 126, 128, 161, 169, 309, 888, 927], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 37, 309], "etc": [22, 36, 37, 120, 124, 125, 126, 128, 135, 136, 137, 309, 814, 931, 932, 1213, 1216, 1325], "between": [25, 62, 147, 148, 150, 154, 169, 233, 242, 301, 309, 346, 369, 395, 396, 482, 511, 520, 531, 532, 533, 534, 593, 600, 601, 623, 624, 650, 734, 735, 738, 742, 744, 788, 791, 792, 814, 877, 921, 927, 960, 981, 985, 1009, 1010, 1096, 1130, 1139, 1150, 1151, 1152, 1153, 1184, 1188, 1189, 1205, 1233, 1325], "set_tbl_column_data_type_inlin": 25, "max": [26, 37, 42, 46, 47, 171, 181, 192, 218, 231, 240, 309, 375, 382, 387, 462, 543, 553, 592, 603, 607, 612, 615, 616, 636, 685, 779, 794, 814, 839, 848, 852, 880, 927, 992, 998, 1002, 1008, 1081, 1162, 1190, 1201, 1218, 1268, 1325], "tbl_row": [26, 171, 309, 839, 927], "width": [27, 37, 63, 120, 121, 134, 309, 312, 542, 927, 1161], "id": [27, 37, 62, 120, 136, 266, 273, 285, 295, 309, 611, 676, 677, 721, 814, 906, 915, 927, 1198, 1311, 1325, 1334], "seq1": 27, "seq2": 27, "seq": 27, "atgataaaggag": 27, "gcaacgcatata": 27, "12": [27, 37, 54, 115, 120, 142, 150, 171, 193, 209, 213, 240, 251, 255, 278, 309, 319, 375, 376, 384, 400, 402, 403, 407, 417, 422, 423, 424, 427, 428, 429, 431, 445, 446, 447, 454, 480, 497, 517, 552, 593, 598, 602, 612, 628, 638, 639, 654, 670, 680, 697, 709, 747, 754, 755, 756, 757, 758, 759, 776, 800, 801, 802, 814, 839, 853, 858, 862, 865, 880, 887, 888, 894, 927, 932, 992, 993, 1014, 1016, 1017, 1034, 1040, 1049, 1063, 1073, 1170, 1210, 1221, 1237, 1253, 1263, 1280, 1325, 1334], "atg": 27, "ata": 27, "aag": 27, "gag": 27, "gca": 27, "acg": 27, "cat": [27, 53, 91, 92, 392, 600, 651, 654, 699, 702, 716, 741, 809, 814, 932, 1007, 1091, 1188, 1234, 1237, 1282, 1285, 1321, 1325], "also": [28, 34, 37, 43, 52, 53, 111, 122, 125, 126, 131, 134, 149, 150, 153, 154, 159, 175, 192, 193, 194, 196, 197, 223, 227, 240, 242, 246, 254, 255, 266, 277, 282, 285, 309, 382, 385, 399, 427, 430, 463, 482, 555, 603, 607, 615, 617, 619, 621, 623, 626, 628, 630, 647, 676, 677, 688, 689, 704, 738, 746, 747, 750, 751, 754, 755, 757, 764, 766, 789, 804, 813, 814, 820, 852, 853, 854, 856, 857, 872, 880, 882, 890, 891, 899, 902, 904, 906, 927, 932, 1013, 1048, 1096, 1190, 1194, 1236, 1237, 1259, 1260, 1271, 1325, 1329], "char": [28, 660, 1243], "omit": [28, 111, 115, 148, 159, 227, 243, 266, 271, 309, 431, 445, 770, 771, 786, 801, 802, 932, 1049, 1063], "set_decimal_separ": 28, "x": [28, 49, 50, 54, 62, 83, 97, 109, 115, 120, 121, 123, 134, 147, 148, 150, 161, 177, 201, 205, 207, 212, 222, 231, 242, 243, 273, 276, 309, 312, 317, 319, 321, 341, 346, 381, 393, 451, 452, 467, 472, 474, 475, 500, 507, 520, 548, 550, 552, 553, 555, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 591, 597, 598, 606, 607, 611, 641, 644, 684, 707, 708, 709, 716, 719, 726, 728, 730, 734, 735, 746, 747, 749, 764, 774, 776, 779, 781, 784, 789, 798, 804, 814, 861, 867, 871, 889, 891, 927, 932, 960, 985, 1081, 1117, 1170, 1194, 1225, 1228, 1267, 1303, 1307, 1308, 1325, 1333], "1234567": 28, "987654": [28, 932], "10101": 28, "y": [28, 54, 62, 83, 97, 109, 115, 147, 148, 150, 161, 177, 205, 207, 212, 222, 231, 242, 243, 273, 276, 309, 312, 317, 319, 321, 341, 346, 434, 437, 451, 452, 472, 474, 500, 507, 520, 550, 552, 555, 574, 576, 578, 580, 582, 583, 586, 587, 591, 598, 606, 607, 611, 693, 695, 696, 707, 709, 719, 726, 728, 730, 734, 735, 749, 760, 774, 779, 781, 784, 798, 814, 861, 871, 889, 891, 927, 932, 960, 985, 1052, 1055, 1194, 1276, 1278, 1279, 1325], "1234": [28, 633, 814, 1211, 1325], "7654321": 28, "234": 28, "567": 28, "987": 28, "654": [28, 255, 309, 891, 927], "00": [28, 37, 69, 165, 193, 278, 309, 400, 401, 404, 409, 423, 424, 427, 430, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 693, 696, 700, 757, 758, 759, 760, 800, 801, 802, 814, 832, 853, 862, 927, 932, 1014, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1276, 1279, 1283], "321": [28, 1334], "strip": [29, 671, 681, 688, 689, 690, 691, 692, 1254, 1264, 1271, 1272, 1273], "trail": [29, 191, 309, 681, 687, 688, 689, 1264, 1270, 1271, 1272], "zero": [29, 37, 108, 109, 118, 120, 121, 126, 128, 132, 149, 152, 161, 181, 210, 241, 255, 261, 267, 268, 309, 462, 543, 548, 635, 644, 703, 719, 814, 833, 848, 927, 990, 1081, 1162, 1228, 1286, 1299, 1305, 1306, 1325], "enabl": [29, 30, 53, 91, 92, 143, 144, 145, 146, 158, 246, 268, 282, 309, 320, 322, 607, 636, 652, 678, 723, 810, 814, 835, 882, 902, 927, 936, 937, 1194, 1218, 1235, 1261, 1306, 1313, 1325], "d": [29, 32, 34, 36, 37, 38, 39, 42, 111, 140, 191, 193, 198, 199, 203, 212, 255, 259, 261, 271, 276, 280, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 317, 319, 381, 410, 434, 437, 482, 596, 639, 654, 660, 676, 677, 684, 693, 695, 696, 739, 760, 766, 814, 853, 861, 891, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 932, 985, 1024, 1052, 1055, 1096, 1126, 1237, 1243, 1259, 1260, 1267, 1276, 1278, 1279, 1290, 1325], "01": [29, 54, 68, 69, 150, 165, 171, 191, 193, 213, 240, 278, 309, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 454, 612, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 693, 695, 696, 700, 738, 754, 755, 756, 757, 758, 759, 760, 814, 832, 839, 853, 880, 927, 932, 1013, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1276, 1278, 1279, 1283], "6789": [29, 932], "scale": [29, 70, 177, 309, 555, 596, 697, 814, 932, 1071, 1280, 1325], "trim_decimal_zero": 29, "01000": 29, "67890": 29, "addit": [30, 33, 35, 36, 37, 111, 119, 124, 125, 135, 136, 148, 150, 152, 154, 174, 178, 192, 195, 229, 246, 247, 248, 254, 268, 275, 282, 283, 287, 309, 317, 409, 457, 460, 592, 647, 651, 659, 660, 662, 676, 677, 704, 707, 736, 739, 740, 741, 762, 793, 796, 814, 845, 852, 855, 882, 883, 885, 890, 898, 902, 903, 907, 927, 932, 1014, 1023, 1079, 1234, 1242, 1243, 1245, 1259, 1260, 1306, 1325, 1329], "verbos": [30, 143, 145, 159, 660, 1243], "debug": [30, 835, 846, 866, 867, 927, 1334], "log": [30, 56, 367, 368, 450, 548, 573, 597, 717, 718, 814, 980, 1069, 1309, 1325], "do_polars_oper": 30, "if_set": 31, "env_onli": 31, "dict": [31, 35, 36, 37, 42, 50, 55, 57, 59, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 150, 184, 210, 229, 235, 241, 242, 243, 245, 262, 263, 266, 271, 273, 309, 554, 814, 878, 881, 927, 931, 932, 1169, 1325], "show": [31, 37, 51, 171, 174, 191, 214, 228, 309, 477, 814, 839, 842, 876, 888, 927, 1091, 1325], "variabl": [31, 49, 79, 132, 139, 153, 156, 222, 255, 264, 309, 871, 891, 927, 1300, 1325, 1333], "chang": [31, 38, 43, 44, 45, 46, 54, 60, 61, 70, 72, 120, 121, 122, 132, 139, 140, 255, 266, 271, 276, 277, 278, 284, 309, 324, 391, 392, 395, 431, 477, 554, 555, 592, 593, 600, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 791, 792, 814, 835, 836, 891, 899, 905, 927, 931, 932, 984, 985, 986, 1006, 1007, 1049, 1091, 1169, 1184, 1188, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1223, 1303, 1308, 1325], "restrict": [31, 685, 1268], "dictionari": [31, 37, 59, 83, 108, 110, 111, 112, 114, 120, 121, 122, 123, 127, 129, 130, 133, 134, 138, 210, 229, 241, 242, 243, 262, 263, 266, 271, 309, 554, 814, 927, 1169, 1325], "those": [31, 37, 120, 243, 268, 277, 309, 467, 603, 659, 777, 814, 899, 927, 932, 1190, 1242, 1306, 1325], "been": [31, 37, 157, 161, 162, 183, 186, 194, 195, 196, 197, 202, 237, 260, 289, 290, 309, 324, 386, 387, 388, 389, 390, 469, 485, 489, 492, 497, 509, 523, 541, 551, 552, 554, 555, 569, 598, 603, 613, 615, 617, 619, 621, 623, 626, 628, 630, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 709, 712, 713, 731, 750, 751, 752, 753, 775, 814, 854, 855, 856, 857, 866, 895, 909, 910, 927, 939, 1002, 1003, 1004, 1005, 1101, 1107, 1128, 1142, 1160, 1169, 1190, 1199, 1215, 1217, 1236, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1295, 1296, 1325], "set_fmt_float": 31, "via": [31, 120, 121, 122, 132, 134, 137, 138, 139, 210, 242, 309, 324, 394, 555, 661, 814, 840, 927, 1244], "set_stat": 31, "all_stat": 31, "io": [32, 34, 37, 38, 39, 118, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 309, 394, 469, 566, 814, 840, 884, 927], "byte": [32, 34, 37, 38, 39, 42, 43, 46, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 177, 309, 663, 667, 668, 669, 682, 694, 927, 1071, 1246, 1250, 1251, 1252, 1265, 1277, 1325], "compress": [32, 38, 39, 42, 44, 46, 309, 610, 814, 927, 1197, 1325], "avrocompress": [32, 309], "uncompress": [32, 38, 39, 42, 46, 126, 137, 309, 927], "write": [32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 119, 121, 126, 159, 309, 374, 569, 814, 864, 888, 927, 932, 991, 1325], "apach": [32, 38, 39, 42, 118, 122, 123, 126, 128, 136, 309], "avro": [32, 118, 309, 826], "writabl": [32, 34, 38, 39, 40, 41, 42, 267, 309, 1305, 1325], "like": [32, 34, 36, 38, 39, 40, 41, 42, 61, 109, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 193, 205, 207, 212, 243, 266, 267, 309, 394, 400, 469, 513, 568, 603, 659, 689, 690, 723, 810, 814, 831, 836, 840, 853, 927, 931, 1014, 1132, 1190, 1242, 1313, 1325], "object": [32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 83, 97, 109, 110, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 148, 150, 151, 161, 192, 193, 195, 196, 213, 214, 240, 243, 255, 266, 267, 268, 309, 394, 566, 755, 756, 758, 759, 774, 801, 802, 814, 826, 840, 853, 854, 856, 857, 862, 880, 891, 927, 932, 1299, 1325, 1333], "snappi": [32, 42, 46, 309, 927], "deflat": [32, 309], "pathlib": [32, 34, 38, 39, 42, 134, 309], "foo": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 165, 168, 169, 172, 173, 174, 175, 176, 179, 182, 185, 188, 189, 190, 198, 199, 200, 201, 203, 204, 206, 212, 216, 217, 218, 219, 220, 221, 224, 225, 228, 231, 233, 235, 236, 238, 241, 244, 245, 246, 249, 253, 256, 257, 258, 259, 261, 263, 264, 265, 267, 268, 269, 273, 274, 275, 279, 280, 281, 286, 309, 370, 392, 394, 427, 471, 476, 479, 502, 559, 562, 563, 564, 565, 566, 567, 568, 600, 608, 650, 654, 656, 658, 660, 661, 679, 683, 685, 688, 689, 690, 691, 692, 699, 702, 711, 732, 742, 743, 744, 763, 767, 768, 769, 772, 773, 778, 780, 782, 783, 785, 786, 788, 793, 795, 799, 803, 804, 810, 814, 832, 837, 841, 842, 843, 849, 859, 860, 861, 874, 878, 881, 882, 897, 898, 901, 904, 927, 932, 982, 1007, 1045, 1139, 1188, 1195, 1237, 1239, 1241, 1243, 1244, 1262, 1268, 1274, 1275, 1282, 1285, 1325], "bar": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 165, 168, 169, 172, 173, 174, 175, 176, 179, 182, 185, 188, 189, 190, 199, 201, 203, 204, 206, 212, 216, 217, 218, 219, 220, 221, 224, 225, 228, 231, 233, 235, 236, 238, 241, 244, 245, 246, 253, 256, 257, 258, 259, 261, 263, 264, 265, 267, 268, 269, 274, 275, 279, 280, 286, 309, 370, 394, 479, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 644, 654, 656, 658, 660, 661, 679, 683, 685, 691, 692, 732, 742, 743, 744, 763, 768, 769, 772, 773, 778, 780, 782, 783, 785, 786, 793, 795, 799, 803, 804, 810, 814, 832, 837, 841, 842, 843, 849, 859, 860, 861, 874, 878, 881, 882, 897, 898, 901, 927, 932, 982, 1139, 1228, 1237, 1239, 1241, 1243, 1244, 1262, 1268, 1274, 1275, 1325], "ham": [32, 34, 36, 38, 39, 42, 165, 168, 169, 172, 173, 174, 175, 176, 182, 189, 198, 199, 201, 212, 217, 219, 221, 224, 228, 233, 235, 238, 241, 244, 245, 246, 253, 256, 257, 259, 264, 265, 267, 268, 269, 274, 279, 280, 309, 370, 567, 832, 837, 841, 842, 843, 849, 861, 874, 878, 881, 882, 897, 904, 927, 982], "dirpath": [32, 34, 38, 39, 42, 134, 309], "new_fil": [32, 34, 38, 39, 42, 309], "t": [33, 34, 36, 43, 49, 50, 62, 119, 120, 125, 131, 134, 193, 213, 216, 230, 274, 276, 309, 324, 391, 400, 409, 430, 450, 453, 455, 456, 513, 555, 596, 659, 662, 676, 677, 690, 693, 696, 804, 814, 853, 875, 897, 927, 932, 1006, 1048, 1069, 1070, 1072, 1074, 1075, 1132, 1170, 1215, 1242, 1245, 1259, 1260, 1272, 1273, 1276, 1279, 1315, 1325], "kwarg": [33, 50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 119, 122, 123, 150, 152, 154, 169, 182, 230, 268, 309, 596, 814, 849, 875, 927, 931, 1306, 1325, 1333], "copi": [33, 108, 109, 119, 161, 166, 167, 211, 261, 267, 268, 282, 309, 460, 814, 833, 834, 902, 927, 990, 994, 1079, 1299, 1304, 1305, 1306, 1325], "csv": [33, 34, 43, 44, 45, 46, 119, 120, 121, 125, 134, 309, 826, 927], "system": [33, 120, 121, 309, 404, 1018], "clipboard": [33, 119, 309, 826], "write_csv": [33, 121, 134, 309], "past": [33, 309, 866, 867, 927], "excel": [33, 37, 119, 125, 309, 826], "similar": [33, 42, 119, 156, 185, 213, 250, 309, 353, 434, 437, 535, 592, 637, 707, 773, 804, 814, 846, 862, 886, 927, 967, 1052, 1055, 1154, 1220, 1325], "spreadsheet": [33, 119, 125, 131, 231, 309], "softwar": [33, 119, 309], "field": [33, 34, 36, 43, 83, 104, 106, 111, 275, 309, 358, 543, 577, 579, 581, 610, 660, 661, 664, 684, 685, 706, 707, 723, 746, 747, 750, 751, 776, 796, 814, 898, 927, 972, 1007, 1162, 1188, 1197, 1244, 1267, 1268, 1290, 1292, 1325], "symbol": [33, 34, 43, 309, 814, 927], "argument": [33, 36, 42, 92, 119, 120, 124, 132, 134, 135, 150, 152, 154, 169, 172, 178, 192, 193, 194, 195, 196, 197, 213, 217, 219, 224, 229, 230, 240, 246, 247, 248, 254, 257, 268, 275, 278, 282, 283, 287, 309, 431, 445, 454, 457, 463, 482, 592, 596, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 647, 688, 689, 690, 707, 727, 734, 735, 736, 739, 740, 741, 743, 745, 762, 793, 796, 804, 814, 841, 845, 852, 853, 854, 855, 856, 857, 875, 880, 882, 883, 885, 890, 898, 902, 903, 907, 927, 931, 932, 1049, 1063, 1096, 1271, 1272, 1273, 1306, 1325], "pass": [33, 35, 36, 37, 42, 50, 54, 110, 119, 122, 123, 125, 132, 134, 140, 143, 145, 148, 150, 152, 154, 164, 169, 172, 192, 193, 196, 199, 215, 229, 230, 240, 246, 250, 254, 259, 268, 271, 272, 278, 282, 286, 287, 309, 312, 324, 353, 368, 399, 410, 427, 430, 460, 479, 535, 554, 555, 592, 596, 607, 612, 615, 617, 619, 621, 623, 626, 628, 630, 637, 647, 688, 689, 690, 718, 727, 736, 738, 745, 755, 766, 796, 804, 810, 814, 830, 841, 852, 853, 854, 856, 857, 859, 866, 867, 875, 880, 882, 886, 888, 890, 896, 902, 907, 915, 927, 931, 939, 967, 1013, 1024, 1048, 1079, 1090, 1121, 1154, 1169, 1170, 1194, 1220, 1271, 1272, 1273, 1294, 1306, 1325, 1329], "read_clipboard": [33, 309], "read": [33, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 179, 309, 394, 469, 553, 804, 814, 840, 846, 927, 1078, 1325], "comma": [33, 34, 120, 121, 134, 309], "include_bom": [34, 43, 309, 927], "include_head": [34, 37, 43, 121, 273, 309, 927], "line_termin": [34, 43, 309, 927], "quote_char": [34, 43, 120, 121, 134, 309, 927], "batch_siz": [34, 43, 120, 121, 122, 138, 140, 271, 309, 927], "1024": [34, 42, 43, 46, 120, 121, 122, 138, 309, 927], "datetime_format": [34, 43, 309, 927], "date_format": [34, 43, 309, 927], "time_format": [34, 43, 309, 927], "null_valu": [34, 43, 120, 121, 134, 309, 927], "quote_styl": [34, 43, 309, 927], "csvquotestyl": [34, 43, 309, 927], "If": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 53, 59, 60, 61, 62, 70, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 151, 152, 153, 161, 162, 164, 174, 179, 191, 193, 194, 196, 197, 199, 208, 209, 210, 213, 215, 216, 220, 227, 229, 231, 240, 242, 243, 244, 250, 253, 258, 259, 263, 264, 266, 267, 272, 273, 274, 276, 277, 286, 309, 320, 322, 324, 346, 353, 358, 368, 399, 403, 404, 423, 424, 434, 437, 463, 477, 482, 498, 520, 530, 535, 536, 543, 553, 555, 566, 567, 592, 600, 603, 605, 607, 608, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 637, 640, 644, 645, 650, 660, 661, 662, 663, 664, 665, 671, 681, 682, 683, 684, 685, 687, 688, 689, 690, 693, 694, 695, 696, 700, 703, 718, 723, 727, 729, 731, 733, 737, 738, 741, 742, 745, 746, 755, 756, 758, 759, 760, 763, 764, 770, 771, 772, 774, 777, 786, 787, 790, 791, 792, 796, 801, 802, 804, 805, 814, 830, 835, 836, 842, 844, 853, 854, 856, 857, 861, 862, 867, 871, 878, 880, 884, 886, 889, 896, 897, 899, 909, 915, 927, 931, 932, 936, 937, 939, 960, 967, 972, 991, 1007, 1013, 1017, 1018, 1041, 1042, 1052, 1055, 1078, 1088, 1090, 1091, 1096, 1118, 1119, 1121, 1139, 1149, 1154, 1155, 1162, 1170, 1188, 1190, 1192, 1194, 1195, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1214, 1218, 1220, 1224, 1228, 1229, 1233, 1243, 1244, 1245, 1246, 1247, 1248, 1254, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1283, 1286, 1294, 1299, 1303, 1305, 1313, 1315, 1325, 1333], "instead": [34, 36, 40, 41, 47, 51, 54, 61, 62, 110, 111, 114, 120, 121, 122, 125, 131, 132, 134, 140, 147, 148, 149, 150, 154, 163, 191, 193, 209, 210, 213, 216, 227, 229, 236, 241, 242, 243, 246, 247, 250, 251, 266, 267, 268, 278, 282, 283, 284, 286, 309, 312, 334, 353, 368, 375, 376, 392, 406, 408, 412, 416, 419, 421, 426, 430, 431, 433, 445, 454, 457, 467, 535, 553, 566, 600, 615, 617, 619, 621, 623, 626, 628, 630, 637, 638, 667, 668, 671, 676, 677, 681, 687, 688, 689, 690, 691, 692, 693, 696, 703, 718, 725, 733, 737, 743, 755, 756, 757, 758, 759, 760, 770, 771, 787, 790, 796, 801, 802, 805, 814, 829, 836, 853, 882, 883, 884, 886, 887, 902, 903, 905, 927, 932, 948, 967, 976, 992, 993, 1007, 1020, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1073, 1097, 1103, 1106, 1113, 1115, 1117, 1154, 1188, 1213, 1216, 1220, 1221, 1230, 1250, 1251, 1254, 1259, 1260, 1264, 1270, 1271, 1272, 1273, 1276, 1279, 1286, 1305, 1306, 1325, 1329, 1333], "whether": [34, 43, 112, 114, 154, 158, 164, 176, 186, 193, 194, 196, 197, 209, 213, 240, 248, 254, 272, 309, 320, 322, 337, 338, 367, 368, 413, 432, 454, 503, 504, 612, 636, 647, 717, 718, 736, 814, 830, 853, 854, 856, 857, 866, 867, 880, 885, 890, 896, 927, 932, 936, 937, 951, 952, 983, 986, 1027, 1050, 1070, 1073, 1122, 1123, 1215, 1325, 1333], "utf": [34, 43, 82, 309, 927], "bom": [34, 43, 309, 927], "header": [34, 37, 42, 43, 46, 115, 120, 121, 125, 134, 175, 231, 273, 309, 927], "end": [34, 37, 43, 120, 121, 134, 193, 309, 362, 365, 366, 400, 431, 457, 536, 651, 657, 660, 663, 673, 682, 686, 688, 689, 692, 733, 738, 754, 755, 756, 757, 758, 759, 762, 770, 771, 801, 802, 804, 814, 853, 858, 865, 876, 927, 932, 978, 1014, 1049, 1114, 1155, 1240, 1243, 1246, 1256, 1265, 1269, 1271, 1272, 1277, 1325], "each": [34, 37, 43, 54, 63, 70, 79, 121, 122, 125, 138, 143, 144, 145, 146, 148, 170, 182, 191, 192, 193, 194, 195, 196, 197, 211, 213, 216, 229, 240, 242, 244, 266, 271, 275, 277, 278, 286, 287, 290, 292, 294, 295, 303, 309, 334, 368, 392, 431, 445, 463, 485, 486, 489, 490, 519, 522, 523, 530, 540, 548, 555, 592, 600, 603, 610, 611, 619, 623, 626, 630, 634, 640, 647, 660, 663, 667, 668, 669, 672, 682, 684, 685, 694, 718, 733, 736, 741, 770, 771, 796, 804, 814, 835, 838, 849, 853, 854, 856, 857, 862, 876, 880, 898, 899, 907, 909, 910, 912, 914, 915, 923, 927, 948, 989, 1007, 1049, 1063, 1101, 1102, 1107, 1108, 1138, 1141, 1142, 1149, 1159, 1188, 1190, 1197, 1198, 1212, 1224, 1243, 1246, 1250, 1251, 1252, 1255, 1265, 1267, 1268, 1277, 1292, 1325, 1334], "quot": [34, 35, 43, 120, 121, 123, 134, 309, 927], "specifi": [34, 36, 37, 43, 54, 94, 104, 106, 125, 131, 151, 164, 165, 177, 178, 181, 192, 193, 194, 195, 196, 197, 212, 229, 240, 241, 243, 246, 247, 248, 250, 254, 266, 272, 275, 282, 283, 287, 309, 368, 374, 453, 455, 456, 457, 462, 592, 606, 607, 615, 617, 619, 621, 623, 626, 628, 630, 637, 647, 707, 718, 736, 739, 740, 741, 755, 756, 758, 759, 760, 762, 793, 796, 801, 802, 814, 830, 832, 845, 848, 852, 853, 854, 855, 856, 857, 861, 880, 882, 883, 885, 886, 890, 896, 898, 902, 903, 907, 927, 932, 991, 1071, 1072, 1074, 1075, 1081, 1194, 1220, 1303, 1325], "defin": [34, 37, 43, 69, 122, 129, 147, 148, 150, 162, 165, 174, 178, 193, 194, 196, 197, 216, 227, 230, 240, 277, 289, 295, 309, 324, 482, 516, 541, 555, 596, 600, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 663, 668, 682, 694, 731, 755, 756, 758, 759, 777, 796, 801, 802, 814, 832, 842, 845, 853, 854, 856, 857, 875, 880, 899, 909, 915, 927, 932, 939, 1096, 1135, 1170, 1188, 1198, 1246, 1251, 1265, 1277, 1325], "chrono": [34, 43, 309, 434, 437, 693, 695, 696, 700, 927, 1052, 1055, 1276, 1278, 1279, 1283], "rust": [34, 42, 43, 101, 126, 128, 132, 216, 295, 309, 661, 927, 931, 1170, 1244, 1325], "crate": [34, 43, 309, 651, 653, 654, 659, 660, 661, 662, 676, 677, 693, 695, 696, 700, 927, 932, 1234, 1236, 1237, 1242, 1243, 1244, 1245, 1259, 1260, 1276, 1278, 1279, 1283], "fraction": [34, 43, 143, 144, 145, 146, 244, 309, 432, 530, 593, 634, 693, 696, 814, 927, 1050, 1149, 1184, 1212, 1276, 1279, 1325], "second": [34, 43, 143, 144, 145, 146, 193, 213, 240, 278, 309, 411, 415, 418, 420, 425, 427, 431, 444, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 676, 677, 693, 696, 755, 756, 757, 758, 759, 760, 800, 801, 802, 804, 814, 853, 862, 880, 927, 932, 1045, 1049, 1062, 1063, 1073, 1259, 1260, 1276, 1279, 1325, 1334], "infer": [34, 43, 70, 83, 108, 110, 111, 112, 113, 114, 120, 121, 122, 125, 129, 130, 131, 132, 134, 138, 139, 162, 216, 309, 431, 445, 553, 555, 608, 664, 665, 693, 695, 696, 697, 700, 760, 774, 790, 814, 927, 1049, 1063, 1170, 1195, 1247, 1248, 1276, 1278, 1279, 1280, 1283, 1325], "timeunit": [34, 43, 69, 71, 309, 401, 403, 436, 448, 696, 755, 756, 757, 758, 759, 760, 927, 932, 1015, 1017, 1054, 1066, 1279], "frame": [34, 35, 37, 43, 47, 48, 49, 50, 51, 52, 54, 61, 62, 111, 121, 125, 131, 143, 144, 165, 166, 171, 210, 211, 216, 223, 227, 230, 241, 242, 243, 255, 271, 276, 277, 309, 832, 833, 839, 872, 875, 891, 899, 927, 932, 990, 1325, 1333, 1334], "datatyp": [34, 40, 43, 108, 110, 111, 112, 114, 116, 125, 127, 129, 130, 133, 138, 151, 152, 154, 175, 185, 245, 309, 369, 457, 639, 716, 762, 774, 814, 826, 843, 881, 884, 927, 932, 939, 981, 984, 1008, 1106, 1113, 1115, 1117, 1170, 1222, 1307, 1325], "repres": [34, 37, 43, 68, 69, 71, 80, 84, 89, 108, 110, 112, 113, 114, 122, 125, 255, 256, 266, 267, 279, 286, 309, 467, 491, 493, 538, 545, 553, 649, 663, 668, 682, 694, 724, 727, 742, 744, 760, 762, 774, 776, 777, 786, 791, 792, 795, 803, 810, 814, 891, 892, 900, 927, 932, 1213, 1217, 1232, 1246, 1251, 1265, 1277, 1305, 1314, 1325], "necessari": [34, 35, 43, 53, 92, 125, 267, 309, 927, 1305, 1325], "non_numer": [34, 43, 309, 927], "never": [34, 43, 122, 212, 241, 309, 861, 927], "strategi": [34, 43, 54, 62, 120, 147, 148, 149, 150, 151, 152, 154, 181, 193, 196, 212, 213, 226, 277, 309, 324, 462, 543, 555, 814, 848, 853, 856, 861, 862, 899, 927, 1081, 1162, 1325], "put": [34, 43, 309, 927], "around": [34, 43, 309, 927], "thei": [34, 37, 43, 53, 61, 62, 91, 92, 111, 134, 159, 213, 214, 243, 309, 678, 689, 690, 814, 927, 931, 932], "record": [34, 39, 43, 128, 140, 309, 862, 927], "termin": [34, 43, 309, 927], "indistinguish": [34, 43, 309, 927], "even": [34, 43, 120, 309, 454, 596, 600, 814, 927, 932, 1073, 1188, 1325], "invalid": [34, 43, 120, 121, 134, 309, 664, 666, 698, 719, 814, 927, 976, 1247, 1249, 1281], "g": [34, 43, 120, 124, 126, 128, 135, 137, 140, 152, 161, 209, 236, 267, 276, 309, 317, 324, 394, 454, 457, 555, 639, 762, 814, 840, 878, 927, 1070, 1073, 1215, 1325, 1334], "pars": [34, 43, 47, 119, 120, 121, 123, 125, 130, 131, 134, 137, 138, 164, 192, 195, 246, 247, 250, 254, 272, 282, 283, 287, 309, 368, 374, 482, 554, 592, 607, 647, 664, 665, 675, 697, 698, 707, 718, 728, 730, 736, 739, 740, 741, 749, 753, 766, 779, 781, 784, 793, 794, 796, 798, 804, 814, 830, 852, 855, 882, 883, 886, 890, 896, 902, 903, 907, 927, 991, 1096, 1194, 1220, 1247, 1248, 1258, 1279, 1280, 1281, 1325], "valid": [34, 37, 43, 47, 69, 122, 126, 128, 132, 154, 159, 177, 212, 309, 391, 651, 653, 654, 659, 660, 661, 662, 666, 676, 677, 804, 814, 861, 927, 932, 1006, 1071, 1088, 1234, 1236, 1237, 1242, 1243, 1244, 1245, 1249, 1259, 1260, 1325], "integ": [34, 37, 43, 68, 69, 71, 75, 76, 77, 78, 84, 85, 86, 87, 88, 141, 148, 150, 153, 155, 174, 193, 240, 264, 267, 309, 321, 373, 432, 466, 467, 591, 600, 605, 611, 612, 613, 614, 615, 617, 619, 621, 623, 625, 626, 628, 630, 663, 675, 694, 698, 726, 733, 766, 770, 771, 790, 814, 842, 853, 880, 927, 932, 988, 1050, 1084, 1106, 1188, 1192, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1217, 1246, 1258, 1277, 1281, 1305, 1325, 1333, 1334], "aren": [34, 43, 309, 927], "strictli": [34, 43, 53, 92, 309, 846, 927], "table_nam": [35, 37, 255, 309, 891, 927], "connect": [35, 120, 122, 123, 126, 128, 132, 137, 139, 140, 309, 827], "connectionorcursor": [35, 122, 309], "if_table_exist": [35, 309], "dbwritemod": [35, 309], "fail": [35, 36, 109, 124, 126, 130, 132, 135, 137, 138, 139, 143, 144, 161, 267, 274, 309, 335, 435, 543, 693, 695, 696, 700, 814, 897, 927, 1170, 1276, 1278, 1279, 1283, 1305, 1325], "dbwriteengin": [35, 309], "engine_opt": [35, 125, 309], "databas": [35, 122, 123, 309, 826], "new": [35, 36, 37, 125, 134, 159, 187, 201, 202, 203, 216, 227, 228, 235, 236, 255, 260, 266, 271, 273, 275, 276, 277, 282, 283, 309, 319, 403, 459, 469, 471, 480, 552, 576, 577, 592, 607, 611, 676, 677, 684, 685, 704, 706, 713, 810, 814, 826, 851, 878, 891, 895, 898, 899, 902, 903, 909, 915, 927, 935, 1017, 1077, 1086, 1181, 1193, 1194, 1198, 1259, 1260, 1267, 1268, 1287, 1290, 1296, 1301, 1303, 1308, 1325, 1333], "version": [35, 36, 59, 92, 124, 125, 135, 142, 147, 148, 149, 150, 154, 157, 161, 162, 163, 183, 186, 193, 194, 195, 196, 197, 198, 202, 217, 219, 224, 236, 237, 251, 255, 257, 260, 266, 267, 271, 278, 284, 289, 290, 309, 324, 375, 376, 386, 387, 388, 389, 390, 406, 408, 412, 416, 419, 421, 423, 424, 426, 430, 431, 433, 445, 448, 454, 469, 475, 485, 489, 492, 497, 509, 523, 541, 551, 552, 554, 569, 598, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 638, 652, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 693, 696, 709, 712, 713, 725, 731, 750, 751, 752, 753, 755, 757, 775, 789, 814, 829, 853, 854, 855, 856, 857, 866, 887, 891, 895, 905, 909, 910, 927, 939, 984, 992, 993, 1002, 1003, 1004, 1005, 1007, 1020, 1022, 1026, 1033, 1036, 1039, 1041, 1042, 1044, 1048, 1049, 1051, 1063, 1066, 1089, 1097, 1101, 1103, 1106, 1107, 1113, 1115, 1117, 1128, 1142, 1160, 1169, 1188, 1199, 1215, 1217, 1221, 1235, 1236, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1276, 1279, 1295, 1296, 1303, 1304, 1305, 1308, 1315, 1325], "20": [35, 36, 37, 120, 125, 142, 147, 148, 149, 150, 154, 157, 163, 171, 179, 201, 203, 223, 230, 232, 236, 238, 255, 266, 267, 271, 278, 284, 290, 309, 332, 333, 334, 395, 402, 405, 406, 411, 415, 417, 418, 420, 425, 431, 432, 435, 445, 448, 454, 469, 475, 480, 569, 596, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 725, 757, 766, 774, 801, 814, 829, 839, 872, 875, 891, 905, 910, 927, 932, 1009, 1016, 1020, 1034, 1049, 1063, 1066, 1076, 1303, 1305, 1308, 1325], "26": [35, 142, 147, 148, 149, 150, 154, 171, 309, 409, 446, 839, 927, 1023], "instanti": [35, 37, 122, 152, 246, 266, 282, 309, 882, 902, 927, 1303, 1325], "uri": [35, 36, 122, 123, 124, 135, 136, 309], "qualifi": [35, 309], "creat": [35, 37, 53, 92, 108, 112, 114, 120, 121, 122, 123, 126, 128, 132, 135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 166, 167, 193, 194, 197, 228, 231, 240, 266, 267, 278, 282, 285, 309, 403, 431, 445, 454, 543, 604, 612, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 740, 754, 755, 756, 757, 758, 759, 760, 800, 801, 802, 810, 814, 833, 834, 839, 844, 853, 854, 857, 880, 902, 906, 927, 990, 994, 1007, 1017, 1049, 1063, 1073, 1181, 1188, 1191, 1303, 1305, 1325, 1333, 1334], "append": [35, 36, 150, 179, 212, 213, 309, 604, 804, 814, 861, 862, 927, 1078, 1325], "your": [35, 37, 53, 54, 92, 120, 121, 122, 123, 125, 140, 210, 216, 242, 243, 246, 263, 282, 287, 295, 309, 324, 404, 454, 469, 555, 661, 693, 695, 696, 703, 777, 814, 858, 865, 867, 882, 902, 907, 915, 927, 1018, 1073, 1170, 1244, 1276, 1278, 1279, 1286, 1325, 1334], "special": [35, 120, 121, 123, 134, 271, 285, 309, 614, 660, 676, 677, 814, 906, 927, 939, 1170, 1200, 1243, 1259, 1260, 1325], "sqlalchemi": [35, 122, 142, 309], "adbc": [35, 122, 123, 309], "against": [35, 47, 97, 120, 122, 255, 309, 513, 662, 891, 927, 1132, 1245, 1333, 1334], "postgresql": [35, 122, 123, 309, 592, 814], "user": [35, 122, 123, 162, 216, 230, 289, 295, 309, 324, 553, 555, 596, 636, 731, 777, 814, 875, 909, 915, 927, 931, 939, 1170, 1218, 1325], "server": [35, 122, 123, 309], "port": [35, 120, 122, 123, 126, 128, 137, 309], "sqlite": [35, 122, 309], "db": [35, 122, 123, 309], "replac": [35, 36, 120, 121, 134, 180, 181, 237, 238, 273, 282, 283, 309, 403, 430, 461, 553, 554, 677, 678, 814, 847, 902, 903, 927, 1017, 1048, 1080, 1169, 1213, 1216, 1217, 1260, 1261, 1325], "insert": [35, 120, 121, 126, 128, 132, 134, 137, 138, 139, 202, 203, 236, 273, 275, 309, 635, 650, 703, 814, 898, 927, 1214, 1233, 1286, 1325], "mode": [35, 36, 43, 44, 45, 46, 47, 60, 61, 143, 145, 231, 255, 309, 660, 787, 790, 805, 814, 835, 836, 927, 1243, 1325, 1333], "alreadi": [35, 36, 96, 266, 309, 391, 513, 723, 814, 888, 927, 1006, 1132, 1313, 1325], "suppli": [35, 37, 108, 110, 111, 112, 114, 122, 129, 130, 138, 182, 241, 266, 309, 463, 596, 814, 849, 927, 1303, 1325], "unset": [35, 47, 149, 294, 309, 430, 543, 914, 1048], "associ": [35, 37, 48, 50, 54, 123, 125, 149, 152, 243, 309], "panda": [35, 109, 113, 142, 193, 268, 309, 423, 424, 716, 814, 853, 927, 1041, 1042, 1306, 1307, 1325], "to_sql": [35, 309], "though": [35, 122, 193, 309, 810, 853, 927], "eventu": [35, 309], "phase": [35, 276, 309], "favour": [35, 309], "solut": [35, 309], "cursor": [35, 122, 309], "adbc_ingest": [35, 309], "affect": [35, 143, 144, 145, 146, 309], "driver": [35, 122, 123, 309], "provid": [35, 37, 50, 120, 121, 123, 124, 125, 132, 134, 135, 136, 139, 150, 154, 182, 208, 255, 266, 309, 363, 364, 457, 477, 543, 553, 555, 655, 656, 659, 664, 666, 689, 690, 691, 692, 766, 796, 814, 826, 849, 891, 927, 976, 977, 1091, 1118, 1170, 1238, 1239, 1242, 1247, 1249, 1303, 1325, 1333, 1334], "otherwis": [35, 122, 125, 149, 152, 156, 216, 223, 243, 246, 266, 271, 295, 309, 358, 363, 374, 392, 453, 454, 455, 456, 543, 555, 563, 592, 596, 600, 605, 651, 655, 662, 663, 668, 682, 694, 727, 760, 763, 772, 777, 786, 804, 814, 872, 882, 915, 927, 972, 976, 991, 1007, 1072, 1073, 1074, 1075, 1162, 1170, 1188, 1192, 1213, 1216, 1234, 1238, 1245, 1246, 1251, 1265, 1277, 1325], "target_t": [35, 309], "pyodbc": [35, 309], "wa": [35, 59, 143, 229, 266, 267, 286, 309, 607, 678, 760, 814, 1194, 1261, 1305, 1325], "fast_executemani": [35, 309], "improv": [35, 46, 126, 137, 309, 553, 814, 927], "perform": [35, 42, 44, 46, 54, 95, 98, 105, 109, 120, 121, 122, 126, 132, 134, 137, 138, 139, 161, 164, 192, 193, 194, 195, 196, 197, 213, 216, 217, 219, 224, 234, 240, 242, 243, 257, 267, 272, 295, 309, 324, 467, 543, 553, 555, 592, 612, 652, 667, 668, 678, 693, 695, 696, 814, 830, 853, 854, 856, 857, 862, 880, 890, 896, 905, 906, 927, 1170, 1235, 1250, 1251, 1261, 1276, 1278, 1279, 1304, 1305, 1325], "pyodbc_uri": [35, 309], "mssql": [35, 309], "1433": [35, 309], "odbc": [35, 122, 309], "18": [35, 115, 171, 223, 240, 309, 385, 431, 445, 448, 480, 497, 575, 612, 707, 814, 839, 872, 876, 880, 927, 932, 1066, 1279], "create_engin": [35, 309], "deltalak": [36, 124, 135, 142, 309], "deltat": [36, 309], "ignor": [36, 122, 149, 150, 154, 219, 220, 257, 258, 277, 309, 320, 322, 346, 395, 430, 453, 455, 456, 511, 520, 584, 585, 650, 727, 729, 741, 814, 932, 936, 937, 960, 1009, 1048, 1072, 1074, 1075, 1130, 1139, 1179, 1180, 1233, 1325], "merg": [36, 212, 223, 309, 861, 872, 927], "overwrite_schema": [36, 309], "storage_opt": [36, 120, 124, 126, 128, 132, 135, 136, 137, 139, 309], "delta_write_opt": [36, 309], "delta_merge_opt": [36, 309], "tablemerg": [36, 309], "delta": [36, 124, 135, 256, 279, 309, 538, 545, 626, 627, 630, 631, 649, 724, 742, 744, 791, 792, 795, 803, 814, 826, 892, 900, 927, 1207, 1209, 1232, 1314, 1325], "handl": [36, 60, 61, 62, 115, 120, 121, 134, 140, 309, 395, 511, 703, 814, 835, 836, 927, 931, 1009, 1130, 1286, 1325], "throw": [36, 110, 111, 114, 165, 309, 369, 664, 666, 814, 832, 927, 981, 1247, 1249, 1325], "add": [36, 37, 121, 179, 193, 196, 216, 282, 283, 284, 285, 309, 392, 578, 579, 580, 581, 598, 600, 707, 709, 760, 764, 804, 814, 853, 856, 861, 902, 903, 904, 905, 906, 927, 1078, 1325], "anyth": [36, 241, 309], "updat": [36, 171, 309, 839, 927], "deprec": [36, 92, 93, 147, 148, 149, 150, 154, 157, 162, 163, 183, 186, 193, 194, 195, 196, 197, 202, 217, 219, 224, 236, 237, 251, 257, 260, 267, 278, 284, 289, 290, 309, 324, 375, 376, 386, 387, 388, 389, 390, 406, 408, 412, 416, 419, 421, 426, 430, 431, 433, 445, 448, 454, 469, 485, 489, 492, 497, 509, 523, 541, 551, 552, 554, 569, 598, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 638, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 693, 696, 709, 712, 713, 725, 731, 743, 750, 751, 752, 753, 755, 757, 775, 814, 829, 853, 854, 855, 856, 857, 866, 887, 895, 905, 909, 910, 927, 939, 984, 992, 993, 1002, 1003, 1004, 1005, 1007, 1020, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1066, 1097, 1101, 1103, 1106, 1107, 1113, 1115, 1117, 1128, 1142, 1160, 1169, 1188, 1199, 1215, 1217, 1221, 1236, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1276, 1279, 1295, 1296, 1304, 1305, 1315, 1325], "sinc": [36, 68, 69, 84, 92, 122, 124, 135, 147, 148, 149, 150, 154, 157, 162, 163, 164, 183, 186, 193, 194, 195, 196, 197, 202, 217, 219, 224, 236, 237, 251, 257, 260, 267, 272, 278, 284, 289, 290, 309, 324, 375, 376, 386, 387, 388, 389, 390, 406, 408, 410, 412, 416, 419, 421, 426, 430, 431, 433, 445, 448, 454, 469, 485, 489, 492, 497, 509, 523, 541, 551, 552, 554, 569, 598, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 638, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 693, 696, 709, 712, 713, 725, 731, 750, 751, 752, 753, 755, 757, 766, 775, 814, 829, 830, 853, 854, 855, 856, 857, 866, 887, 890, 895, 896, 905, 909, 910, 927, 939, 984, 992, 993, 1002, 1003, 1004, 1005, 1007, 1020, 1022, 1024, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1066, 1097, 1101, 1103, 1106, 1107, 1113, 1115, 1117, 1128, 1142, 1160, 1169, 1188, 1199, 1215, 1217, 1221, 1236, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1276, 1279, 1295, 1296, 1304, 1305, 1315, 1325], "14": [36, 142, 171, 183, 202, 216, 217, 219, 224, 237, 257, 260, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 386, 387, 388, 389, 390, 400, 405, 406, 411, 415, 418, 420, 425, 432, 435, 480, 541, 603, 675, 712, 713, 750, 751, 752, 753, 757, 800, 801, 814, 839, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 932, 1002, 1003, 1004, 1005, 1014, 1049, 1097, 1117, 1160, 1217, 1258, 1295, 1296, 1315, 1325], "schema_mod": [36, 309], "extra": [36, 120, 121, 124, 126, 128, 134, 135, 136, 137, 179, 193, 309, 814, 853, 927, 931, 1078, 1325], "storag": [36, 120, 124, 126, 128, 132, 135, 136, 137, 309], "backend": [36, 122, 123, 124, 135, 136, 309], "cloud": [36, 122, 124, 132, 135, 136, 137, 139, 140, 309], "configur": [36, 124, 135, 136, 159, 309], "authent": [36, 124, 135, 136, 309], "see": [36, 37, 38, 39, 60, 61, 69, 122, 123, 124, 125, 126, 128, 132, 135, 136, 139, 143, 144, 145, 146, 150, 154, 169, 193, 212, 230, 231, 309, 312, 374, 462, 498, 553, 644, 651, 659, 660, 662, 663, 676, 677, 694, 755, 756, 758, 759, 789, 801, 802, 810, 814, 835, 836, 853, 927, 931, 932, 985, 991, 1119, 1228, 1234, 1242, 1243, 1245, 1246, 1259, 1260, 1277, 1325, 1329, 1334], "here": [36, 37, 42, 108, 110, 111, 112, 114, 122, 123, 124, 129, 130, 132, 135, 136, 138, 139, 148, 150, 154, 309, 399, 555, 661, 666, 738, 814, 888, 927, 932, 1013, 1249], "gc": [36, 124, 135, 136, 309], "azur": [36, 124, 132, 135, 136, 139, 309], "keyword": [36, 50, 124, 132, 135, 150, 154, 169, 192, 230, 241, 246, 247, 268, 282, 283, 287, 309, 463, 596, 707, 793, 796, 804, 814, 852, 875, 882, 883, 902, 903, 907, 927, 1306, 1325], "while": [36, 61, 121, 124, 125, 135, 150, 154, 159, 210, 222, 273, 277, 309, 668, 836, 871, 899, 927, 1088, 1251, 1325], "lake": [36, 124, 135, 309, 826], "typeerror": [36, 309], "unsupport": [36, 309], "arrowinvaliderror": [36, 309], "could": [36, 89, 95, 165, 309, 369, 746, 750, 760, 764, 814, 832, 839, 842, 927, 981, 1088, 1325], "primit": [36, 309, 487, 814], "tablenotfounderror": [36, 309], "doesn": [36, 120, 134, 193, 213, 309, 450, 814, 853, 927, 1069, 1315, 1325], "action": [36, 309], "trigger": [36, 268, 309, 814, 931, 1306, 1325], "protocol": [36, 109, 123, 161, 309], "categor": [36, 53, 72, 91, 92, 143, 144, 145, 146, 212, 264, 309, 370, 371, 392, 600, 607, 716, 814, 932, 982, 983, 984, 985, 986, 1007, 1188, 1194, 1307, 1325], "convert": [36, 109, 113, 124, 125, 131, 135, 161, 262, 263, 264, 265, 266, 267, 268, 270, 271, 309, 357, 358, 393, 404, 434, 437, 542, 543, 552, 553, 576, 602, 661, 675, 693, 695, 696, 697, 698, 700, 705, 814, 927, 931, 971, 972, 985, 1018, 1052, 1055, 1161, 1162, 1244, 1258, 1276, 1278, 1279, 1280, 1281, 1283, 1289, 1292, 1302, 1303, 1304, 1305, 1306, 1308, 1315, 1325], "normal": [36, 193, 309, 450, 498, 644, 814, 853, 927, 1069, 1119, 1228, 1325], "nullabl": [36, 309], "To": [36, 61, 180, 217, 219, 224, 257, 309, 374, 397, 398, 461, 462, 651, 659, 660, 662, 676, 677, 689, 690, 691, 692, 701, 814, 847, 927, 991, 1011, 1012, 1080, 1088, 1234, 1242, 1243, 1245, 1259, 1260, 1284, 1305, 1325], "pyarrow": [36, 42, 108, 113, 120, 123, 124, 126, 128, 132, 135, 140, 142, 261, 267, 268, 309, 826, 1299, 1304, 1305, 1306, 1325], "ha": [36, 37, 54, 61, 113, 122, 134, 157, 161, 162, 183, 186, 193, 194, 195, 196, 197, 202, 237, 240, 260, 278, 284, 289, 290, 309, 324, 367, 368, 386, 387, 388, 389, 390, 391, 469, 485, 489, 492, 497, 509, 523, 541, 551, 552, 553, 554, 564, 569, 598, 613, 615, 617, 619, 621, 623, 626, 628, 630, 653, 663, 665, 669, 670, 671, 672, 675, 680, 681, 687, 694, 704, 709, 712, 713, 717, 718, 731, 750, 751, 752, 753, 763, 772, 775, 786, 810, 814, 836, 853, 854, 855, 856, 857, 866, 880, 895, 905, 909, 910, 915, 927, 939, 980, 990, 1002, 1003, 1004, 1005, 1006, 1008, 1088, 1101, 1103, 1107, 1128, 1142, 1160, 1169, 1199, 1215, 1217, 1236, 1246, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1277, 1295, 1296, 1309, 1325], "last": [36, 143, 144, 145, 146, 164, 199, 213, 215, 231, 243, 254, 259, 267, 272, 274, 303, 309, 334, 345, 354, 367, 368, 391, 407, 423, 428, 446, 489, 490, 497, 518, 537, 540, 543, 575, 576, 578, 580, 582, 583, 598, 646, 647, 663, 685, 694, 709, 711, 717, 718, 736, 799, 814, 830, 862, 890, 894, 896, 897, 923, 927, 932, 948, 959, 968, 1006, 1021, 1041, 1046, 1064, 1090, 1107, 1108, 1121, 1137, 1156, 1159, 1230, 1246, 1268, 1277, 1294, 1305, 1325], "filesystem": [36, 124, 135, 136, 309], "table_path": [36, 124, 135, 136, 309], "match": [36, 37, 62, 69, 102, 108, 110, 111, 112, 114, 122, 129, 130, 138, 143, 144, 145, 146, 165, 181, 212, 213, 241, 277, 309, 561, 607, 625, 651, 652, 653, 654, 657, 659, 660, 662, 664, 666, 676, 677, 678, 686, 693, 695, 696, 804, 814, 832, 848, 861, 862, 899, 927, 932, 1106, 1115, 1194, 1206, 1234, 1235, 1236, 1237, 1240, 1242, 1243, 1245, 1247, 1249, 1259, 1260, 1261, 1269, 1276, 1278, 1279, 1325], "old": [36, 235, 309, 607, 814, 878, 927, 1194, 1325], "existing_table_path": [36, 309], "store": [36, 120, 136, 179, 210, 242, 309, 370, 610, 814, 982, 1078, 1197, 1325], "bucket": [36, 124, 135, 136, 139, 309, 431, 445, 477, 814, 1049, 1063, 1091, 1325], "prefix": [36, 120, 121, 134, 159, 309, 319, 366, 552, 576, 579, 580, 582, 583, 686, 690, 691, 703, 709, 814, 932, 979, 1269, 1274, 1286], "aws_region": [36, 135, 139, 309], "the_aws_region": [36, 309], "aws_access_key_id": [36, 124, 135, 139, 309], "the_aws_access_key_id": [36, 124, 135, 136, 309], "aws_secret_access_kei": [36, 124, 135, 139, 309], "the_aws_secret_access_kei": [36, 124, 135, 136, 309], "pa": [36, 108, 140, 309], "check": [36, 69, 97, 120, 121, 134, 143, 144, 145, 146, 158, 176, 186, 193, 194, 196, 197, 208, 212, 240, 309, 341, 362, 365, 366, 454, 482, 487, 508, 612, 651, 657, 662, 686, 814, 853, 854, 856, 857, 861, 866, 867, 880, 927, 955, 975, 978, 979, 1070, 1073, 1097, 1099, 1103, 1104, 1106, 1113, 1114, 1115, 1117, 1118, 1127, 1215, 1234, 1240, 1245, 1269, 1325], "doc": [36, 38, 39, 123, 126, 128, 143, 145, 169, 309], "predic": [36, 43, 44, 45, 46, 60, 61, 134, 137, 138, 139, 140, 182, 208, 241, 309, 463, 725, 764, 804, 814, 835, 836, 844, 846, 849, 866, 867, 876, 878, 888, 905, 906, 927, 1082, 1213, 1216, 1325], "source_alia": [36, 309], "target_alia": [36, 309], "when_matched_update_al": [36, 309], "when_not_matched_insert_al": [36, 309], "execut": [36, 48, 49, 51, 53, 62, 122, 123, 214, 255, 309, 394, 513, 723, 814, 831, 840, 866, 867, 876, 891, 927, 931, 1132, 1313, 1325, 1333], "workbook": [37, 125, 131, 309], "worksheet": [37, 125, 131, 309], "posit": [37, 172, 178, 192, 195, 229, 246, 247, 248, 250, 254, 275, 282, 283, 287, 309, 353, 453, 455, 456, 457, 535, 592, 600, 637, 647, 661, 662, 675, 676, 677, 698, 707, 734, 735, 736, 739, 740, 741, 762, 793, 796, 814, 841, 845, 852, 855, 882, 883, 885, 886, 890, 898, 902, 903, 907, 927, 932, 967, 1072, 1074, 1075, 1154, 1188, 1220, 1244, 1258, 1281, 1325], "tupl": [37, 123, 125, 131, 162, 210, 216, 229, 241, 242, 243, 249, 271, 286, 309, 608, 814, 876, 888, 927, 932, 1195, 1325], "a1": [37, 55, 57, 309], "table_styl": [37, 309], "column_format": [37, 309], "columnformatdict": [37, 309], "dtype_format": [37, 309], "oneormoredatatyp": [37, 148, 309, 1115, 1325], "conditional_format": [37, 309], "conditionalformatdict": [37, 309], "header_format": [37, 309], "column_tot": [37, 309], "columntotalsdefinit": [37, 309], "column_width": [37, 309], "columnwidthsdefinit": [37, 309], "row_tot": [37, 309], "rowtotalsdefinit": [37, 309], "row_height": [37, 309], "sparklin": [37, 309], "sequenc": [37, 54, 83, 108, 110, 111, 112, 114, 120, 121, 122, 125, 129, 130, 131, 134, 138, 148, 149, 150, 151, 152, 164, 171, 178, 179, 212, 213, 222, 227, 229, 230, 231, 243, 254, 264, 266, 271, 272, 276, 277, 278, 309, 358, 368, 392, 470, 487, 543, 551, 553, 596, 600, 607, 647, 691, 692, 706, 718, 731, 736, 746, 747, 750, 751, 764, 766, 775, 776, 777, 786, 789, 794, 814, 830, 839, 845, 861, 862, 871, 875, 890, 896, 899, 927, 932, 972, 1007, 1008, 1078, 1162, 1188, 1194, 1217, 1290, 1325], "formula": [37, 309, 450, 814, 1069, 1325], "autofilt": [37, 309], "autofit": [37, 309], "hidden_column": [37, 309], "selectortyp": [37, 309, 932], "hide_gridlin": [37, 309], "sheet_zoom": [37, 309], "freeze_pan": [37, 309], "bytesio": [37, 38, 39, 42, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 309, 394, 814, 840, 927], "open": [37, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 309, 394, 814, 840, 927], "xlsxwriter": [37, 142, 309], "close": [37, 122, 193, 194, 196, 197, 240, 255, 309, 392, 482, 548, 600, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 644, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 880, 891, 927, 1007, 1096, 1188, 1228, 1325], "xlsx": [37, 125, 309], "work": [37, 70, 72, 121, 140, 236, 247, 283, 309, 320, 322, 324, 359, 373, 374, 457, 466, 513, 544, 553, 555, 575, 576, 578, 580, 582, 583, 592, 663, 667, 668, 682, 694, 720, 814, 883, 903, 927, 932, 936, 937, 973, 988, 991, 1084, 1132, 1163, 1246, 1250, 1251, 1265, 1277, 1310, 1325], "directori": [37, 42, 132, 309, 931], "sheet1": [37, 309], "medium": [37, 309], "kei": [37, 54, 59, 62, 132, 136, 139, 193, 210, 212, 213, 223, 229, 231, 235, 239, 242, 243, 277, 286, 309, 463, 555, 607, 796, 814, 846, 853, 861, 862, 872, 878, 879, 899, 927, 932, 1194, 1325], "follow": [37, 42, 59, 120, 121, 122, 124, 134, 135, 136, 143, 193, 213, 216, 230, 240, 267, 278, 309, 427, 431, 445, 454, 553, 596, 603, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 706, 719, 755, 756, 758, 759, 777, 801, 802, 804, 806, 807, 809, 814, 815, 816, 819, 821, 822, 823, 853, 862, 875, 880, 927, 1045, 1049, 1063, 1073, 1190, 1213, 1216, 1305, 1317, 1319, 1321, 1325, 1326, 1330, 1331, 1332, 1334], "first_column": [37, 309], "last_column": [37, 309], "banded_column": [37, 309], "banded_row": [37, 309], "sheet": [37, 125, 131, 309], "chart": [37, 309, 876, 927], "subsequ": [37, 52, 234, 268, 309, 543, 804, 844, 891, 927, 1306, 1325], "colnam": [37, 134, 175, 309, 843, 927], "given": [37, 47, 48, 54, 97, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 134, 138, 139, 145, 146, 147, 148, 150, 152, 153, 154, 155, 162, 164, 177, 178, 180, 193, 194, 196, 197, 208, 216, 229, 230, 240, 241, 242, 243, 250, 251, 254, 271, 272, 277, 309, 341, 353, 358, 368, 374, 400, 404, 434, 436, 437, 450, 454, 477, 482, 508, 535, 543, 546, 555, 592, 596, 603, 606, 608, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 637, 638, 660, 661, 673, 674, 693, 696, 703, 706, 718, 731, 762, 763, 772, 775, 776, 777, 786, 790, 791, 792, 814, 830, 845, 853, 854, 856, 857, 866, 867, 875, 880, 886, 887, 890, 896, 899, 909, 915, 927, 932, 939, 955, 967, 972, 991, 1014, 1018, 1052, 1054, 1055, 1069, 1071, 1073, 1091, 1096, 1118, 1127, 1154, 1162, 1165, 1168, 1170, 1181, 1190, 1195, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1214, 1220, 1221, 1243, 1244, 1256, 1257, 1276, 1279, 1286, 1312, 1316, 1325, 1333, 1334], "dd": [37, 309], "mm": [37, 309], "yyyi": [37, 309], "overridden": [37, 108, 110, 112, 114, 129, 130, 156, 309, 927], "basi": [37, 125, 150, 309], "param": [37, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 149, 150, 154, 241, 309, 927], "It": [37, 38, 43, 44, 45, 46, 53, 60, 61, 70, 72, 92, 132, 139, 140, 171, 223, 230, 255, 266, 271, 276, 277, 285, 295, 309, 391, 392, 431, 477, 555, 563, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 791, 792, 810, 814, 831, 835, 836, 839, 866, 867, 872, 891, 899, 906, 915, 927, 986, 1006, 1007, 1049, 1091, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1216, 1303, 1308, 1325], "float_dtyp": [37, 309], "simplifi": [37, 43, 44, 45, 46, 60, 61, 309, 835, 836, 844, 846, 876, 888, 927], "uniform": [37, 309, 600, 814, 1188, 1325], "condit": [37, 174, 182, 241, 309, 463, 482, 657, 686, 737, 764, 804, 814, 842, 849, 927, 1096, 1325], "typenam": [37, 309], "3_color_scal": [37, 309], "data_bar": [37, 309], "make": [37, 62, 83, 108, 113, 120, 121, 125, 126, 128, 132, 137, 223, 227, 234, 267, 278, 309, 455, 456, 477, 582, 583, 592, 606, 684, 814, 872, 927, 931, 1074, 1075, 1091, 1267, 1305, 1325, 1333], "icon": [37, 309], "multipl": [37, 50, 60, 61, 62, 120, 121, 125, 131, 134, 137, 138, 139, 148, 150, 154, 164, 172, 177, 179, 182, 192, 193, 201, 211, 229, 231, 243, 246, 248, 254, 272, 277, 282, 287, 309, 367, 368, 516, 541, 560, 564, 572, 573, 592, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 647, 704, 717, 718, 736, 743, 750, 751, 764, 775, 776, 778, 783, 789, 794, 797, 804, 810, 814, 830, 835, 836, 841, 849, 852, 853, 882, 885, 890, 896, 899, 902, 907, 915, 927, 938, 968, 1071, 1078, 1135, 1156, 1160, 1175, 1194, 1195, 1230, 1325], "singl": [37, 48, 54, 60, 61, 62, 119, 120, 121, 122, 123, 125, 132, 134, 139, 148, 165, 172, 173, 174, 179, 188, 198, 208, 216, 229, 241, 243, 254, 266, 267, 286, 309, 324, 342, 374, 399, 427, 470, 473, 475, 509, 510, 516, 541, 553, 555, 604, 607, 608, 610, 647, 650, 663, 668, 682, 694, 725, 731, 736, 740, 741, 771, 776, 777, 794, 802, 814, 832, 835, 836, 841, 842, 890, 927, 932, 956, 991, 1013, 1045, 1078, 1089, 1128, 1129, 1135, 1191, 1194, 1195, 1197, 1233, 1246, 1251, 1265, 1277, 1299, 1305, 1325], "across": [37, 54, 123, 198, 218, 220, 225, 258, 309, 475, 728, 730, 746, 747, 749, 753, 779, 781, 784, 798, 814, 1089, 1325], "effect": [37, 185, 193, 196, 309, 409, 467, 555, 577, 579, 581, 755, 756, 814, 853, 856, 905, 906, 927, 1014, 1023], "heatmap": [37, 309], "min": [37, 42, 46, 171, 181, 225, 231, 240, 309, 376, 383, 388, 462, 592, 603, 612, 621, 622, 784, 793, 814, 839, 848, 880, 927, 931, 993, 999, 1003, 1008, 1081, 1190, 1204, 1325, 1334], "entir": [37, 60, 61, 125, 131, 255, 309, 835, 836, 927], "made": [37, 122, 309], "abov": [37, 143, 213, 231, 309, 804], "than": [37, 43, 44, 45, 46, 60, 61, 107, 112, 114, 120, 121, 122, 125, 131, 134, 140, 166, 192, 195, 210, 213, 216, 229, 241, 242, 244, 276, 295, 309, 467, 469, 472, 474, 482, 500, 530, 550, 553, 555, 567, 600, 611, 634, 644, 663, 667, 673, 674, 685, 694, 703, 742, 755, 777, 814, 835, 836, 852, 855, 862, 915, 927, 1096, 1149, 1170, 1188, 1198, 1212, 1228, 1246, 1250, 1256, 1257, 1268, 1277, 1286, 1305, 1325, 1334], "bold": [37, 309], "font_color": [37, 309], "702963": [37, 309], "total": [37, 177, 290, 309, 408, 412, 416, 419, 421, 426, 433, 438, 439, 440, 441, 442, 443, 444, 501, 522, 814, 910, 1022, 1026, 1033, 1036, 1039, 1044, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1071, 1120, 1141, 1325], "export": [37, 210, 211, 242, 243, 263, 266, 309, 810, 932], "sum": [37, 47, 177, 185, 192, 193, 208, 231, 240, 258, 287, 309, 384, 385, 390, 394, 450, 463, 543, 555, 563, 565, 566, 567, 568, 607, 612, 628, 629, 725, 727, 746, 748, 749, 750, 752, 753, 764, 777, 789, 798, 814, 835, 836, 840, 844, 846, 852, 853, 874, 876, 880, 884, 888, 907, 927, 931, 932, 1000, 1001, 1005, 1069, 1071, 1208, 1325], "must": [37, 72, 109, 110, 124, 135, 136, 140, 171, 178, 193, 194, 196, 197, 213, 223, 240, 241, 309, 392, 543, 553, 600, 607, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 804, 814, 839, 845, 853, 854, 856, 857, 862, 866, 867, 872, 880, 888, 927, 931, 1007, 1008, 1188, 1194, 1325], "funcnam": [37, 309], "averag": [37, 309, 453, 454, 455, 456, 603, 814, 1072, 1073, 1074, 1075, 1190, 1325], "count_num": [37, 309], "count": [37, 47, 140, 163, 171, 193, 227, 228, 240, 273, 278, 284, 300, 309, 325, 342, 351, 381, 386, 399, 454, 477, 501, 509, 510, 522, 528, 555, 574, 590, 612, 615, 617, 619, 621, 623, 626, 628, 630, 653, 654, 721, 723, 732, 738, 745, 773, 785, 814, 829, 839, 853, 874, 880, 905, 920, 927, 956, 965, 1008, 1013, 1073, 1091, 1120, 1128, 1129, 1141, 1147, 1177, 1183, 1236, 1237, 1311, 1313, 1325], "std_dev": [37, 309], "var": [37, 155, 309, 630, 631, 814, 927, 1325], "pixel": [37, 309], "unit": [37, 69, 71, 143, 144, 145, 146, 150, 154, 177, 309, 401, 403, 410, 436, 448, 454, 460, 549, 564, 693, 696, 722, 755, 756, 757, 758, 759, 760, 766, 814, 876, 927, 931, 932, 1015, 1017, 1024, 1054, 1066, 1071, 1073, 1079, 1168, 1276, 1279, 1312, 1325, 1334], "hand": [37, 120, 121, 134, 309, 531, 532, 533, 534, 1150, 1151, 1152, 1153], "side": [37, 193, 194, 196, 197, 240, 309, 482, 531, 532, 533, 534, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 880, 927, 931, 1096, 1150, 1151, 1152, 1153, 1214, 1325], "call": [37, 51, 53, 60, 61, 92, 113, 121, 122, 125, 143, 144, 145, 146, 150, 154, 159, 192, 193, 196, 214, 216, 240, 255, 267, 308, 309, 324, 382, 385, 399, 497, 555, 575, 576, 578, 580, 582, 583, 598, 640, 709, 738, 743, 810, 814, 835, 836, 844, 846, 852, 853, 854, 856, 857, 876, 880, 888, 891, 926, 927, 931, 932, 939, 1013, 1170, 1224, 1304, 1305, 1325], "ad": [37, 111, 125, 193, 196, 273, 277, 282, 283, 309, 323, 460, 746, 747, 750, 751, 814, 853, 856, 899, 902, 903, 927, 1007, 1079, 1188, 1325], "wise": [37, 54, 122, 185, 309, 326, 327, 328, 329, 330, 331, 377, 378, 379, 458, 547, 641, 642, 643, 714, 715, 750, 751, 764, 789, 814, 940, 941, 942, 943, 944, 945, 995, 996, 997, 1076, 1166, 1167, 1225, 1226, 1227, 1297, 1298, 1325], "particip": [37, 309], "distinct": [37, 154, 229, 286, 309, 359, 485, 486, 489, 490, 544, 603, 611, 760, 814, 973, 1101, 1102, 1107, 1108, 1163, 1190, 1198, 1325, 1334], "referenc": [37, 309, 706], "differ": [37, 120, 125, 140, 143, 145, 179, 193, 198, 210, 240, 242, 243, 263, 266, 267, 273, 309, 395, 407, 427, 428, 430, 446, 452, 467, 475, 511, 531, 533, 543, 555, 584, 585, 587, 607, 693, 721, 763, 766, 772, 786, 814, 844, 853, 880, 927, 932, 985, 1009, 1021, 1045, 1046, 1048, 1064, 1070, 1078, 1089, 1130, 1150, 1152, 1170, 1179, 1180, 1194, 1215, 1276, 1325], "row_index": [37, 309], "height": [37, 150, 174, 309], "intersect": [37, 309, 532, 932, 1151], "bodi": [37, 309], "start": [37, 118, 120, 121, 123, 126, 128, 131, 132, 134, 137, 138, 139, 156, 187, 192, 193, 195, 196, 214, 253, 260, 278, 284, 285, 309, 362, 365, 366, 399, 407, 422, 428, 431, 445, 446, 457, 471, 517, 536, 611, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 645, 651, 657, 660, 674, 682, 686, 688, 690, 691, 694, 703, 713, 733, 738, 746, 750, 754, 755, 756, 757, 758, 759, 762, 764, 770, 771, 801, 802, 804, 814, 851, 852, 853, 855, 856, 876, 889, 895, 905, 906, 927, 932, 979, 1013, 1015, 1018, 1021, 1024, 1025, 1032, 1035, 1038, 1040, 1043, 1046, 1049, 1054, 1063, 1064, 1086, 1136, 1155, 1198, 1229, 1240, 1243, 1257, 1265, 1269, 1271, 1273, 1277, 1286, 1296, 1325, 1334], "unless": [37, 54, 110, 266, 271, 309, 688, 689, 790, 927, 1271, 1315, 1325], "marker": [37, 309], "compliant": [37, 309], "case": [37, 53, 54, 61, 108, 110, 111, 112, 114, 122, 129, 130, 138, 139, 156, 162, 179, 193, 194, 196, 197, 210, 216, 231, 240, 242, 243, 263, 266, 267, 309, 400, 454, 552, 553, 563, 564, 576, 612, 615, 617, 619, 621, 623, 626, 628, 630, 651, 652, 660, 662, 676, 677, 678, 814, 836, 853, 854, 856, 857, 880, 927, 931, 932, 1014, 1073, 1078, 1234, 1235, 1243, 1245, 1259, 1260, 1261, 1303, 1325], "three": [37, 240, 270, 309, 392, 600, 612, 635, 663, 694, 814, 880, 927, 972, 1007, 1162, 1188, 1246, 1277, 1325], "avail": [37, 38, 117, 122, 123, 124, 135, 136, 148, 159, 231, 255, 308, 309, 603, 806, 807, 809, 813, 814, 815, 816, 819, 820, 821, 822, 823, 826, 846, 891, 926, 927, 931, 932, 1008, 1190, 1317, 1319, 1321, 1325, 1326, 1330, 1331, 1332, 1333], "insert_befor": [37, 309], "insert_aft": [37, 309], "respect": [37, 309, 652, 678, 932, 1235, 1261, 1308, 1325], "direct": [37, 123, 132, 136, 139, 143, 250, 266, 276, 309, 353, 535, 637, 814, 886, 927, 967, 1154, 1220, 1325], "far": [37, 309], "strongli": [37, 156, 216, 241, 295, 309, 555, 814, 1170, 1325], "advis": [37, 53, 92, 214, 309], "structur": [37, 38, 97, 98, 105, 179, 230, 243, 267, 309, 596, 814, 875, 927, 1078, 1325], "wherev": [37, 216, 295, 309, 555, 814, 1170, 1325], "possibl": [37, 97, 110, 111, 114, 120, 125, 147, 150, 154, 164, 192, 195, 210, 216, 242, 272, 274, 295, 309, 549, 555, 563, 614, 685, 722, 814, 830, 852, 855, 890, 896, 897, 927, 1170, 1200, 1268, 1325], "simpl": [37, 227, 309], "colx": [37, 52, 309, 582, 583, 932, 1334], "coli": [37, 309, 582, 583, 932, 1334], "after": [37, 52, 62, 111, 118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 179, 275, 308, 309, 457, 554, 592, 603, 703, 814, 898, 927, 1078, 1169, 1190, 1286, 1325], "befor": [37, 68, 69, 120, 122, 125, 134, 140, 143, 144, 145, 146, 156, 159, 179, 193, 196, 213, 255, 266, 271, 275, 309, 384, 385, 391, 553, 554, 592, 593, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 703, 710, 791, 792, 814, 853, 856, 859, 862, 898, 927, 931, 1000, 1001, 1006, 1078, 1169, 1184, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1286, 1293, 1325], "most": [37, 49, 108, 120, 121, 123, 134, 143, 144, 145, 146, 267, 309, 564, 572, 593, 685, 814, 1175, 1184, 1268, 1305, 1325, 1333], "mandatori": [37, 309], "return_dtyp": [37, 162, 216, 309, 324, 551, 553, 554, 555, 607, 726, 731, 775, 776, 777, 814, 939, 1169, 1170, 1194, 1325], "latter": [37, 179, 309, 1078, 1325], "appropri": [37, 140, 267, 309, 603, 814, 1190, 1325], "pure": [37, 309], "actual": [37, 111, 150, 154, 243, 309, 1223, 1325], "indic": [37, 68, 69, 71, 84, 118, 120, 121, 122, 126, 128, 132, 134, 139, 147, 148, 154, 193, 194, 196, 197, 240, 243, 248, 250, 264, 309, 335, 353, 470, 477, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 516, 535, 541, 559, 560, 561, 562, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 637, 641, 712, 736, 737, 786, 814, 853, 854, 856, 857, 880, 885, 886, 927, 931, 932, 967, 1085, 1091, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1135, 1154, 1160, 1213, 1214, 1217, 1220, 1225, 1295, 1300, 1325, 1334], "calcul": [37, 54, 171, 193, 256, 279, 309, 395, 453, 454, 455, 456, 498, 511, 531, 538, 545, 549, 625, 644, 649, 722, 724, 742, 744, 791, 792, 795, 803, 814, 839, 853, 892, 900, 927, 1008, 1009, 1072, 1073, 1074, 1075, 1119, 1130, 1150, 1206, 1228, 1232, 1314, 1325], "individu": [37, 46, 159, 240, 266, 267, 271, 309, 555, 660, 814, 835, 880, 927, 989, 1243, 1325], "gridlin": [37, 309], "zoom": [37, 309], "freez": [37, 309], "pane": [37, 309], "top": [37, 272, 309, 718, 814, 896, 927], "index": [37, 109, 113, 116, 120, 121, 126, 128, 132, 134, 137, 138, 139, 142, 161, 183, 187, 189, 193, 194, 196, 197, 202, 203, 208, 210, 231, 237, 238, 240, 241, 242, 250, 253, 260, 266, 267, 269, 277, 278, 284, 285, 309, 318, 332, 333, 334, 336, 339, 340, 345, 353, 358, 454, 470, 471, 473, 505, 506, 516, 517, 518, 535, 536, 541, 543, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 635, 637, 645, 651, 659, 662, 663, 682, 694, 704, 712, 713, 736, 770, 773, 814, 851, 853, 854, 856, 857, 880, 886, 889, 895, 899, 905, 906, 927, 932, 946, 947, 948, 949, 950, 953, 954, 959, 967, 972, 1073, 1085, 1086, 1118, 1124, 1125, 1135, 1136, 1137, 1154, 1155, 1160, 1162, 1181, 1213, 1214, 1217, 1220, 1229, 1242, 1245, 1246, 1265, 1277, 1295, 1296, 1325], "thu": [37, 179, 309, 742, 1078, 1325], "altern": [37, 309, 810], "a2": [37, 55, 57, 309], "occur": [37, 60, 61, 309, 342, 509, 510, 572, 603, 814, 835, 836, 844, 846, 876, 888, 927, 956, 1128, 1129, 1175, 1190, 1305, 1325], "equival": [37, 108, 110, 111, 112, 114, 124, 129, 130, 138, 193, 208, 227, 309, 317, 321, 451, 452, 454, 467, 472, 474, 500, 550, 571, 573, 586, 587, 588, 591, 597, 668, 708, 719, 726, 814, 853, 927, 1073, 1118, 1251, 1282, 1284, 1285, 1325], "top_row": [37, 309], "top_col": [37, 309], "base": [37, 67, 100, 152, 174, 182, 193, 194, 196, 197, 240, 309, 400, 409, 450, 453, 454, 455, 456, 463, 477, 481, 546, 547, 553, 555, 600, 607, 612, 616, 618, 620, 622, 624, 627, 629, 631, 675, 698, 814, 842, 849, 853, 854, 856, 857, 880, 927, 932, 1014, 1023, 1069, 1072, 1073, 1074, 1075, 1091, 1095, 1165, 1166, 1170, 1188, 1194, 1258, 1281, 1316, 1325, 1334], "scroll": [37, 309], "region": [37, 136, 309], "initi": [37, 83, 159, 309, 746, 750, 764, 804, 1333], "5th": [37, 309], "properti": [37, 161, 168, 175, 184, 200, 245, 249, 281, 285, 309, 837, 843, 881, 901, 906, 927, 932, 1325, 1334], "readthedoc": [37, 309], "html": [37, 38, 39, 109, 122, 126, 128, 161, 169, 309], "definit": [37, 309, 498, 814, 932, 1119, 1325], "take": [37, 125, 131, 150, 151, 159, 185, 187, 193, 196, 220, 223, 230, 231, 235, 260, 309, 334, 399, 427, 463, 470, 471, 516, 517, 577, 579, 581, 647, 713, 736, 738, 755, 756, 761, 763, 772, 786, 814, 851, 853, 856, 872, 878, 895, 927, 948, 1013, 1045, 1085, 1086, 1135, 1136, 1296, 1316, 1325], "care": [37, 309, 324, 555, 636, 814, 1218, 1325], "rel": [37, 123, 124, 135, 136, 143, 144, 145, 146, 309, 427, 453, 455, 456, 619, 623, 626, 630, 814, 1045, 1072, 1074, 1075, 1325], "working_with_conditional_format": [37, 309], "similarli": [37, 111, 193, 213, 240, 278, 309, 427, 431, 445, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063], "well": [37, 120, 121, 122, 134, 309, 482, 814, 1096, 1325], "adjac": [37, 309], "two": [37, 52, 53, 91, 92, 110, 112, 114, 123, 185, 213, 222, 223, 231, 242, 255, 270, 288, 295, 309, 318, 396, 403, 467, 470, 473, 543, 600, 646, 734, 735, 742, 744, 791, 792, 814, 871, 872, 891, 908, 915, 927, 932, 972, 1010, 1017, 1162, 1188, 1325], "help": [37, 143, 144, 145, 146, 309, 312, 846, 927, 1325, 1329], "where": [37, 47, 54, 122, 123, 125, 174, 179, 193, 210, 222, 242, 255, 256, 266, 271, 277, 279, 309, 335, 447, 450, 452, 454, 538, 545, 587, 606, 635, 644, 647, 649, 678, 724, 737, 742, 744, 791, 792, 795, 803, 804, 814, 842, 853, 871, 891, 892, 899, 900, 927, 949, 1065, 1069, 1073, 1078, 1214, 1228, 1232, 1261, 1314, 1316, 1325, 1333], "appear": [37, 66, 111, 309, 721, 814, 932, 1311, 1325], "working_with_sparklin": [37, 309], "inject": [37, 54, 309], "locat": [37, 179, 237, 238, 269, 275, 309, 635, 814, 898, 927, 1078, 1085, 1213, 1214, 1217, 1295, 1325], "syntax": [37, 182, 216, 227, 309, 651, 659, 660, 662, 676, 677, 770, 771, 810, 849, 888, 927, 1234, 1242, 1243, 1245, 1259, 1260, 1325], "correctli": [37, 125, 309, 553, 814], "microsoft": [37, 309], "com": [37, 123, 309, 453, 455, 456, 659, 660, 661, 814, 1072, 1074, 1075, 1242, 1243, 1244, 1325], "u": [37, 50, 69, 71, 139, 152, 213, 309, 401, 403, 410, 436, 448, 693, 696, 728, 730, 755, 756, 757, 758, 759, 760, 766, 932, 1015, 1017, 1024, 1054, 1066, 1276, 1279], "offic": [37, 309], "f5ed2452": [37, 309], "2337": [37, 309], "4f71": [37, 309], "bed3": [37, 309], "c8ae6d2b276": [37, 309], "basic": [37, 309, 1334], "random": [37, 38, 126, 141, 148, 198, 244, 309, 475, 530, 603, 634, 640, 723, 814, 826, 1089, 1149, 1190, 1212, 1224, 1313, 1325], "dtm": [37, 309, 403, 932, 1017], "500": [37, 277, 309, 405, 406, 411, 415, 418, 420, 425, 432, 435, 846, 899, 927, 1032, 1035, 1043, 1201, 1202, 1204, 1325], "val": [37, 239, 309, 555, 596, 716, 804, 814, 879, 927], "10_000": [37, 309], "20_000": [37, 309], "30_000": [37, 309], "increas": [37, 54, 120, 131, 132, 139, 309, 391, 611, 814, 1006, 1198, 1325], "b4": [37, 309], "light": [37, 309], "twice": [37, 309], "titl": [37, 47, 309], "explicit": [37, 122, 134, 148, 255, 277, 309, 789, 891, 899, 927], "integr": [37, 271, 309, 1334], "multi_fram": [37, 309], "wb": [37, 309], "coordin": [37, 309], "advanc": [37, 125, 231, 309, 358, 543, 575, 578, 580, 582, 583, 972, 1162, 1334], "min_color": [37, 309], "76933c": [37, 309], "mid_color": [37, 309], "c4d79b": [37, 309], "max_color": [37, 309], "ebf1d": [37, 309], "data_bar_2010": [37, 309], "bar_color": [37, 309], "9bbb59": [37, 309], "bar_negative_color_sam": [37, 309], "bar_negative_border_color_sam": [37, 309], "white": [37, 309], "w": [37, 49, 50, 122, 193, 196, 243, 309, 654, 659, 661, 728, 730, 853, 856, 927, 932, 1237, 1242, 1244, 1272], "get_worksheet_by_nam": [37, 309], "fmt_titl": [37, 309], "add_format": [37, 309], "4f6228": [37, 309], "font_siz": [37, 309], "ital": [37, 309], "customis": [37, 309], "trend": [37, 309], "win_loss": [37, 309], "subtl": [37, 309], "tone": [37, 309], "hidden": [37, 309], "q1": [37, 309], "55": [37, 56, 309], "35": [37, 309, 395, 757, 814, 1009, 1325], "q2": [37, 309], "30": [37, 171, 179, 193, 201, 230, 236, 238, 262, 282, 309, 332, 333, 334, 395, 403, 405, 406, 411, 415, 418, 420, 422, 423, 425, 429, 430, 431, 432, 435, 438, 445, 446, 475, 639, 757, 774, 800, 801, 814, 839, 853, 875, 902, 927, 932, 1009, 1017, 1041, 1048, 1049, 1056, 1063, 1325, 1334], "60": [37, 179, 309, 411, 418, 420, 432, 444, 467, 628, 629, 693, 814, 1046, 1050, 1062, 1192, 1276, 1325], "q3": [37, 309], "40": [37, 171, 179, 213, 230, 309, 431, 445, 475, 545, 697, 707, 814, 839, 875, 927, 932, 1028, 1063, 1164, 1280], "80": [37, 309], "q4": [37, 309], "75": [37, 171, 309, 321, 591, 600, 615, 617, 619, 621, 626, 628, 630, 777, 814, 839, 927, 932, 1008, 1091, 1119, 1188, 1325, 1334], "account": [37, 115, 123, 136, 309, 427, 453, 455, 456, 814, 1045, 1072, 1074, 1075, 1325], "flavour": [37, 122, 309], "integer_dtyp": [37, 246, 309, 882, 927, 932], "0_": [37, 309], "just": [37, 113, 122, 134, 222, 309, 871, 927], "unifi": [37, 266, 271, 309, 932], "2_color_scal": [37, 309], "95b3d7": [37, 309], "ffffff": [37, 309], "standardis": [37, 309], "z": [37, 49, 62, 83, 115, 148, 177, 205, 207, 212, 222, 242, 243, 273, 276, 309, 317, 319, 321, 475, 507, 552, 555, 576, 578, 580, 582, 583, 591, 598, 606, 607, 652, 660, 678, 693, 696, 709, 728, 730, 749, 779, 781, 784, 790, 798, 814, 861, 871, 889, 891, 927, 932, 1081, 1194, 1235, 1243, 1261, 1276, 1279, 1325, 1333], "score": [37, 309], "conjunct": [37, 91, 122, 125, 131, 148, 309, 770, 773], "a123": [37, 309], "b345": [37, 309], "c567": [37, 309], "d789": [37, 309], "e101": [37, 309], "45": [37, 171, 240, 309, 403, 431, 445, 612, 628, 629, 654, 660, 705, 734, 735, 757, 774, 800, 801, 814, 839, 880, 927, 932, 1017, 1049, 1063, 1237, 1243, 1289, 1334], "85": [37, 309, 1119, 1325, 1334], "font": [37, 309], "consola": [37, 309], "stdev": [37, 309], "ipccompress": [38, 39, 309], "futur": [38, 61, 125, 161, 171, 217, 219, 224, 257, 309, 755, 836, 839, 927, 1315, 1325], "arrow": [38, 39, 44, 108, 122, 123, 126, 128, 137, 210, 242, 243, 261, 263, 267, 309, 927, 1299, 1305, 1325], "ipc": [38, 39, 44, 126, 127, 128, 137, 140, 309, 826, 927], "binari": [38, 122, 125, 309, 362, 363, 364, 365, 366, 655, 932, 975, 976, 978, 979, 1238], "feather": [38, 126, 137, 309, 826], "access": [38, 55, 56, 57, 58, 126, 132, 136, 137, 139, 161, 210, 241, 242, 309, 661, 704, 904, 927, 1244, 1334], "lz4": [38, 39, 42, 44, 46, 309, 927], "zstd": [38, 39, 42, 44, 46, 309, 927], "intern": [38, 122, 141, 210, 309, 467, 814, 1333], "might": [38, 120, 121, 134, 156, 164, 267, 272, 309, 324, 555, 721, 814, 830, 890, 896, 927], "implement": [38, 42, 109, 122, 161, 198, 216, 295, 309, 312, 475, 497, 555, 575, 576, 578, 580, 582, 583, 598, 704, 709, 777, 814, 915, 1089, 1170, 1213, 1216, 1325, 1329], "unstabl": [38, 43, 44, 45, 46, 60, 61, 70, 72, 122, 132, 139, 140, 255, 266, 271, 276, 277, 309, 391, 392, 431, 477, 555, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 791, 792, 814, 835, 836, 891, 899, 927, 986, 1006, 1007, 1049, 1091, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1303, 1308, 1325], "break": [38, 43, 44, 45, 46, 60, 61, 70, 72, 132, 139, 140, 255, 266, 271, 276, 277, 278, 309, 324, 391, 392, 431, 445, 477, 555, 600, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 791, 792, 814, 835, 836, 891, 899, 927, 984, 986, 1006, 1007, 1049, 1063, 1091, 1188, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1303, 1308, 1325], "batch": [39, 60, 61, 117, 121, 122, 128, 138, 140, 242, 271, 309, 835, 836, 866, 867, 927], "iobas": [40, 41, 129, 130, 309, 394, 566, 569, 814, 840, 884, 927], "pretti": [40, 309], "row_ori": [40, 309], "serial": [40, 41, 309, 394, 569, 814, 840, 927], "orient": [40, 55, 57, 112, 114, 309, 927], "slower": [40, 112, 114, 125, 192, 195, 216, 229, 278, 295, 309, 555, 777, 814, 852, 855, 915, 927, 1170, 1325], "common": [40, 54, 60, 61, 62, 120, 121, 134, 277, 309, 552, 576, 814, 820, 835, 836, 844, 846, 876, 888, 899, 927], "write_ndjson": [40, 309], "bit_set": [40, 309, 884, 927], "newlin": [41, 130, 138, 309], "delimit": [41, 43, 130, 138, 231, 264, 309, 650, 927, 1233, 1300, 1325], "parquetcompress": [42, 309], "compression_level": [42, 46, 309, 927], "statist": [42, 46, 120, 121, 132, 139, 171, 309, 455, 456, 498, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 644, 814, 839, 927, 1008, 1074, 1075, 1119, 1206, 1228, 1325], "row_group_s": [42, 46, 309, 927], "data_page_s": [42, 309], "use_pyarrow": [42, 120, 126, 128, 132, 267, 309, 1304, 1305, 1325], "pyarrow_opt": [42, 124, 132, 135, 309], "parquet": [42, 46, 132, 133, 139, 309, 826, 927], "gzip": [42, 46, 309, 927], "lzo": [42, 46, 309, 927], "brotli": [42, 46, 309, 927], "choos": [42, 44, 46, 193, 231, 309, 853, 927], "good": [42, 44, 46, 210, 309, 927], "fast": [42, 44, 46, 153, 155, 309, 460, 636, 814, 927, 931, 1079, 1218, 1325, 1334], "decompress": [42, 44, 46, 309, 927], "backward": [42, 46, 181, 213, 309, 361, 399, 424, 462, 814, 848, 862, 927, 1013, 1042, 1081, 1325], "guarante": [42, 46, 120, 121, 171, 198, 274, 309, 475, 814, 839, 846, 897, 927, 1088, 1089, 1325], "deal": [42, 46, 210, 309, 320, 322, 430, 431, 445, 603, 693, 696, 727, 728, 729, 730, 757, 814, 927, 936, 937, 1048, 1049, 1063, 1190, 1276, 1279, 1325], "older": [42, 46, 309, 927], "reader": [42, 46, 117, 120, 121, 125, 126, 128, 132, 309, 927], "higher": [42, 46, 171, 233, 301, 309, 601, 623, 624, 788, 814, 839, 877, 921, 927, 1008, 1189, 1205, 1325], "mean": [42, 46, 120, 121, 126, 134, 171, 181, 192, 193, 213, 220, 231, 240, 278, 287, 309, 427, 431, 445, 459, 462, 467, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 644, 650, 659, 755, 756, 758, 759, 760, 781, 801, 802, 804, 814, 839, 848, 852, 853, 862, 866, 867, 880, 907, 927, 1008, 1045, 1049, 1063, 1077, 1081, 1088, 1202, 1228, 1233, 1242, 1325], "smaller": [42, 46, 177, 309, 846, 927, 1071, 1325], "disk": [42, 43, 44, 45, 46, 126, 309, 888, 927], "22": [42, 46, 142, 150, 309, 407, 428, 431, 445, 447, 448, 614, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 693, 757, 814, 927, 932, 1049, 1063, 1066, 1200, 1276, 1325, 1334], "behavior": [42, 46, 174, 212, 309, 345, 469, 516, 518, 541, 554, 763, 772, 786, 814, 842, 861, 927, 959, 1007, 1135, 1137, 1160, 1169, 1188, 1325], "512": [42, 122, 210, 309, 597, 814, 1184, 1325], "page": [42, 46, 126, 132, 137, 139, 309, 814, 826, 927, 1325], "At": [42, 309], "moment": [42, 169, 309, 498, 644, 814, 1119, 1228, 1325], "write_t": [42, 309], "partition_col": [42, 123, 309], "write_to_dataset": [42, 309], "spark": [42, 309], "partit": [42, 123, 124, 132, 135, 139, 140, 211, 229, 309], "we": [42, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 171, 193, 213, 240, 278, 309, 394, 427, 431, 445, 477, 513, 543, 553, 555, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 661, 675, 698, 754, 755, 756, 757, 758, 759, 774, 801, 802, 804, 814, 839, 840, 853, 862, 866, 867, 880, 927, 939, 1045, 1049, 1063, 1091, 1132, 1170, 1244, 1258, 1281, 1325], "use_pyarrow_write_to_dataset": [42, 309], "first": [42, 54, 120, 121, 125, 126, 128, 132, 134, 143, 144, 145, 146, 162, 191, 193, 196, 199, 213, 215, 216, 226, 230, 231, 240, 259, 264, 265, 273, 274, 278, 285, 292, 309, 334, 336, 345, 391, 395, 424, 427, 431, 448, 467, 476, 485, 486, 502, 511, 513, 518, 519, 543, 553, 554, 555, 564, 596, 612, 635, 647, 651, 659, 662, 663, 664, 666, 676, 677, 694, 739, 746, 764, 768, 804, 814, 835, 853, 856, 858, 862, 865, 875, 880, 897, 904, 906, 912, 927, 932, 948, 959, 1006, 1008, 1009, 1042, 1045, 1049, 1066, 1090, 1101, 1102, 1121, 1130, 1132, 1137, 1138, 1162, 1169, 1170, 1214, 1230, 1242, 1244, 1245, 1246, 1247, 1249, 1259, 1260, 1277, 1294, 1300, 1302, 1305, 1325, 1334], "watermark": [42, 309], "partitioned_object": [42, 309], "maintain_ord": [43, 44, 45, 46, 164, 192, 195, 229, 231, 254, 272, 274, 278, 288, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 318, 359, 367, 368, 470, 473, 544, 555, 647, 717, 718, 720, 736, 814, 830, 836, 844, 846, 852, 855, 876, 888, 890, 896, 897, 908, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 973, 1163, 1310, 1325], "type_coercion": [43, 44, 45, 46, 60, 61, 835, 836, 844, 846, 876, 888, 927], "predicate_pushdown": [43, 44, 45, 46, 60, 61, 835, 836, 844, 846, 866, 867, 876, 888, 927], "projection_pushdown": [43, 44, 45, 46, 60, 61, 835, 836, 844, 846, 866, 867, 876, 888, 927], "simplify_express": [43, 44, 45, 46, 60, 61, 835, 836, 844, 846, 876, 888, 927], "slice_pushdown": [43, 44, 45, 46, 60, 61, 835, 836, 844, 846, 866, 867, 876, 888, 927], "no_optim": [43, 44, 45, 46, 60, 61, 835, 836, 846, 866, 867, 876, 927], "evalu": [43, 44, 45, 46, 180, 182, 213, 309, 321, 335, 337, 338, 391, 463, 479, 503, 504, 543, 591, 727, 729, 733, 737, 755, 756, 758, 759, 761, 770, 771, 787, 790, 796, 801, 802, 804, 805, 814, 835, 849, 859, 861, 862, 927, 949, 951, 952, 1006, 1122, 1123, 1316, 1325], "queri": [43, 44, 45, 46, 47, 49, 60, 61, 122, 123, 126, 134, 137, 138, 139, 179, 214, 230, 255, 309, 553, 555, 666, 814, 835, 836, 844, 846, 858, 865, 876, 888, 891, 905, 906, 909, 915, 927, 1078, 1170, 1249, 1325, 1333], "ram": [43, 44, 45, 46, 927], "maintain": [43, 44, 45, 46, 164, 254, 272, 309, 359, 367, 368, 544, 635, 647, 717, 718, 720, 736, 814, 830, 839, 890, 896, 927, 973, 1163, 1214, 1310, 1325], "slightli": [43, 44, 45, 46, 467, 814, 927], "faster": [43, 44, 45, 46, 122, 125, 179, 267, 276, 309, 324, 555, 721, 814, 927, 939, 1078, 1170, 1325], "coercion": [43, 44, 45, 46, 60, 61, 606, 814, 835, 836, 844, 846, 876, 888, 927], "optim": [43, 44, 45, 46, 60, 61, 132, 134, 137, 138, 139, 210, 214, 230, 234, 242, 274, 309, 831, 835, 836, 844, 846, 866, 867, 876, 888, 897, 905, 906, 915, 927, 987, 1213, 1325], "pushdown": [43, 44, 45, 46, 60, 61, 835, 836, 844, 846, 866, 867, 876, 878, 888, 905, 906, 927, 1213, 1216, 1325], "project": [43, 44, 45, 46, 60, 61, 134, 136, 137, 138, 139, 324, 646, 647, 814, 835, 836, 844, 846, 866, 867, 876, 878, 884, 888, 927], "run": [43, 44, 45, 46, 60, 61, 69, 122, 150, 153, 154, 155, 192, 195, 214, 216, 231, 247, 274, 283, 295, 309, 324, 391, 513, 553, 555, 610, 611, 668, 793, 814, 835, 836, 844, 846, 852, 855, 866, 867, 871, 876, 883, 888, 897, 903, 927, 932, 1006, 1132, 1170, 1197, 1198, 1251, 1325, 1333, 1334], "slice": [43, 44, 45, 46, 55, 60, 61, 177, 199, 211, 259, 309, 519, 540, 555, 563, 565, 613, 615, 617, 619, 621, 623, 626, 628, 630, 663, 694, 814, 835, 836, 844, 846, 866, 867, 876, 888, 927, 931, 1071, 1090, 1138, 1159, 1199, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1246, 1277, 1294, 1325], "off": [43, 44, 45, 46, 60, 61, 120, 121, 134, 399, 738, 835, 836, 844, 846, 866, 867, 876, 927, 1013], "certain": [43, 44, 45, 46, 61, 124, 135, 202, 203, 278, 309, 689, 690, 835, 836, 876, 927, 1325], "lf": [43, 44, 45, 46, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 882, 884, 886, 888, 889, 890, 892, 893, 894, 896, 897, 899, 900, 901, 902, 904, 905, 906, 910, 914, 927, 1333, 1334], "scan_csv": [43, 44, 45, 46, 120, 121, 927], "my_larger_than_ram_fil": [43, 44, 45, 46, 927], "ndjson": [45, 927], "data_pagesize_limit": [46, 927], "reduc": [46, 120, 121, 132, 134, 137, 138, 139, 242, 296, 297, 299, 302, 309, 639, 747, 764, 814, 916, 917, 919, 922, 927, 1172, 1187, 1222, 1293, 1325], "pressur": [46, 120, 121, 132, 134, 138, 139, 639, 814, 927, 1222, 1325], "speed": [46, 324, 555, 814, 927, 1334], "eager": [47, 48, 49, 50, 51, 52, 193, 213, 231, 276, 309, 401, 404, 407, 410, 423, 424, 427, 428, 430, 431, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 733, 737, 755, 756, 758, 759, 766, 770, 771, 787, 790, 796, 801, 802, 805, 813, 814, 853, 867, 927, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1333], "eagerli": [47, 543], "init": [47, 159], "eager_execut": [47, 1333], "itself": [47, 148, 309, 312, 555, 614, 615, 617, 619, 621, 623, 625, 626, 628, 630, 791, 792, 814, 864, 927, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1325, 1329, 1333], "impact": [47, 193, 196, 309, 853, 856, 927, 1333], "declar": [47, 108, 110, 111, 112, 114, 122, 129, 130, 138, 266, 271, 309, 927, 932], "godfath": 47, "1972": 47, "6_000_000": 47, "134_821_952": 47, "dark": 47, "knight": 47, "2008": 47, "185_000_000": 47, "533_316_061": 47, "schindler": 47, "1993": 47, "22_000_000": 47, "96_067_179": 47, "pulp": 47, "fiction": 47, "1994": 47, "8_000_000": 47, "107_930_000": 47, "shawshank": 47, "redempt": 47, "25_000_000": 47, "28_341_469": 47, "release_year": 47, "budget": 47, "gross": 47, "imdb_scor": 47, "ctx": [47, 48, 49, 50, 51, 52], "film": 47, "1990": [47, 120], "BY": [47, 49, 891, 927], "desc": [47, 49], "AS": [47, 255, 309, 794, 891, 927, 1333], "decad": 47, "total_gross": 47, "n_film": 47, "2000": [47, 402, 413, 417, 423, 424, 427, 932, 1016, 1027, 1034, 1041, 1042, 1045, 1050], "533316061": 47, "232338648": 47, "1970": [47, 68, 69, 140], "134821952": 47, "register_glob": [48, 50, 52, 1333], "register_mani": [48, 49, 52], "unregist": [48, 49, 50, 1333], "frame_data": [48, 51], "collect": [48, 49, 52, 57, 60, 61, 134, 135, 136, 140, 150, 151, 154, 174, 214, 231, 255, 261, 274, 275, 309, 457, 487, 555, 740, 762, 766, 796, 814, 829, 830, 832, 833, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 858, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 884, 886, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 932, 1104, 1325, 1333, 1334], "global": [49, 53, 91, 92, 125, 141, 150, 158, 255, 309, 607, 814, 891, 927, 983, 985, 1194, 1325, 1333], "scope": [49, 52, 159, 825, 932, 1333], "map": [49, 50, 83, 110, 111, 120, 121, 122, 123, 126, 127, 132, 133, 134, 137, 150, 165, 175, 184, 210, 216, 235, 241, 242, 243, 262, 309, 319, 431, 445, 552, 553, 554, 555, 575, 577, 578, 580, 582, 583, 607, 723, 776, 814, 832, 843, 878, 927, 932, 1008, 1049, 1063, 1169, 1170, 1194, 1313, 1325, 1333], "recent": [49, 143, 144, 145, 146, 267, 309, 593, 814, 1184, 1305, 1325, 1333], "df1": [49, 51, 52, 54, 62, 143, 144, 176, 179, 223, 255, 280, 309, 872, 927], "df2": [49, 51, 52, 54, 62, 143, 144, 176, 179, 255, 280, 309], "join": [49, 53, 54, 60, 61, 62, 92, 182, 213, 255, 277, 309, 463, 480, 592, 814, 835, 836, 844, 846, 849, 862, 876, 888, 891, 899, 904, 927], "named_fram": [50, 1333], "lf1": [50, 52, 891, 927], "m": [50, 69, 71, 212, 309, 400, 401, 403, 409, 410, 434, 436, 437, 448, 659, 693, 695, 696, 700, 755, 756, 757, 758, 759, 760, 766, 861, 927, 932, 1014, 1015, 1017, 1023, 1024, 1052, 1054, 1055, 1066, 1242, 1276, 1278, 1279, 1283], "o": [50, 126, 137, 367, 368, 391, 658, 717, 718, 814, 980, 1006, 1241, 1271, 1309, 1325], "lf2": [50, 52, 891, 927], "p": [50, 56, 230, 309, 596, 796, 814, 875, 927, 932, 1245, 1246], "q": [50, 243, 309, 796], "r": [50, 120, 121, 134, 309, 596, 654, 658, 659, 660, 661, 676, 677, 814, 932, 1237, 1241, 1242, 1243, 1244, 1259, 1260, 1277], "lf3": [50, 927], "lf4": [50, 927], "either": [50, 83, 150, 208, 212, 213, 214, 217, 219, 224, 229, 240, 241, 257, 266, 267, 309, 454, 600, 607, 612, 693, 727, 736, 796, 814, 861, 862, 864, 880, 927, 931, 932, 1073, 1188, 1194, 1276, 1325, 1334], "tbl1": [50, 52], "tbl2": [50, 52], "arg": [50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 182, 230, 309, 334, 596, 736, 765, 814, 849, 875, 927, 931, 1170, 1325], "tbl3": 50, "tbl4": 50, "statement": [51, 804], "hello_world": 51, "baz": [51, 203, 204, 231, 275, 309, 661, 683, 685, 763, 772, 786, 810, 860, 898, 927, 932, 1244, 1268], "hello_data": 51, "foo_bar": [51, 559, 562, 683, 774], "registr": [52, 255, 309, 826, 891, 927], "lifetim": [52, 159, 825], "context": [52, 53, 91, 92, 156, 227, 255, 309, 318, 324, 463, 513, 553, 555, 563, 646, 647, 723, 731, 743, 745, 763, 766, 772, 773, 777, 786, 790, 793, 813, 814, 825, 826, 891, 904, 927, 1132, 1313, 1325, 1333], "manag": [52, 53, 91, 92, 825, 826, 1333], "often": [52, 123, 159, 193, 194, 196, 197, 240, 309, 342, 509, 510, 606, 612, 814, 853, 854, 856, 857, 880, 927, 956, 1128, 1129], "want": [52, 61, 111, 113, 125, 179, 216, 227, 309, 399, 463, 553, 555, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 652, 667, 678, 738, 746, 755, 764, 787, 790, 805, 814, 836, 858, 865, 927, 932, 1013, 1078, 1170, 1235, 1250, 1261, 1325], "df0": [52, 223, 309, 872, 927], "exit": [52, 53, 91, 159, 1333], "construct": [52, 53, 91, 92, 108, 110, 111, 112, 113, 114, 115, 122, 309, 469, 787, 790, 805, 810, 814, 840, 927, 983, 1325], "persist": 52, "through": [52, 109, 122, 810, 932, 1325, 1333], "tbl0": 52, "remain": [52, 120, 121, 134, 174, 177, 182, 231, 309, 397, 398, 463, 512, 607, 684, 685, 814, 842, 849, 866, 867, 927, 1011, 1012, 1071, 1082, 1131, 1194, 1267, 1268, 1325], "text": [52, 119, 122, 454, 663, 667, 668, 676, 677, 679, 682, 694, 794, 814, 1073, 1246, 1250, 1251, 1262, 1265, 1277, 1325, 1334], "misc": 52, "testing1234": 52, "test1": 52, "test2": 52, "test3": 52, "disabl": [53, 91, 92, 151, 210, 309, 835, 927], "cach": [53, 60, 61, 91, 92, 126, 134, 137, 139, 143, 144, 145, 146, 158, 607, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 693, 695, 696, 700, 814, 825, 835, 836, 844, 846, 876, 888, 927, 983, 1194, 1276, 1278, 1279, 1283, 1325], "under": [53, 55, 56, 57, 58, 91, 92, 255, 309, 394, 806, 807, 809, 810, 814, 815, 816, 819, 821, 822, 823, 840, 891, 927, 1317, 1319, 1321, 1326, 1330, 1331, 1332], "physic": [53, 66, 92, 120, 121, 213, 309, 371, 716, 814, 831, 861, 862, 927, 984, 985, 1307, 1325], "equal": [53, 92, 120, 121, 122, 134, 143, 144, 145, 146, 164, 186, 193, 196, 213, 223, 254, 272, 309, 367, 368, 392, 445, 451, 452, 454, 472, 500, 543, 587, 600, 606, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 647, 673, 674, 703, 717, 718, 736, 791, 792, 804, 810, 814, 830, 853, 856, 862, 872, 890, 896, 927, 1007, 1049, 1073, 1162, 1188, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1215, 1256, 1257, 1286, 1325, 1334], "concaten": [53, 62, 91, 92, 185, 230, 309, 596, 650, 740, 741, 814, 875, 927, 989, 1176, 1233, 1325], "introduc": [53, 92, 693, 695, 696, 1276, 1278, 1279], "overhead": [53, 92, 134, 137, 138, 139], "amount": [53, 71, 92, 324, 555, 760, 814], "depend": [53, 59, 92, 122, 142, 339, 340, 505, 506, 555, 563, 600, 603, 760, 763, 766, 772, 786, 814, 953, 954, 1124, 1125, 1188, 1190, 1325, 1334], "categori": [53, 72, 92, 264, 309, 370, 371, 392, 477, 600, 814, 982, 984, 1007, 1091, 1188, 1300, 1325], "nest": [53, 115, 151, 152, 177, 309, 826, 1071, 1325, 1333, 1334], "clear": [53, 91, 167, 309, 834, 927, 994, 1325], "outermost": 53, "s1": [53, 91, 92, 145, 146, 185, 309, 972, 1070, 1087, 1118, 1126, 1162, 1191, 1316, 1325], "color": [53, 91, 92, 295, 362, 363, 364, 365, 366, 655, 723, 814, 915, 975, 976, 977, 978, 979, 1238, 1313, 1325], "red": [53, 91, 92, 295, 723, 814, 915, 1313, 1325], "green": [53, 91, 92, 295, 723, 814, 915, 1313, 1325], "blue": [53, 91, 92, 362, 363, 364, 365, 366, 723, 814, 1313, 1325], "concat": [53, 91, 92, 96, 121, 213, 309, 989, 1087, 1176, 1191, 1325], "decor": [53, 55, 56, 57, 58, 150, 154, 216, 309, 555, 814, 825, 826, 1170, 1325], "dure": [53, 120, 121, 134, 159, 179, 309, 1078, 1325], "afterward": [53, 804], "construct_categor": 53, "frametyp": [54, 1333], "joinstrategi": [54, 212, 309, 861, 927], "descend": [54, 164, 248, 254, 272, 309, 334, 354, 368, 537, 603, 636, 646, 647, 718, 723, 736, 814, 830, 885, 890, 896, 927, 948, 968, 1114, 1156, 1190, 1218, 1230, 1313, 1325], "fill": [54, 62, 166, 180, 181, 250, 251, 276, 309, 361, 382, 385, 461, 462, 468, 480, 481, 615, 617, 621, 628, 637, 638, 670, 680, 765, 787, 790, 805, 814, 847, 848, 886, 887, 904, 927, 1080, 1081, 1094, 1095, 1181, 1201, 1202, 1204, 1207, 1208, 1209, 1220, 1221, 1253, 1263, 1325], "sort": [54, 55, 143, 144, 164, 193, 194, 196, 197, 213, 223, 230, 231, 240, 248, 272, 278, 292, 303, 309, 334, 367, 368, 371, 454, 463, 555, 592, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 636, 647, 717, 718, 723, 725, 736, 777, 814, 830, 844, 853, 854, 856, 857, 862, 872, 875, 876, 880, 885, 888, 896, 912, 923, 927, 932, 948, 984, 1073, 1114, 1218, 1310, 1313, 1325, 1334], "origin": [54, 120, 121, 134, 174, 182, 274, 309, 397, 398, 430, 431, 445, 463, 497, 512, 554, 575, 592, 605, 606, 607, 608, 610, 653, 654, 659, 666, 734, 735, 814, 842, 849, 897, 927, 1007, 1011, 1012, 1048, 1049, 1063, 1082, 1131, 1169, 1188, 1194, 1195, 1197, 1236, 1237, 1242, 1249, 1325], "In": [54, 61, 122, 124, 135, 136, 139, 150, 154, 159, 177, 179, 193, 194, 196, 197, 213, 216, 227, 240, 267, 309, 553, 555, 612, 755, 814, 836, 853, 854, 856, 857, 880, 927, 1071, 1078, 1191, 1325], "duplic": [54, 96, 205, 212, 213, 274, 277, 309, 319, 483, 497, 575, 600, 814, 861, 862, 897, 899, 927, 1098, 1188, 1325], "outer": [54, 62, 277, 309, 899, 927], "suitabl": [54, 62, 122, 148, 216, 309, 555, 635, 814, 1170, 1214, 1325], "get": [54, 61, 127, 133, 140, 164, 168, 175, 184, 188, 190, 193, 194, 196, 197, 199, 200, 205, 207, 208, 215, 218, 225, 226, 231, 240, 241, 245, 249, 253, 259, 268, 272, 281, 292, 303, 309, 318, 332, 333, 334, 336, 344, 347, 359, 368, 370, 382, 383, 384, 385, 386, 387, 388, 389, 390, 399, 410, 464, 470, 476, 496, 499, 502, 515, 521, 544, 556, 557, 558, 563, 565, 570, 584, 585, 594, 595, 601, 611, 612, 645, 649, 710, 711, 717, 718, 720, 724, 736, 738, 763, 768, 772, 777, 778, 779, 780, 782, 783, 784, 786, 795, 799, 803, 814, 830, 835, 836, 837, 843, 850, 853, 854, 856, 857, 858, 863, 865, 880, 881, 889, 894, 896, 901, 912, 923, 927, 931, 946, 947, 948, 949, 950, 958, 961, 973, 982, 989, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1013, 1024, 1068, 1083, 1087, 1090, 1096, 1098, 1116, 1121, 1134, 1140, 1163, 1171, 1173, 1174, 1176, 1178, 1179, 1180, 1185, 1186, 1189, 1198, 1229, 1232, 1294, 1300, 1306, 1310, 1314, 1315, 1325], "speedup": [54, 210, 216, 309, 555, 814, 1170, 1325], "receiv": [54, 122, 134, 216, 230, 295, 309, 555, 596, 814, 875, 927, 1334], "now": [54, 125, 240, 267, 309, 431, 445, 454, 814, 880, 927, 1049, 1063, 1279, 1305, 1325], "One": [54, 171, 227, 231, 266, 271, 309, 321, 591, 732, 743, 763, 769, 772, 780, 782, 785, 786, 794, 814, 839, 927, 932, 1008, 1325], "whose": [54, 213, 231, 309, 457, 762, 814, 862, 927, 932], "uniqu": [54, 147, 148, 149, 152, 154, 163, 207, 212, 227, 231, 243, 300, 309, 325, 336, 351, 392, 496, 528, 574, 600, 693, 695, 696, 700, 721, 723, 732, 785, 814, 829, 861, 920, 927, 931, 950, 965, 1007, 1116, 1147, 1177, 1188, 1276, 1278, 1279, 1283, 1311, 1313, 1325], "post": 54, "constrain": [54, 174, 309, 842, 927, 932], "newli": 54, "boolean": [54, 150, 164, 182, 185, 254, 272, 309, 320, 321, 322, 337, 338, 341, 362, 365, 366, 368, 413, 463, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 503, 504, 508, 589, 591, 594, 595, 647, 664, 718, 725, 726, 736, 737, 796, 804, 814, 830, 849, 890, 896, 927, 932, 936, 937, 949, 951, 952, 955, 975, 1027, 1082, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1122, 1123, 1127, 1182, 1185, 1186, 1216, 1234, 1316, 1325], "know": [54, 122, 231, 309, 543, 553, 814, 1315, 1325], "2022": [54, 165, 171, 191, 309, 403, 431, 445, 693, 755, 756, 758, 759, 760, 766, 832, 839, 927, 932, 1017, 1028, 1049, 1063, 1276], "df3": [54, 309], "set_tbl_format": 54, "09": [54, 120, 171, 240, 309, 399, 403, 423, 424, 612, 697, 754, 755, 757, 802, 814, 839, 880, 927, 932, 1013, 1280], "02": [54, 165, 171, 191, 193, 240, 278, 309, 399, 401, 403, 410, 423, 424, 427, 430, 436, 439, 442, 444, 448, 612, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 693, 695, 696, 700, 738, 754, 755, 756, 757, 758, 759, 760, 814, 832, 839, 853, 880, 927, 932, 972, 1015, 1017, 1019, 1020, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1048, 1049, 1053, 1054, 1057, 1060, 1062, 1063, 1162, 1276, 1278, 1279, 1283], "03": [54, 115, 120, 165, 193, 213, 240, 278, 309, 401, 403, 404, 410, 423, 424, 427, 430, 431, 434, 436, 437, 438, 439, 442, 444, 445, 448, 454, 467, 612, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 695, 700, 754, 755, 756, 757, 758, 759, 760, 814, 832, 853, 880, 927, 932, 1015, 1017, 1018, 1024, 1025, 1031, 1032, 1041, 1042, 1043, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1278, 1283], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 120, 121, 134, 274, 277, 278, 309, 469, 497, 554, 568, 576, 607, 739, 814, 897, 899, 927, 1169, 1194, 1325], "easili": [54, 246, 271, 282, 287, 309, 796, 882, 902, 907, 927], "dot": [54, 814, 888, 927, 1325], "product": [54, 169, 212, 309, 384, 389, 396, 814, 846, 861, 927, 1000, 1004, 1010, 1325], "fill_nul": [54, 180, 309, 461, 814, 847, 904, 927, 1080, 1325], "sum_horizont": [54, 257, 309, 797], "167": 54, "47": [54, 171, 309, 628, 629, 814, 839, 927, 932], "callabl": [55, 56, 57, 58, 134, 162, 185, 216, 230, 235, 289, 295, 309, 324, 358, 543, 551, 552, 553, 555, 576, 577, 596, 613, 614, 731, 746, 747, 750, 751, 764, 775, 776, 777, 789, 814, 866, 867, 875, 878, 909, 915, 927, 939, 972, 1162, 1170, 1199, 1200, 1325], "by_first_letter_of_column_nam": 55, "f": [55, 121, 122, 191, 211, 261, 267, 273, 276, 309, 317, 358, 543, 639, 658, 693, 696, 731, 740, 775, 814, 932, 972, 1162, 1241, 1276, 1279], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 362, 365, 651, 657, 891, 927, 932, 1240], "to_seri": [55, 188, 309, 693, 737, 790, 1276], "xy": [55, 57], "yz": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 193, 213, 240, 278, 309, 361, 399, 427, 431, 445, 603, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 984, 1013, 1045, 1049, 1063, 1190, 1325], "ceil": [56, 814, 1325], "previou": [56, 159, 399, 575, 576, 578, 580, 582, 583, 593, 598, 706, 709, 814, 1013, 1184, 1325], "floor": [56, 467, 814, 1325], "nearest": [56, 171, 213, 233, 301, 309, 373, 466, 480, 601, 623, 624, 788, 814, 839, 862, 877, 921, 927, 988, 1008, 1084, 1094, 1189, 1205, 1325], "24": [56, 142, 193, 213, 216, 240, 255, 278, 309, 384, 391, 407, 427, 428, 431, 439, 445, 447, 573, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 801, 802, 814, 853, 862, 880, 927, 1006, 1045, 1049, 1057, 1063, 1118, 1325], "001": [56, 703, 760, 1058, 1059, 1061, 1286], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "32": [56, 68, 73, 76, 86, 208, 213, 240, 309, 573, 612, 639, 814, 880, 927, 1010, 1046, 1184, 1205, 1325], "128": [56, 70, 1184, 1325], "split_by_column_dtyp": 57, "collect_al": [57, 61, 835, 836, 927], "31": [58, 171, 255, 309, 402, 403, 407, 417, 423, 427, 438, 693, 754, 757, 766, 774, 839, 927, 932, 1014, 1016, 1017, 1021, 1034, 1041, 1056, 1276, 1334], "42": [58, 171, 198, 223, 240, 309, 612, 814, 839, 872, 880, 927, 1089, 1325], "961": 58, "1764": 58, "4160": 58, "detail": [59, 109, 122, 123, 143, 145, 161, 193, 309, 853, 927, 1333, 1334], "build": [59, 109, 932, 1334], "compil": [59, 339, 340, 505, 506, 953, 954, 1124, 1125], "host": [59, 120, 126, 128, 137, 139], "git": 59, "flag": [59, 147, 267, 309, 636, 651, 659, 660, 662, 676, 677, 814, 844, 866, 867, 927, 932, 1218, 1234, 1242, 1243, 1245, 1259, 1260, 1305, 1325], "lazy_fram": [60, 61], "iter": [60, 61, 62, 72, 108, 122, 153, 155, 164, 172, 182, 192, 193, 194, 195, 196, 197, 209, 210, 211, 240, 241, 242, 243, 246, 247, 248, 254, 272, 273, 282, 283, 286, 287, 309, 368, 391, 399, 463, 592, 647, 707, 718, 728, 730, 736, 738, 739, 740, 741, 749, 753, 779, 781, 784, 793, 796, 798, 804, 810, 814, 830, 841, 849, 852, 853, 854, 855, 856, 857, 880, 882, 883, 885, 890, 896, 902, 903, 907, 927, 931, 1006, 1013, 1213, 1325, 1334], "comm_subplan_elim": [60, 61, 835, 836, 844, 846, 876, 888, 927], "comm_subexpr_elim": [60, 61, 835, 836, 844, 846, 876, 888, 927], "cluster_with_column": [60, 61, 835, 836, 844, 846, 876, 888, 927], "comput": [60, 62, 95, 177, 192, 213, 268, 274, 287, 301, 309, 316, 326, 327, 328, 329, 330, 331, 348, 349, 350, 355, 356, 360, 372, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 396, 450, 458, 498, 524, 525, 526, 527, 531, 532, 533, 534, 538, 545, 546, 547, 548, 572, 592, 593, 599, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 641, 642, 643, 644, 648, 714, 715, 723, 728, 730, 734, 735, 736, 742, 744, 761, 781, 791, 792, 804, 814, 835, 852, 859, 861, 862, 897, 904, 907, 921, 927, 934, 940, 941, 942, 943, 944, 945, 962, 963, 964, 969, 970, 974, 987, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1069, 1071, 1076, 1119, 1143, 1144, 1145, 1146, 1150, 1151, 1152, 1153, 1157, 1164, 1165, 1166, 1167, 1175, 1184, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1225, 1226, 1227, 1228, 1231, 1297, 1298, 1306, 1313, 1325], "graph": [60, 122, 214, 309, 835, 859, 904, 927], "parallel": [60, 62, 117, 123, 132, 139, 193, 196, 213, 214, 230, 247, 283, 309, 391, 513, 723, 804, 814, 826, 853, 856, 861, 862, 883, 903, 915, 927, 1006, 1132, 1313, 1325], "threadpool": 60, "Will": [60, 61, 835, 836, 844, 846, 876, 888, 927, 1325], "try": [60, 61, 105, 120, 121, 126, 132, 134, 137, 139, 835, 836, 844, 846, 876, 888, 927], "branch": [60, 61, 835, 836, 844, 846, 876, 888, 927], "subplan": [60, 61, 835, 836, 844, 846, 876, 888, 927], "union": [60, 61, 62, 534, 835, 836, 844, 846, 876, 888, 927, 932, 1153], "subexpress": [60, 61, 835, 836, 844, 846, 876, 888, 927], "reus": [60, 61, 835, 836, 844, 846, 876, 888, 927], "combin": [60, 61, 62, 182, 193, 198, 213, 240, 278, 309, 321, 335, 445, 454, 467, 591, 607, 612, 671, 681, 687, 688, 689, 690, 755, 756, 758, 759, 801, 802, 804, 814, 835, 836, 844, 846, 853, 862, 876, 880, 888, 927, 1049, 1063, 1073, 1194, 1254, 1264, 1270, 1271, 1272, 1273, 1325], "sequenti": [60, 61, 247, 283, 309, 835, 836, 844, 846, 876, 883, 888, 903, 927], "independ": [60, 61, 147, 150, 154, 271, 309, 835, 836, 844, 846, 876, 888, 927], "explain": [60, 61, 835, 836, 927], "gevent": [61, 142, 836, 927], "await": [61, 122, 836, 927], "_geventdataframeresult": [61, 836, 927], "asynchron": [61, 122, 836, 927], "them": [61, 108, 110, 111, 112, 114, 122, 123, 129, 130, 131, 132, 134, 138, 139, 178, 179, 193, 213, 223, 240, 271, 278, 309, 346, 454, 482, 520, 584, 585, 592, 612, 740, 755, 756, 758, 759, 801, 802, 814, 836, 845, 853, 862, 872, 880, 927, 932, 960, 1073, 1078, 1139, 1179, 1180, 1325], "schedul": [61, 836, 927], "insid": [61, 836, 927], "almost": [61, 216, 295, 309, 693, 695, 696, 836, 927, 1170, 1276, 1278, 1279, 1325], "instantli": [61, 836, 927], "asyncio": [61, 122, 836, 927], "releas": [61, 125, 278, 309, 324, 431, 445, 555, 814, 836, 927, 1049, 1063, 1325, 1334], "greenlet": [61, 836, 927], "task": [61, 836, 927], "wrapper": [61, 836, 927], "event": [61, 836, 927], "asyncresult": [61, 836, 927], "timeout": [61, 836, 927], "collect_async": [61, 927], "set_except": [61, 836, 927], "rerais": [61, 836, 927], "polarstyp": 62, "concatmethod": 62, "vertic": [62, 179, 217, 219, 224, 257, 276, 280, 309, 650, 1233], "rechunk": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 179, 309, 814, 989, 1078, 1087, 1176, 1325], "vertical_relax": 62, "diagon": [62, 273, 309], "diagonal_relax": 62, "vstack": [62, 179, 309], "addition": [62, 241, 309], "coerc": [62, 606, 814], "supertyp": [62, 181, 267, 271, 309, 323, 814, 848, 927, 931, 1325], "mismatch": [62, 103, 130, 138, 143, 145], "find": [62, 183, 189, 309, 635, 651, 652, 814, 1214, 1235, 1325], "miss": [62, 120, 121, 134, 180, 309, 361, 453, 455, 456, 461, 468, 491, 493, 543, 814, 847, 927, 1072, 1074, 1075, 1080, 1315, 1325], "stack": [62, 201, 280, 309], "length": [62, 63, 79, 131, 134, 148, 152, 191, 193, 194, 196, 197, 240, 253, 309, 312, 391, 431, 445, 536, 543, 564, 607, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 645, 663, 667, 668, 670, 672, 673, 674, 680, 682, 694, 703, 787, 790, 791, 792, 805, 814, 853, 854, 856, 857, 876, 880, 889, 927, 931, 989, 1006, 1017, 1049, 1063, 1155, 1162, 1181, 1194, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1229, 1246, 1250, 1251, 1253, 1255, 1256, 1257, 1263, 1265, 1277, 1286, 1325], "don": [62, 193, 213, 216, 274, 276, 309, 324, 391, 513, 555, 814, 853, 897, 927, 932, 1006, 1070, 1132, 1170, 1215, 1315, 1325], "auto": [62, 108, 110, 111, 112, 114, 129, 130, 132, 138, 139, 273, 309, 927, 1334], "logic": [62, 216, 295, 309, 312, 320, 322, 394, 555, 716, 727, 728, 729, 730, 777, 814, 840, 861, 884, 915, 927, 936, 937, 1170, 1305, 1307, 1325, 1329], "align_fram": 62, "pattern": [62, 120, 121, 134, 137, 138, 139, 210, 309, 561, 651, 652, 653, 654, 659, 660, 661, 662, 676, 677, 678, 915, 932, 1213, 1216, 1234, 1235, 1236, 1237, 1242, 1243, 1244, 1245, 1259, 1260, 1261, 1325], "collis": 62, "need": [62, 115, 120, 121, 123, 193, 194, 196, 197, 240, 243, 252, 309, 543, 612, 639, 697, 760, 787, 790, 805, 814, 853, 854, 856, 857, 880, 927, 1222, 1280, 1325, 1334], "sure": [62, 108, 113, 120, 121, 126, 128, 132, 193, 194, 196, 197, 234, 240, 309, 612, 814, 853, 854, 856, 857, 880, 927, 931], "contigu": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 234, 267, 309], "relev": 62, "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "df_a1": 62, "df_a2": 62, "df_a3": 62, "inner": [63, 79, 149, 212, 255, 277, 309, 346, 357, 396, 520, 542, 555, 606, 716, 814, 861, 884, 891, 899, 927, 960, 971, 1010, 1139, 1161, 1170, 1307, 1325], "polarsdatatyp": [63, 79, 120, 121, 134, 147, 148, 149, 150, 151, 154, 162, 165, 216, 266, 271, 309, 324, 369, 457, 551, 553, 554, 555, 607, 664, 665, 731, 762, 774, 775, 776, 777, 787, 790, 805, 810, 814, 832, 927, 932, 939, 981, 1169, 1170, 1194, 1247, 1248, 1325], "pythondatatyp": [63, 79], "within": [63, 79, 143, 144, 145, 146, 192, 193, 194, 195, 196, 197, 198, 213, 240, 278, 309, 475, 603, 647, 814, 853, 854, 856, 857, 862, 880, 927, 1089, 1325, 1333], "attribut": [63, 66, 69, 70, 71, 72, 79, 83, 147, 309, 806, 807, 809, 810, 815, 816, 819, 821, 822, 823, 927, 1317, 1319, 1321, 1325, 1326, 1330, 1331, 1332], "categoricalord": [66, 371, 984], "encod": [66, 72, 82, 120, 121, 134, 264, 309, 363, 469, 610, 655, 705, 814, 976, 1197, 1238, 1300, 1325], "lexic": [66, 371, 932, 984, 986], "calendar": [68, 69, 193, 213, 240, 278, 309, 402, 414, 417, 427, 431, 445, 449, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 801, 802, 814, 853, 862, 880, 927, 1016, 1028, 1034, 1045, 1049, 1063, 1067, 1073, 1325], "bit": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 605, 651, 814, 1192, 1234, 1325], "sign": [68, 69, 71, 75, 76, 77, 78, 84, 427, 605, 676, 677, 703, 814, 932, 1045, 1106, 1192, 1259, 1260, 1286, 1325], "dai": [68, 69, 84, 193, 196, 211, 213, 240, 278, 309, 399, 423, 424, 427, 428, 431, 434, 437, 438, 445, 447, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 738, 754, 755, 756, 757, 758, 759, 760, 801, 802, 814, 853, 856, 862, 880, 927, 932, 1013, 1041, 1042, 1045, 1046, 1049, 1052, 1055, 1056, 1063, 1065, 1073, 1325], "unix": [68, 69, 410, 766, 1024], "epoch": [68, 69, 766], "time_unit": [69, 71, 401, 403, 410, 436, 448, 696, 755, 756, 757, 758, 759, 760, 766, 932, 1015, 1017, 1024, 1054, 1066, 1279], "time_zon": [69, 404, 406, 430, 696, 755, 756, 757, 758, 759, 932, 1014, 1018, 1023, 1048, 1279], "timezon": [69, 124, 135, 406, 932], "microsecond": [69, 71, 193, 210, 213, 240, 242, 243, 263, 278, 309, 427, 431, 440, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 757, 758, 759, 760, 800, 801, 802, 814, 853, 862, 876, 880, 927, 932, 1045, 1049, 1058, 1063, 1073, 1325], "zone": [69, 150, 151, 154, 400, 404, 430, 454, 696, 755, 756, 757, 758, 759, 814, 932, 1014, 1018, 1048, 1073, 1279, 1325], "zoneinfo": [69, 932], "available_timezon": [69, 932], "progress": [70, 72], "expect": [70, 72, 99, 102, 107, 120, 122, 134, 543, 555, 774, 814, 864, 866, 867, 927], "digit": [70, 596, 632, 633, 660, 814, 932, 1210, 1211, 1237, 1243, 1325, 1334], "offset": [71, 120, 121, 125, 126, 128, 132, 134, 137, 138, 139, 187, 193, 194, 196, 197, 240, 253, 260, 278, 284, 285, 309, 399, 400, 409, 423, 424, 427, 431, 445, 471, 517, 536, 612, 645, 682, 713, 814, 851, 853, 854, 856, 857, 880, 889, 895, 905, 906, 927, 1013, 1014, 1023, 1041, 1042, 1045, 1049, 1063, 1086, 1136, 1155, 1229, 1265, 1279, 1296, 1325], "integer_list": 79, "float_list": 79, "wrap": [81, 115, 482, 814], "arbitrari": [81, 394, 814, 840, 927, 932], "schemadict": [83, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 131, 132, 134, 139, 309, 796, 866, 867, 909, 915, 927], "composit": [83, 1334], "nanosecond": [84, 193, 213, 240, 278, 309, 427, 431, 432, 443, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1050, 1061, 1063, 1073, 1325], "midnight": 84, "unsign": [85, 86, 87, 88, 605, 814, 932, 1106, 1192, 1325], "static": [89, 909, 915], "enable_string_cach": 91, "stringcach": [91, 92, 212, 309, 826, 983, 985], "reliabl": [91, 92], "wai": [91, 92, 108, 110, 111, 112, 114, 129, 130, 138, 192, 211, 230, 254, 287, 309, 592, 596, 647, 659, 743, 810, 814, 852, 875, 890, 907, 915, 927, 1242], "until": [91, 193, 196, 214, 309, 673, 674, 703, 853, 856, 927, 1256, 1257, 1286], "19": [92, 125, 150, 162, 183, 186, 193, 194, 195, 196, 197, 202, 213, 217, 219, 224, 236, 237, 240, 251, 257, 260, 278, 289, 309, 324, 375, 376, 386, 387, 388, 389, 390, 402, 408, 412, 416, 419, 421, 426, 430, 431, 433, 445, 485, 489, 492, 497, 509, 523, 541, 551, 552, 554, 598, 612, 613, 617, 618, 620, 621, 622, 624, 638, 653, 665, 669, 670, 671, 672, 675, 680, 681, 687, 693, 696, 697, 709, 712, 713, 731, 750, 751, 752, 753, 755, 757, 775, 814, 853, 854, 855, 856, 857, 862, 866, 880, 887, 895, 909, 927, 939, 984, 992, 993, 1002, 1003, 1004, 1005, 1007, 1016, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1097, 1101, 1103, 1106, 1107, 1113, 1115, 1117, 1128, 1142, 1160, 1169, 1188, 1199, 1215, 1217, 1221, 1236, 1248, 1252, 1253, 1254, 1255, 1258, 1263, 1264, 1270, 1276, 1279, 1280, 1295, 1296, 1304, 1315, 1325], "longer": [92, 120, 121, 134, 616, 618, 620, 622, 624, 627, 629, 631, 814], "accept": [92, 118, 120, 121, 124, 126, 128, 132, 150, 164, 172, 192, 195, 246, 247, 250, 254, 272, 282, 283, 287, 309, 317, 368, 374, 457, 482, 554, 592, 607, 647, 707, 718, 726, 728, 730, 736, 739, 740, 741, 749, 753, 762, 779, 781, 784, 793, 796, 798, 804, 814, 830, 841, 852, 855, 882, 883, 886, 890, 896, 902, 903, 907, 927, 931, 991, 1096, 1194, 1220, 1325], "disable_string_cach": 92, "unabl": [96, 125], "hstack": [96, 309], "is_in": [97, 182, 309, 814, 1325], "least": [99, 593, 659, 661, 814, 1184, 1242, 1244, 1325], "unexpect": [101, 103, 122, 553, 555, 814, 1170, 1325], "caus": [101, 103, 109, 120, 121, 134, 143, 161, 179, 267, 309, 553, 814, 1078, 1305, 1325], "panic": 101, "incompat": 105, "arrai": [108, 112, 120, 121, 132, 177, 178, 261, 266, 267, 268, 309, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 375, 376, 382, 383, 384, 385, 386, 387, 388, 389, 390, 507, 524, 525, 526, 527, 529, 538, 539, 542, 545, 547, 553, 615, 617, 621, 628, 636, 761, 814, 845, 927, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 992, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1071, 1126, 1143, 1144, 1145, 1146, 1148, 1156, 1157, 1158, 1161, 1164, 1166, 1167, 1201, 1202, 1204, 1207, 1208, 1209, 1218, 1223, 1299, 1303, 1305, 1306, 1315, 1325], "chunkedarrai": [108, 226, 309], "recordbatch": [108, 211, 309], "schemadefinit": [108, 110, 111, 112, 114, 129, 130, 138, 309, 927], "schema_overrid": [108, 110, 111, 112, 113, 114, 122, 123, 125, 129, 130, 131, 211, 267, 309, 927, 932], "part": [108, 125, 266, 271, 309, 592, 660, 684, 685, 814, 844, 846, 876, 888, 904, 927, 1243, 1267, 1268], "closest": [108, 213, 309], "pair": [108, 110, 111, 112, 114, 129, 130, 138, 235, 309, 878, 927, 1334], "sever": [108, 110, 111, 112, 114, 129, 130, 138, 309, 927, 1334], "form": [108, 110, 111, 112, 114, 129, 130, 138, 210, 242, 276, 309, 593, 814, 927, 1184, 1325], "dimens": [108, 110, 112, 114, 129, 130, 138, 309, 608, 814, 927, 1195, 1305, 1325], "supportsinterchang": 109, "allow_copi": [109, 161, 267, 309, 1305, 1325], "interchang": [109, 161], "__dataframe__": 109, "convers": [109, 125, 161, 210, 211, 242, 243, 263, 267, 268, 309, 404, 693, 695, 696, 700, 826, 1018, 1088, 1276, 1278, 1279, 1283, 1304, 1305, 1306, 1325], "latest": [109, 124, 135, 161, 430, 431, 445, 468, 564, 693, 696, 757, 814, 1048, 1049, 1063, 1276, 1279], "from_panda": 109, "from_arrow": 109, "effici": [109, 122, 125, 209, 211, 309, 553, 814], "pd": [109, 113, 716, 814, 1306, 1307, 1325], "df_pd": 109, "dfi": [109, 161], "strict": [110, 111, 114, 165, 309, 363, 369, 651, 655, 662, 675, 693, 695, 696, 698, 700, 814, 832, 927, 976, 981, 1070, 1215, 1234, 1238, 1245, 1258, 1276, 1278, 1279, 1281, 1283, 1325], "clone": [110, 111, 112, 113, 114, 166, 267, 309, 833, 927, 990, 1315, 1325], "dimension": [110, 112, 114, 267, 309, 927, 1325], "exactli": [110, 111, 114, 143, 144, 145, 146, 149, 150, 154, 309, 684, 685, 691, 692, 760, 927, 1223, 1267, 1268, 1274, 1275, 1325], "infer_schema_length": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 309, 664, 665, 927, 1247, 1248], "NOT": [111, 209, 309, 543, 562, 1333], "typic": [111, 122, 125, 139, 216, 309, 409, 932, 1023, 1170, 1325], "clearer": 111, "partial": [111, 120, 134, 309, 927], "scan": [111, 114, 120, 121, 122, 125, 129, 131, 134, 135, 136, 137, 138, 139, 140, 193, 194, 196, 197, 240, 309, 664, 665, 846, 853, 854, 856, 857, 858, 865, 880, 927, 1247, 1248], "slow": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 309, 324, 391, 555, 614, 664, 665, 814, 915, 927, 1006, 1200, 1247, 1248, 1325], "present": [111, 150, 487, 554, 689, 690, 814, 846, 888, 927, 1169, 1315, 1325], "np": [112, 182, 267, 309, 470, 635, 712, 814, 849, 927, 1085, 1100, 1105, 1109, 1110, 1213, 1214, 1295, 1325], "ndarrai": [112, 182, 267, 309, 470, 635, 712, 814, 849, 927, 1085, 1213, 1214, 1217, 1295, 1305, 1325], "numpi": [112, 142, 169, 210, 242, 243, 263, 267, 268, 309, 553, 584, 585, 614, 814, 927, 1100, 1105, 1109, 1110, 1179, 1180, 1200, 1305, 1306, 1315, 1325], "columnar": [112, 114, 210, 242, 309], "interpret": [112, 114, 120, 121, 134, 309, 927], "yield": [112, 114, 120, 121, 122, 134, 177, 179, 209, 273, 309, 467, 553, 592, 814, 927, 1071, 1078, 1325], "conclus": [112, 114, 309, 927], "datetimeindex": 113, "nan_to_nul": [113, 309, 927, 1325], "include_index": 113, "instal": [113, 120, 121, 123, 126, 128, 169, 268, 309, 399, 738, 888, 927, 1013, 1306, 1325], "nan": [113, 150, 161, 180, 267, 268, 309, 397, 398, 451, 452, 461, 472, 474, 480, 491, 493, 494, 495, 500, 550, 556, 570, 584, 585, 586, 587, 614, 719, 742, 814, 847, 927, 941, 945, 1011, 1012, 1080, 1109, 1110, 1179, 1180, 1200, 1305, 1306, 1325, 1334], "nameless": 113, "enumer": [113, 120, 121, 134, 211, 309], "regardless": [113, 192, 195, 213, 309, 404, 666, 804, 1018, 1249], "pleas": [113, 122, 123, 193, 309, 312, 454, 615, 617, 619, 621, 623, 626, 628, 630, 743, 755, 760, 814, 853, 927, 1073, 1325, 1329], "reset_index": [113, 193, 309, 853, 927], "prior": 113, "pd_df": 113, "pd_seri": 113, "its": [115, 142, 177, 267, 309, 403, 431, 445, 454, 610, 647, 804, 814, 985, 1017, 1049, 1063, 1071, 1073, 1197, 1305, 1325], "repr": 115, "trim": 115, "whitespac": [115, 671, 681, 687, 688, 689, 690, 1254, 1264, 1270, 1271, 1272, 1273], "prompt": 115, "extract": [115, 255, 309, 402, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 428, 429, 432, 433, 435, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 596, 660, 661, 664, 665, 666, 682, 684, 814, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1028, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1067, 1243, 1244, 1247, 1248, 1249, 1265], "to_init_repr": [115, 309, 1325], "truncat": [115, 120, 121, 134, 191, 193, 196, 210, 242, 243, 263, 309, 853, 856, 876, 927], "identifi": [115, 122, 222, 229, 274, 286, 309, 871, 897, 927], "compound": [115, 243, 309, 932], "neither": [115, 125, 131, 244, 309, 358, 543, 972, 1162], "source_ac": 115, "source_cha": 115, "ident": [115, 166, 167, 309, 434, 610, 611, 814, 833, 834, 927, 990, 994, 1052, 1197, 1198, 1325], "timestamp": [115, 124, 135, 193, 196, 309, 430, 431, 445, 766, 853, 856, 927, 1048, 1049, 1063], "tor_id": 115, "nnel_id": 115, "\u03bc": [115, 165, 193, 210, 240, 242, 243, 263, 278, 309, 400, 401, 403, 404, 405, 406, 409, 411, 415, 418, 420, 423, 424, 425, 427, 430, 431, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 612, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 693, 696, 757, 758, 759, 760, 766, 814, 832, 853, 862, 880, 927, 932, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1276, 1279], "asia": [115, 932, 1019, 1020, 1053], "tokyo": [115, 932], "123456780": 115, "9876543210": 115, "56": [115, 714, 814], "59": [115, 171, 309, 403, 420, 432, 467, 757, 800, 801, 802, 814, 839, 927, 932, 1017, 1038, 1050], "663053": 115, "jst": [115, 932], "803065983": 115, "2055938745": 115, "38": [115, 147, 150], "050545": 115, "source_actor_id": 115, "source_channel_id": 115, "to_list": [115, 240, 309, 1234, 1245, 1325], "uint32": [116, 142, 165, 177, 240, 285, 309, 334, 339, 340, 380, 454, 470, 473, 501, 505, 506, 522, 606, 611, 612, 653, 654, 667, 668, 712, 716, 743, 770, 773, 814, 832, 880, 906, 927, 932, 949, 953, 954, 981, 1070, 1071, 1073, 1106, 1124, 1125, 1141, 1198, 1215, 1236, 1237, 1250, 1251, 1307, 1308, 1325], "regular": [116, 210, 241, 242, 278, 285, 309, 457, 651, 653, 654, 659, 660, 661, 662, 676, 677, 738, 762, 814, 906, 927, 932, 1234, 1236, 1237, 1242, 1243, 1244, 1245, 1259, 1260], "uint64": [116, 198, 240, 285, 309, 339, 340, 454, 475, 505, 506, 605, 612, 814, 880, 906, 927, 932, 953, 954, 1073, 1089, 1124, 1125, 1192, 1308, 1325], "bigidx": 116, "over": [117, 120, 121, 122, 124, 125, 134, 150, 151, 162, 179, 209, 210, 211, 216, 241, 242, 243, 255, 273, 286, 289, 295, 309, 324, 391, 394, 454, 462, 552, 553, 555, 563, 565, 566, 567, 568, 576, 577, 603, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 731, 746, 747, 750, 751, 764, 775, 776, 777, 789, 814, 891, 909, 915, 927, 932, 939, 1006, 1073, 1078, 1170, 1201, 1202, 1204, 1208, 1325], "fetch": [117, 134, 214, 309, 835, 858, 865, 927], "ideal": 117, "read_csv_batch": 117, "tpch": [117, 121], "tables_scale_100": [117, 121], "lineitem": [117, 121, 123], "tbl": [117, 121], "try_parse_d": [117, 120, 121, 134], "n_row": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 211, 309, 846, 927], "handler": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 394, 814, 840, 927], "builtin": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 394, 814, 840, 927], "instanc": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 150, 154, 159, 165, 179, 185, 309, 369, 564, 615, 617, 619, 621, 623, 626, 628, 630, 746, 750, 764, 810, 814, 832, 867, 905, 906, 927, 981, 1078, 1325], "stop": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 814, 1015, 1018, 1024, 1025, 1032, 1035, 1038, 1043, 1049, 1054], "read_csv": [119, 125, 134], "write_clipboard": [119, 309], "has_head": [120, 121, 125, 134], "new_column": [120, 121, 125, 134, 236, 237, 309], "comment_prefix": [120, 121, 134], "skip_row": [120, 121, 134], "missing_utf8_is_empty_str": [120, 121, 134], "ignore_error": [120, 121, 130, 134, 138], "n_thread": [120, 121], "8192": 120, "csvencod": [120, 121, 134], "low_memori": [120, 121, 132, 134, 138, 139], "skip_rows_after_head": [120, 121, 134], "row_index_nam": [120, 121, 126, 128, 132, 134, 137, 138, 139], "row_index_offset": [120, 121, 126, 128, 132, 134, 137, 138, 139], "sample_s": [120, 121], "eol_char": [120, 121, 134], "raise_if_empti": [120, 121, 125, 131, 134], "truncate_ragged_lin": [120, 121, 134], "decimal_comma": [120, 121, 134], "glob": [120, 121, 132, 134, 137, 138, 139], "fsspec": [120, 121, 126, 128, 132, 135, 136, 137, 142], "remot": [120, 121, 126, 128], "autogener": [120, 121, 134], "column_x": [120, 121, 134], "shorter": [120, 121, 134, 543, 770, 771], "comment": [120, 121, 134], "skip": [120, 121, 125, 132, 134, 139, 213, 276, 309, 939, 1170, 1325], "escap": [120, 121, 123, 134], "complet": [120, 122, 134], "wherea": [120, 134, 240, 309, 431, 445, 584, 585, 612, 814, 858, 865, 880, 927, 1049, 1063, 1179, 1180, 1325], "would": [120, 121, 134, 267, 271, 309, 334, 345, 399, 518, 553, 555, 563, 592, 603, 736, 738, 814, 948, 959, 1013, 1137, 1190, 1305, 1325], "prefer": [120, 121, 124, 125, 134, 155, 179, 210, 216, 241, 242, 295, 309, 457, 555, 814, 927, 1078, 1170, 1325, 1334], "treat": [120, 121, 134, 454, 651, 654, 662, 676, 677, 804, 814, 1073, 1234, 1237, 1245, 1259, 1260, 1325], "10000": [120, 211, 309], "issu": [120, 121, 122, 125, 134, 309, 384, 385, 710, 814, 1000, 1001, 1293, 1325], "iso8601": [120, 121, 134], "succe": [120, 121, 134], "cpu": [120, 121, 266, 309, 1303, 1325], "buffer": [120, 121, 122, 177, 210, 309, 1071, 1325], "modifi": [120, 121, 134, 156, 159, 179, 201, 209, 210, 280, 309, 335, 430, 448, 651, 659, 660, 662, 676, 677, 814, 938, 1048, 1066, 1078, 1234, 1242, 1243, 1245, 1259, 1260, 1282, 1284, 1285, 1325], "upper": [120, 121, 122, 177, 193, 196, 309, 374, 375, 477, 482, 543, 577, 722, 733, 755, 756, 758, 759, 801, 802, 814, 853, 856, 927, 991, 992, 1071, 1091, 1096, 1168, 1312, 1325], "bound": [120, 121, 177, 193, 196, 309, 345, 374, 375, 376, 482, 516, 518, 541, 543, 549, 722, 733, 755, 756, 758, 759, 801, 802, 814, 853, 856, 927, 959, 991, 992, 993, 1071, 1096, 1135, 1137, 1160, 1168, 1312, 1325], "lossi": [120, 121, 134], "decod": [120, 121, 664], "expens": [120, 121, 132, 134, 138, 139, 153, 155, 193, 194, 196, 197, 210, 216, 240, 241, 242, 243, 273, 274, 309, 324, 555, 814, 839, 853, 854, 856, 857, 880, 897, 927, 1078, 1170, 1325, 1334], "aggreg": [120, 121, 132, 185, 192, 193, 195, 196, 217, 219, 221, 224, 227, 231, 232, 233, 240, 256, 257, 276, 279, 287, 288, 291, 293, 309, 318, 463, 478, 551, 553, 555, 592, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 727, 728, 729, 730, 746, 747, 748, 749, 750, 751, 752, 753, 764, 769, 778, 779, 781, 783, 784, 789, 797, 798, 814, 853, 854, 856, 857, 867, 868, 869, 870, 873, 874, 877, 880, 892, 893, 900, 907, 908, 911, 913, 927, 931, 1092, 1199, 1200, 1201, 1202, 1204, 1207, 1208, 1209, 1325], "parser": 120, "regard": [120, 742], "sens": [120, 126, 128, 137, 223, 278, 309, 592, 814, 872, 927], "particular": [120, 126, 128, 137, 177, 309, 1071, 1325], "usernam": [120, 123, 126, 128, 137], "password": [120, 123, 126, 128, 137], "sampl": [120, 121, 295, 309, 644, 814, 915, 1228, 1325], "estim": [120, 121, 163, 177, 309, 325, 455, 456, 498, 732, 814, 829, 927, 1071, 1074, 1075, 1119, 1325], "alloc": [120, 121, 177, 234, 309, 814, 931, 1071, 1325], "encount": [120, 121, 134, 193, 196, 309, 584, 585, 664, 666, 742, 746, 764, 814, 853, 856, 927, 1179, 1180, 1247, 1249, 1325], "window": [120, 121, 134, 193, 194, 196, 197, 240, 309, 391, 431, 445, 453, 455, 456, 553, 555, 566, 592, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 740, 791, 792, 814, 853, 854, 856, 857, 880, 927, 1006, 1049, 1063, 1072, 1074, 1075, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1325], "rn": [120, 121, 134], "nodataerror": [120, 121, 125, 131, 134], "period": [120, 121, 134, 193, 194, 196, 197, 240, 309, 431, 445, 453, 455, 456, 593, 612, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 880, 927, 1049, 1063, 1072, 1074, 1075, 1184, 1325], "expand": [120, 132, 134, 139, 459, 560, 561, 606, 814, 931, 932, 1077, 1325], "rule": [120, 132, 134, 139, 185, 309, 652, 678, 1235, 1261], "lazili": [120, 121, 134, 135, 136, 137, 138, 139, 836, 927], "incorrectli": [120, 193, 194, 196, 197, 240, 309, 454, 543, 612, 814, 853, 854, 856, 857, 880, 927, 1073, 1325], "continu": [120, 392, 600, 644, 814, 1007, 1188, 1228, 1325], "benchmark": 120, "demonstr": [120, 467, 814, 932], "birthdai": 120, "alic": 120, "1995": 120, "bob": [120, 223, 309, 872, 927], "charli": 120, "2002": [120, 413, 427, 1027, 1045, 1067], "08": [120, 143, 144, 145, 146, 171, 213, 240, 255, 309, 399, 403, 423, 424, 431, 612, 693, 758, 760, 814, 839, 880, 927, 932, 1013, 1049, 1063, 1276], "50000": 121, "batchedcsvread": 121, "upon": 121, "creation": 121, "gather": [121, 187, 260, 309, 334, 471, 517, 541, 712, 713, 736, 814, 851, 895, 927, 948, 1086, 1136, 1160, 1295, 1296, 1325], "done": [121, 140, 159, 163, 165, 213, 309, 323, 325, 369, 592, 814, 829, 832, 862, 927, 981, 1325], "next_batch": 121, "big": 121, "interest": [121, 434, 437, 1052, 1055], "seen_group": 121, "big_fil": 121, "df_current_batch": 121, "partition_df": 121, "partition_bi": [121, 211, 309, 566], "as_dict": [121, 229, 309], "fh": 121, "els": [121, 804], "iter_batch": 122, "execute_opt": [122, 123], "client": 122, "packag": [122, 399, 738, 931, 1013], "establish": 122, "async": [122, 836, 927], "aris": 122, "happen": [122, 404, 600, 814, 1018, 1188, 1325], "report": 122, "resultset": 122, "manner": [122, 454, 814], "veri": [122, 210, 273, 309, 555, 814, 915], "poor": 122, "mani": [122, 123, 179, 309, 678, 1078, 1261, 1325], "trip": 122, "still": [122, 123], "exact": [122, 148, 150, 154, 213, 252, 309, 325, 467, 691, 692, 693, 695, 696, 719, 814, 1276, 1278, 1279, 1304, 1325], "incom": 122, "read_arrow_batches_from_odbc": 122, "read_database_uri": 122, "wide": [122, 191, 222, 276, 309, 871, 927], "snowflak": [122, 123], "variou": [122, 309, 814, 927, 932, 1325], "facil": 122, "initialis": [122, 159, 927], "flight": 122, "flightsql": 122, "flight_sql": 122, "about": [122, 644, 651, 659, 660, 662, 676, 677, 814, 931, 1228, 1234, 1242, 1243, 1245, 1259, 1260, 1325, 1334], "notabl": 122, "dremio": 122, "influxdb": 122, "notic": [122, 309, 927, 1325], "dbapi2": 122, "connectorx": [122, 123, 142], "optimis": [122, 216, 243, 295, 309, 927, 1170, 1216, 1325, 1334], "translat": 122, "conn": 122, "url": [122, 123, 132, 139, 659, 661, 1242, 1244], "render_as_str": 122, "hide_password": 122, "abl": 122, "relat": [122, 159, 676, 677, 932, 1259, 1260], "k\u00f9zudb": 122, "cypher": 122, "test_data": 122, "user_conn": 122, "normalised_scor": 122, "uint8": [122, 165, 265, 266, 267, 276, 309, 384, 385, 607, 710, 726, 814, 832, 927, 932, 1000, 1001, 1194, 1293, 1308, 1325, 1334], "parameteris": 122, "metric": 122, "alchemy_conn": 122, "qmark": 122, "variad": 122, "1000": [122, 177, 265, 285, 309, 325, 814, 906, 927, 1058, 1166, 1302, 1325, 1334], "localhost": 122, "5432": 122, "uid": 122, "usr": 122, "pwd": 122, "max_text_s": 122, "max_binary_s": 122, "do_someth": 122, "kuzu_db_conn": 122, "session": 122, "ext": 122, "create_async_engin": 122, "async_engin": 122, "aiosqlit": 122, "surrealdb": 122, "surreal": 122, "surrealhttp": 122, "surreal_query_to_fram": 122, "8000": 122, "rpc": 122, "partition_on": 123, "partition_rang": 123, "partition_num": 123, "dbreadengin": 123, "raw": 123, "warehous": 123, "role": 123, "caller": [123, 223, 309, 543, 867, 872, 909, 915, 927], "respons": [123, 223, 309, 872, 927], "come": [123, 193, 309, 399, 423, 424, 498, 543, 738, 814, 853, 926, 927, 1013, 1041, 1042, 1119, 1325], "transfer": 123, "document": [123, 125, 309, 312, 434, 437, 666, 693, 695, 696, 700, 810, 985, 1052, 1055, 1249, 1276, 1278, 1279, 1283, 1325, 1329], "redshift": 123, "mysql": 123, "mariadb": 123, "clickhous": 123, "oracl": 123, "bigqueri": 123, "github": [123, 309], "sfu": 123, "connector": 123, "destin": 123, "develop": [123, 150, 154], "read_databas": 123, "usual": [123, 271, 309, 400, 1014], "urllib": 123, "quote_plu": 123, "word": [123, 676, 677, 689, 690], "3f": [123, 693, 696, 1276, 1279], "20word": 123, "explicitli": [123, 125, 148, 150, 159, 309, 796, 825], "test_tabl": 123, "compani": 123, "testdb": 123, "public": [123, 309, 814, 826, 927, 1325], "myrol": 123, "delta_table_opt": [124, 135], "root": [124, 135, 372, 497, 552, 565, 575, 576, 578, 580, 582, 583, 598, 648, 709, 813, 814, 987, 1231, 1325], "absolut": [124, 135, 136, 143, 144, 145, 146, 316, 453, 455, 456, 814, 934, 1072, 1074, 1075, 1325], "info": [124, 135, 136, 142, 309, 312, 1325, 1329], "avoid": [124, 150, 154, 242, 309, 319, 814], "year": [124, 135, 193, 213, 240, 255, 278, 309, 399, 413, 414, 427, 428, 431, 445, 446, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 738, 754, 755, 756, 757, 758, 759, 801, 802, 814, 853, 862, 880, 927, 932, 1013, 1027, 1028, 1045, 1046, 1049, 1063, 1064], "2021": [124, 135, 165, 171, 191, 193, 278, 309, 693, 774, 832, 839, 853, 927, 932, 1019, 1020, 1028, 1053, 1115, 1276, 1325], "travel": [124, 135], "2020": [124, 135, 165, 171, 191, 213, 240, 309, 312, 399, 404, 409, 430, 434, 437, 438, 439, 440, 441, 442, 443, 444, 454, 612, 693, 695, 696, 738, 814, 832, 839, 880, 927, 932, 1013, 1018, 1023, 1048, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1073, 1276, 1278, 1279, 1325], "tzinfo": [124, 135], "utc": [124, 135, 400, 404, 406, 409, 430, 693, 696, 932, 1014, 1018, 1023, 1048, 1276, 1279], "aw": [124, 132, 135, 139], "googl": [124, 135, 136], "service_account": [124, 135], "service_account_json_absolute_path": [124, 135], "az": [124, 135, 136], "adl": [124, 135, 136], "abf": [124, 135, 136], "azure_storage_account_nam": [124, 135, 136], "azure_storage_account_kei": [124, 135, 136], "without_fil": [124, 135, 136], "track": [124, 135, 136, 216, 309, 543, 1333], "sheet_id": [125, 131], "sheet_nam": [125, 131], "excelspreadsheetengin": 125, "read_opt": 125, "calamin": 125, "fastexcel": [125, 142], "xlsb": 125, "xl": 125, "pyxlsb": [125, 142], "openpyxl": [125, 142], "sheetnam": [125, 131], "nor": [125, 131, 244, 309], "xlsx2csv": [125, 142], "refin": 125, "major": [125, 266, 309], "dramat": 125, "modul": [125, 813, 932, 1334], "bind": 125, "significantli": [125, 216, 295, 309, 1170, 1325, 1334], "potenti": [125, 134, 137, 138, 210, 241, 243, 309, 575, 839, 927, 931], "julian": 125, "primari": [125, 1334], "constructor": [125, 154], "load_workbook": 125, "open_workbook": 125, "excelread": 125, "load_sheet_by_nam": 125, "influenc": [125, 846, 867, 927], "pipelin": [125, 271, 309], "becom": [125, 152, 675], "skip_empty_lin": 125, "correct": [125, 131, 455, 456, 498, 625, 644, 814, 866, 867, 927, 931, 1074, 1075, 1119, 1206, 1228, 1325], "forc": [125, 213, 216, 267, 295, 309, 543, 861, 862, 915, 927, 1170, 1305, 1325], "best": [125, 216, 295, 309, 555, 814, 1170, 1325], "known": [125, 126, 358, 543, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 909, 915, 972, 1162], "ambigu": [125, 430, 431, 445, 693, 696, 757, 1048, 1049, 1063, 1276, 1279], "memory_map": [126, 132, 137], "greatli": [126, 137], "repeat": [126, 137, 604, 606, 787, 805, 814], "That": [126, 866, 867, 927], "filenam": 126, "my_fil": 126, "write_ipc": [126, 309], "read_ndjson": 129, "stringio": [129, 130, 394, 469, 566, 814, 840, 884, 927], "With": [129, 208, 250, 309, 353, 535, 637, 814, 886, 927, 967, 1118, 1154, 1220, 1325], "becaus": [130, 138, 177, 193, 196, 214, 216, 276, 295, 309, 467, 513, 814, 853, 856, 915, 927, 939, 1071, 1132, 1170, 1325], "openoffic": 131, "od": [131, 826], "parallelstrategi": [132, 139], "use_statist": [132, 139], "hive_partit": [132, 139], "hive_schema": [132, 139], "retri": [132, 137, 139], "row_group": [132, 139], "hive": [132, 139], "prune": [132, 139, 867, 927], "gcp": [132, 136, 139], "stabl": [132, 164, 169, 171, 198, 244, 255, 272, 309, 475, 548, 814, 830, 839, 871, 890, 891, 896, 927, 1089, 1325], "read_tabl": 132, "scan_parquet": [132, 140], "scan_pyarrow_dataset": [132, 139], "with_column_nam": 134, "push": [134, 137, 138, 139, 140], "down": [134, 137, 138, 139, 140, 466, 814, 1084, 1325], "therebi": [134, 137, 138], "realloc": [134, 137, 138, 179, 309, 1078, 1325], "headerless": 134, "my_long_fil": 134, "thing": [134, 141], "less": [134, 213, 309, 467, 500, 550, 553, 685, 814, 862, 927, 1268, 1334], "breezah": 134, "languag": [134, 193, 213, 240, 278, 309, 427, 431, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063, 1073, 1325], "hard": [134, 866, 867, 927], "mydf": 134, "lambda": [134, 162, 185, 216, 230, 231, 235, 295, 309, 324, 358, 453, 454, 455, 456, 543, 551, 552, 553, 555, 576, 577, 746, 747, 764, 776, 777, 789, 814, 866, 867, 875, 878, 915, 927, 939, 972, 1072, 1073, 1074, 1075, 1162, 1170, 1325], "lower": [134, 171, 193, 196, 233, 301, 309, 374, 376, 482, 549, 552, 576, 601, 605, 623, 624, 733, 755, 756, 758, 759, 788, 801, 802, 814, 839, 853, 856, 877, 921, 927, 991, 993, 1008, 1096, 1168, 1189, 1192, 1205, 1312, 1325], "simpli": [134, 746, 764], "idx": [134, 193, 211, 285, 309, 345, 358, 543, 853, 906, 927, 972, 1162, 1245], "uint16": [134, 384, 385, 710, 814, 932, 1000, 1001, 1293, 1305, 1308, 1325], "u16": [134, 1334], "eu": [135, 136], "central": [135, 136, 498, 644, 814, 1119, 1228, 1325], "iceberg": [136, 826], "pyiceberg": [136, 142], "secret": [136, 139], "adlf": 136, "my": [136, 140, 701, 1284], "oauth": 136, "token": 136, "ya29": 136, "dr": 136, "afm": 136, "py": 136, "impl": 136, "fsspecfileio": 136, "give": [137, 138, 213, 222, 274, 309, 410, 467, 498, 606, 719, 723, 814, 826, 871, 897, 927, 1024, 1119, 1304, 1313, 1325], "read_parquet": 139, "east": 139, "allow_pyarrow_filt": 140, "comparison": 140, "dset": 140, "folder": 140, "04": [140, 165, 171, 193, 278, 309, 403, 404, 423, 424, 430, 431, 434, 437, 438, 439, 442, 444, 448, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 693, 738, 754, 757, 758, 760, 814, 832, 839, 853, 927, 932, 1018, 1032, 1038, 1041, 1042, 1043, 1048, 1052, 1055, 1056, 1057, 1060, 1062, 1066, 1276], "seed": [141, 198, 244, 309, 475, 530, 603, 634, 640, 814, 1089, 1149, 1190, 1212, 1224, 1325], "shuffl": [141, 244, 271, 295, 309, 530, 634, 814, 915, 1149, 1212, 1325], "platform": 142, "maco": 142, "arm64": 142, "arm": 142, "64bit": [142, 605, 814, 1192, 1325], "main": [142, 836, 927], "feb": 142, "2024": [142, 399, 405, 406, 411, 415, 418, 420, 425, 432, 435, 738, 754, 757, 760, 932, 1013], "21": [142, 171, 223, 257, 309, 402, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 757, 766, 814, 839, 872, 927, 932, 1016], "clang": 142, "1500": [142, 153], "adbc_driver_manag": 142, "cloudpickl": 142, "17": [142, 150, 177, 213, 287, 309, 454, 614, 632, 766, 801, 814, 907, 995, 997, 1049, 1073, 1200, 1325, 1334], "hvplot": [142, 309, 312, 1325, 1329], "matplotlib": [142, 876, 888, 927], "nest_asyncio": 142, "pydant": 142, "torch": [142, 271, 309, 1308, 1325], "check_row_ord": [143, 144], "check_column_ord": [143, 144], "check_dtyp": [143, 144, 145, 146], "check_exact": [143, 144, 145, 146], "rtol": [143, 144, 145, 146], "atol": [143, 144, 145, 146], "categorical_as_str": [143, 144, 145, 146], "assert": [143, 144, 145, 146, 150, 154, 240, 309, 826, 932], "assertionerror": [143, 144, 145, 146], "compar": [143, 144, 145, 146, 176, 186, 309, 451, 452, 472, 474, 482, 500, 550, 586, 587, 814, 985, 1070, 1215, 1325], "unsort": [143, 144], "toler": [143, 144, 145, 146, 213, 309, 862, 927], "inexact": [143, 144, 145, 146], "share": [143, 144, 145, 146, 177, 309, 1071, 1325], "assert_series_equ": [143, 146, 1070, 1325, 1334], "assert_frame_not_equ": [143, 146], "pytest": [143, 145], "worthwhil": [143, 145], "shorten": [143, 145], "traceback": [143, 144, 145, 146, 267, 309, 1305, 1325], "tb": [143, 145, 177, 309, 1071, 1325], "short": [143, 145], "tend": [143, 145], "unhelpfulli": [143, 145], "assert_frame_equ": [144, 145, 176, 309, 1334], "assert_series_not_equ": [144, 145], "check_nam": [145, 146], "searchstrategi": [147, 149, 150, 151, 152, 154], "allow_nul": [147, 150, 154, 1334], "null_prob": [147, 150, 154], "percentag": [147, 150, 154, 593, 814, 1184, 1325], "chanc": [147, 150, 154, 1334], "1755e": [147, 150], "575050513": [147, 150], "inf": [147, 150, 154, 331, 392, 477, 484, 488, 600, 719, 814, 945, 997, 1007, 1091, 1100, 1105, 1168, 1184, 1188, 1312, 1325], "min_col": [148, 150], "max_col": [148, 150], "comprehens": 148, "standalon": [148, 932], "mincol": 148, "assign": [148, 193, 294, 309, 358, 543, 592, 603, 684, 685, 814, 853, 914, 927, 972, 1162, 1190, 1267, 1268, 1325], "minimum": [148, 149, 150, 152, 154, 185, 224, 225, 309, 453, 455, 456, 570, 585, 595, 603, 783, 784, 814, 873, 927, 1037, 1072, 1074, 1075, 1180, 1186, 1190, 1325, 1334], "especi": [148, 611, 814, 846, 927, 1198, 1325], "hypothesi": [148, 150, 153, 154, 1334], "test_unique_xyz": 148, "assert_someth": 148, "inner_dtyp": [149, 152], "select_from": [149, 152, 154], "min_siz": [149, 150, 152, 154, 1334], "max_siz": [149, 150, 152, 154, 1334], "anoth": [149, 165, 176, 186, 192, 213, 309, 391, 401, 481, 516, 541, 559, 562, 607, 616, 618, 620, 622, 624, 627, 629, 631, 662, 814, 832, 852, 904, 927, 1006, 1015, 1070, 1078, 1095, 1135, 1194, 1215, 1245, 1325], "randomli": 149, "innermost": [149, 152], "2x": 149, "lst": 149, "11330": 149, "24030": 149, "116": 149, "include_col": 150, "allow_chunk": [150, 154], "allowed_dtyp": [150, 151, 154, 1334], "excluded_dtyp": [150, 151, 154], "allow_time_zon": [150, 151, 154], "describ": [150, 191, 309, 927, 1325], "desir": [150, 358, 448, 543, 972, 1066, 1162, 1325], "onto": 150, "exclud": [150, 154, 193, 309, 368, 382, 385, 399, 482, 718, 738, 814, 853, 927, 932, 1013, 1096, 1115, 1325], "pct": 150, "preced": [150, 932], "allow_infin": [150, 154], "disallow": 150, "usag": [150, 154, 252, 309, 932, 1223, 1325], "deploi": [150, 154], "characterist": [150, 154], "concret": [150, 154], "test_df_height": 150, "interact": [150, 154, 171, 309, 839, 927], "col0": [150, 1334], "col1": [150, 231, 309, 927, 1334], "col2": [150, 231, 309, 927, 1334], "1844": 150, "06": [150, 165, 278, 309, 399, 403, 422, 429, 430, 431, 432, 445, 446, 754, 757, 832, 927, 932, 1013, 1048, 1049, 1063], "848808": 150, "1436e16": 150, "9914e218": 150, "2068": 150, "412277": 150, "7415e16": 150, "2095": 150, "647961": 150, "15836": 150, "nesting_level": 151, "pick": [151, 804], "prioriti": 151, "complex": [151, 367, 368, 391, 717, 718, 814, 980, 1006, 1309, 1325], "fulli": [152, 230, 244, 267, 309], "profil": [153, 155, 835, 927], "balanc": [153, 155, 1334], "set_environ": 153, "polars_hypothesis_profil": [153, 155], "max_data_s": 154, "test_series_len": 154, "zz": [154, 171, 255, 309, 839, 927], "polars_max_thread": 156, "behind": 156, "lock": 156, "reason": [156, 171, 309, 543, 553, 814, 839, 927], "temporarili": [156, 159, 193, 194, 196, 197, 240, 309, 612, 814, 853, 854, 856, 857, 880, 927], "pyspark": 156, "udf": [156, 162, 216, 230, 289, 295, 309, 324, 394, 555, 596, 731, 777, 814, 840, 875, 909, 915, 927, 939, 1170, 1325], "recommend": [156, 171, 210, 230, 309, 831, 839, 927, 932], "thread_pool_s": 157, "easi": 159, "restor": 159, "restore_default": 159, "set_tbl_row": 159, "whatev": 159, "were": [159, 217, 219, 224, 257, 309, 607, 810, 814, 1194, 1325], "enter": 159, "advantag": [159, 230, 309], "set_": 159, "set_verbos": 159, "do_various_th": 159, "cleaner": 159, "breviti": 159, "vein": 159, "durat": [159, 213, 278, 309, 400, 408, 409, 412, 416, 419, 421, 426, 433, 438, 439, 440, 441, 442, 443, 444, 448, 454, 716, 755, 756, 758, 759, 801, 802, 814, 862, 927, 932, 1014, 1022, 1023, 1026, 1033, 1036, 1039, 1044, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1073, 1305, 1307, 1325], "set_ascii_t": 159, "write_ascii_frame_to_stdout": 159, "sy": 159, "stdout": [159, 191, 309, 567], "nan_as_nul": 161, "polarsdatafram": 161, "notimplementederror": 161, "num_row": 161, "get_column": [161, 269, 309], "dtypekind": 161, "inference_s": [162, 216, 309], "256": [162, 216, 309, 1184, 1325], "map_row": [162, 309], "tri": [162, 216, 309], "approxim": [163, 309, 325, 454, 732, 814, 829, 927, 1073, 1325, 1334], "hyperloglog": [163, 309, 325, 732, 814, 829, 927], "algorithm": [163, 309, 325, 652, 678, 732, 814, 829, 927, 1235, 1261], "cardin": [163, 309, 325, 732, 814, 829, 927], "k": [164, 243, 272, 273, 309, 367, 368, 381, 498, 717, 718, 814, 830, 896, 927, 980, 1119, 1309, 1325], "intoexpr": [164, 192, 193, 194, 195, 196, 197, 240, 246, 247, 250, 254, 272, 282, 283, 287, 309, 323, 342, 362, 365, 366, 368, 399, 454, 460, 477, 481, 482, 509, 510, 531, 532, 533, 534, 592, 607, 616, 618, 620, 622, 624, 627, 629, 631, 635, 637, 638, 647, 652, 678, 683, 684, 685, 691, 692, 707, 718, 728, 730, 736, 739, 740, 741, 742, 744, 746, 749, 750, 753, 757, 764, 779, 781, 784, 790, 793, 796, 798, 814, 830, 852, 853, 854, 855, 856, 857, 880, 882, 883, 886, 890, 896, 902, 903, 907, 927, 931, 956, 975, 978, 979, 1013, 1073, 1079, 1095, 1096, 1129, 1194, 1214, 1220, 1266, 1267, 1268, 1274, 1275, 1325], "nulls_last": [164, 254, 272, 309, 334, 354, 367, 368, 537, 646, 647, 717, 718, 736, 814, 830, 890, 896, 927, 948, 968, 1114, 1156, 1230, 1325], "smallest": [164, 272, 309, 367, 368, 718, 814, 830, 896, 927, 980, 1325], "largest": [164, 272, 309, 368, 717, 718, 814, 830, 896, 927, 1309, 1325], "bottom": [164, 309, 368, 814, 830, 927], "wors": [164, 272, 309, 830, 890, 896, 927], "search": [164, 213, 272, 309, 543, 652, 678, 830, 862, 890, 896, 927, 1235, 1261], "top_k": [164, 309, 367, 368, 718, 814, 830, 927, 980, 1325], "columnnameorselector": [165, 172, 174, 222, 229, 231, 243, 264, 274, 275, 276, 309, 832, 841, 842, 871, 897, 898, 927], "due": [165, 193, 213, 240, 243, 278, 309, 319, 369, 409, 427, 431, 445, 497, 575, 576, 578, 580, 582, 583, 598, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 709, 738, 755, 756, 758, 759, 801, 802, 814, 832, 853, 862, 880, 927, 981, 1023, 1045, 1049, 1063, 1325], "overflow": [165, 309, 369, 384, 385, 675, 698, 710, 814, 832, 927, 981, 1000, 1001, 1258, 1281, 1293, 1325], "u8": [165, 264, 265, 276, 309, 607, 726, 814, 832, 927, 932, 1194, 1300, 1325, 1334], "tempor": [165, 193, 194, 196, 197, 210, 240, 242, 243, 263, 309, 374, 482, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 826, 832, 853, 854, 856, 857, 880, 927, 932, 991, 1096, 1115, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "to_dict": [165, 309, 832, 927, 932], "as_seri": [165, 262, 309, 832, 927, 932, 1007, 1188, 1325], "greater": [166, 213, 309, 472, 474, 482, 644, 673, 674, 685, 703, 814, 862, 927, 1096, 1228, 1256, 1257, 1268, 1286, 1325], "cheap": [166, 167, 247, 283, 309, 833, 834, 883, 903, 927, 990, 994, 1325], "deepcopi": [166, 309, 833, 927, 990, 1325], "13": [166, 167, 171, 180, 181, 190, 203, 214, 226, 240, 282, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 319, 399, 405, 406, 408, 411, 412, 415, 416, 418, 419, 420, 421, 425, 426, 432, 433, 435, 563, 565, 612, 697, 740, 746, 749, 757, 764, 798, 800, 803, 814, 833, 834, 839, 847, 848, 864, 880, 902, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 1013, 1022, 1026, 1033, 1036, 1039, 1044, 1049, 1051, 1063, 1064, 1103, 1106, 1113, 1115, 1170, 1280, 1325], "appl": [168, 201, 212, 235, 238, 262, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 309, 368, 609, 657, 686, 718, 814, 861, 878, 910, 911, 913, 914, 916, 917, 918, 919, 920, 921, 922, 927, 1240, 1269], "banana": [168, 262, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 368, 609, 657, 686, 718, 814, 911, 913, 916, 917, 918, 919, 920, 921, 922], "orang": [168, 290, 291, 293, 294, 296, 297, 299, 301, 302, 309, 368, 718, 814, 910, 911, 913, 914, 916, 917, 919, 921, 922], "pairwis": [169, 309], "pearson": [169, 309, 498, 644, 742, 814, 1119, 1228, 1325], "correl": [169, 309, 742, 791], "coeffici": [169, 309, 644, 814, 1228, 1325], "corrcoef": [169, 309], "percentil": [171, 309, 839, 927, 1008, 1325], "interpol": [171, 233, 301, 309, 462, 481, 558, 601, 623, 624, 788, 814, 839, 877, 921, 927, 1008, 1095, 1189, 1205, 1325], "rollinginterpolationmethod": [171, 233, 301, 309, 601, 623, 624, 788, 814, 839, 877, 921, 927, 1008, 1189, 1205, 1325], "summari": [171, 309, 839, 927, 1008, 1325], "midpoint": [171, 233, 301, 309, 601, 623, 624, 788, 814, 839, 877, 921, 927, 1008, 1189, 1205, 1325], "linear": [171, 204, 233, 301, 309, 480, 481, 507, 558, 601, 623, 624, 740, 741, 788, 814, 839, 860, 877, 921, 927, 1008, 1094, 1095, 1126, 1189, 1205, 1325], "deem": [171, 309, 839, 927], "programmat": [171, 309, 839, 927], "versu": [171, 309, 839, 927], "explor": [171, 309, 839, 927], "glimps": [171, 199, 309], "median": [171, 231, 309, 462, 619, 620, 814, 839, 904, 927, 1008, 1203, 1325], "null_count": [171, 174, 309, 391, 814, 839, 927, 1006, 1008, 1088, 1325], "266667": [171, 309, 839, 927], "666667": [171, 204, 279, 297, 309, 453, 780, 814, 839, 860, 900, 917, 927, 1072, 1325], "std": [171, 309, 626, 627, 814, 839, 927, 1008, 1207, 1325], "101514": [171, 309, 839, 927], "071068": [171, 309, 839, 927], "36": [171, 309, 839, 927], "41": [171, 309, 628, 629, 814, 839, 927, 1334], "34": [171, 309, 693, 839, 927, 1276], "43": [171, 240, 309, 385, 612, 628, 629, 814, 839, 880, 927], "70": [171, 309, 726, 814, 839, 927, 1119, 1325], "88": [171, 309, 839, 927], "90": [171, 309, 697, 839, 927, 1280], "49": [171, 309, 839, 927, 932], "33": [171, 223, 309, 632, 814, 839, 872, 927, 1205, 1325], "subset": [174, 227, 274, 309, 842, 897, 927], "preserv": [174, 182, 192, 195, 212, 216, 267, 268, 309, 397, 398, 399, 423, 424, 463, 512, 641, 814, 842, 849, 861, 927, 1011, 1012, 1013, 1082, 1131, 1225, 1306, 1325], "all_horizont": [174, 309, 727, 842, 927], "is_nul": [174, 309, 814, 842, 927, 1325], "null_equ": [176, 186, 309, 1070, 1215, 1325], "sizeunit": [177, 309, 1071, 1325], "heap": [177, 309, 814, 931, 1071, 1325], "bitmap": [177, 309, 1071, 1325], "therefor": [177, 309, 555, 804, 814, 1071, 1325], "structarrai": [177, 309, 1071, 1325], "constant": [177, 240, 309, 400, 454, 460, 814, 880, 927, 1014, 1071, 1073, 1079, 1325], "unchang": [177, 309, 554, 607, 716, 814, 866, 867, 909, 915, 927, 1071, 1169, 1194, 1307, 1325], "capac": [177, 252, 309, 1071, 1223, 1325], "ffi": [177, 309, 1071, 1325], "kb": [177, 309, 1071, 1325], "mb": [177, 309, 1071, 1325], "gb": [177, 309, 1071, 1325], "revers": [177, 309, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 552, 576, 578, 580, 598, 709, 745, 814, 927, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1325], "1_000_000": [177, 309, 1071, 1325], "17888890": [177, 309], "0601749420166": [177, 309], "more_column": [178, 248, 275, 309, 457, 762, 814, 845, 885, 898, 927, 932], "long": [178, 222, 276, 309, 845, 871, 927], "letter": [178, 292, 303, 309, 457, 652, 660, 678, 762, 814, 845, 912, 923, 927, 932, 1235, 1243, 1261], "onlin": [179, 309, 1078, 1325], "rerun": [179, 309, 1078, 1325], "finish": [179, 309, 1078, 1325], "conveni": [179, 271, 309, 938, 1078, 1325], "Not": [180, 309, 461, 491, 493, 814, 847, 927, 1080, 1325], "fillnullstrategi": [181, 309, 462, 814, 848, 927, 1081, 1325], "matches_supertyp": [181, 309, 848, 927], "forward": [181, 213, 250, 309, 353, 399, 423, 462, 468, 535, 637, 814, 848, 862, 886, 927, 967, 1013, 1041, 1081, 1154, 1220, 1325], "consecut": [181, 309, 361, 462, 468, 650, 814, 848, 927, 1081, 1233, 1325], "fill_nan": [181, 309, 462, 814, 848, 927, 1081, 1325], "intoexprcolumn": [182, 309, 341, 345, 346, 353, 367, 368, 374, 375, 376, 431, 460, 463, 508, 517, 520, 530, 535, 593, 597, 634, 637, 659, 663, 666, 682, 688, 689, 690, 694, 698, 703, 717, 718, 733, 738, 755, 756, 758, 759, 770, 771, 801, 802, 804, 814, 849, 886, 927, 955, 959, 960, 967, 980, 991, 992, 993, 1049, 1079, 1127, 1136, 1139, 1149, 1154, 1184, 1242, 1246, 1249, 1265, 1271, 1272, 1273, 1277, 1286, 1309, 1325], "constraint": [182, 309, 463, 497, 575, 576, 578, 580, 582, 583, 598, 709, 804, 814, 849, 927], "behav": [182, 309, 463, 555, 689, 690, 814, 849, 927], "eq": [182, 309, 452, 463, 814, 849, 927, 1325], "implicitli": [182, 309, 463, 804, 814, 849, 927], "get_column_index": [183, 309], "reduct": [185, 309], "supercast": [185, 309], "parent": [185, 309], "arithmet": [185, 309], "zip_with": [185, 309, 1325], "foo11": [185, 309], "bar22": [185, 309], "nth": [187, 260, 309, 471, 685, 713, 814, 851, 895, 927, 1086, 1268, 1296, 1325], "th": [187, 260, 309, 471, 517, 531, 644, 663, 694, 713, 814, 851, 895, 927, 1086, 1136, 1150, 1228, 1246, 1277, 1296, 1325], "retriev": [188, 266, 309, 339, 340, 505, 506, 704, 786, 953, 954, 1124, 1125, 1287, 1303, 1325], "max_items_per_column": [191, 309], "max_colname_length": [191, 309], "return_as_str": [191, 309, 567], "preview": [191, 309], "few": [191, 309], "exce": [191, 309], "ellipsi": [191, 309], "head": [191, 215, 259, 309, 323, 502, 592, 814, 865, 927, 1121, 1294, 1325], "tail": [191, 199, 309, 323, 644, 814, 927, 1090, 1228, 1325], "usd": [191, 309, 1334], "eur": [191, 309, 1334], "named_bi": [192, 309, 852, 927], "groupbi": [192, 231, 309, 324, 555, 731, 777, 814, 927], "consist": [192, 195, 229, 267, 309, 693, 852, 855, 927, 932, 938, 1078, 1276, 1305, 1325], "agg": [192, 193, 196, 231, 240, 309, 318, 368, 463, 465, 470, 473, 553, 555, 566, 592, 646, 647, 718, 725, 777, 814, 835, 836, 844, 846, 852, 853, 854, 856, 857, 876, 880, 888, 927, 932], "Or": [192, 193, 213, 240, 254, 278, 287, 309, 454, 592, 612, 647, 755, 756, 758, 759, 801, 802, 804, 814, 852, 853, 862, 880, 890, 907, 927, 1073, 1325], "index_column": [193, 194, 196, 197, 240, 309, 612, 814, 853, 854, 856, 857, 880, 927], "timedelta": [193, 194, 196, 197, 213, 240, 278, 309, 427, 431, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 862, 880, 927, 932, 1029, 1037, 1045, 1049, 1063, 1073, 1179, 1180, 1232, 1314, 1325], "include_boundari": [193, 196, 309, 853, 856, 927], "closedinterv": [193, 194, 196, 197, 240, 309, 482, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 880, 927, 1096, 1325], "label": [193, 266, 271, 309, 392, 600, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 814, 853, 876, 927, 1007, 1188, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "group_bi": [193, 195, 227, 231, 240, 278, 308, 309, 318, 368, 463, 465, 470, 473, 553, 555, 592, 646, 647, 718, 725, 777, 814, 835, 836, 844, 846, 853, 855, 876, 880, 888, 926, 927, 932], "start_bi": [193, 196, 309, 853, 856, 927], "startbi": [193, 196, 309, 853, 856, 927], "check_sort": [193, 194, 196, 197, 240, 309, 454, 612, 814, 853, 854, 856, 857, 880, 927, 1073, 1325], "dynamicgroupbi": [193, 196, 309], "member": [193, 309, 853, 927, 1104, 1325], "earliest": [193, 196, 309, 430, 431, 445, 693, 696, 757, 853, 856, 927, 1048, 1049, 1063, 1276, 1279], "datapoint": [193, 196, 309, 853, 856, 927], "descript": [193, 309, 853, 927], "ascend": [193, 194, 196, 197, 240, 309, 612, 814, 853, 854, 856, 857, 880, 927], "dynam": [193, 196, 309, 358, 543, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 853, 856, 927, 931, 972, 1162, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "matter": [193, 194, 196, 197, 210, 240, 242, 243, 263, 309, 612, 689, 690, 814, 853, 854, 856, 857, 880, 927], "interv": [193, 194, 196, 197, 240, 278, 309, 392, 431, 445, 477, 482, 600, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 854, 856, 857, 880, 927, 1007, 1021, 1024, 1025, 1032, 1035, 1038, 1040, 1043, 1046, 1047, 1049, 1054, 1063, 1064, 1091, 1096, 1188, 1325], "_lower_boundari": [193, 309, 853, 927], "_upper_boundari": [193, 309, 853, 927], "harder": [193, 196, 309, 853, 856, 927], "inclus": [193, 194, 196, 197, 240, 309, 482, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 683, 684, 733, 755, 756, 758, 759, 770, 771, 801, 802, 814, 853, 854, 856, 857, 880, 927, 1096, 1266, 1267, 1325], "boundari": [193, 309, 374, 375, 376, 477, 814, 853, 927, 991, 992, 993, 1091, 1325], "mondai": [193, 196, 309, 399, 445, 447, 738, 853, 856, 927, 1013, 1063, 1065], "tuesdai": [193, 196, 309, 853, 856, 927], "wednesdai": [193, 196, 309, 434, 437, 853, 856, 927, 1052, 1055], "thursdai": [193, 196, 309, 399, 738, 853, 856, 927, 1013], "fridai": [193, 196, 309, 399, 434, 437, 738, 853, 856, 927, 1013, 1052, 1055], "saturdai": [193, 196, 309, 853, 856, 927], "sundai": [193, 196, 309, 399, 434, 437, 447, 738, 853, 856, 927, 1013, 1052, 1055, 1065], "weekli": [193, 196, 309, 445, 853, 856, 927, 1063], "week": [193, 196, 213, 240, 278, 309, 399, 427, 431, 445, 447, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 738, 755, 756, 758, 759, 760, 801, 802, 814, 853, 856, 862, 880, 927, 932, 1013, 1045, 1049, 1063, 1065, 1073, 1325], "shift": [193, 196, 251, 309, 361, 395, 468, 511, 593, 638, 740, 814, 853, 856, 887, 927, 1009, 1130, 1184, 1221, 1325], "front": [193, 196, 309, 853, 856, 927], "sorted": [193, 194, 196, 197, 240, 309, 454, 814, 853, 854, 856, 857, 880, 927], "verifi": [193, 194, 196, 197, 240, 309, 454, 814, 853, 854, 856, 857, 880, 927], "incorrect": [193, 194, 196, 197, 240, 309, 448, 454, 553, 612, 636, 814, 853, 854, 856, 857, 880, 909, 915, 927, 1066, 1073, 1218, 1325], "roll": [193, 194, 197, 309, 399, 423, 424, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 740, 791, 792, 814, 853, 854, 857, 927, 1013, 1041, 1042, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1325], "re": [193, 209, 309, 423, 424, 434, 437, 853, 927, 1041, 1042, 1052, 1055, 1333], "1d": [193, 213, 240, 278, 309, 401, 427, 431, 439, 442, 445, 448, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 774, 801, 802, 814, 853, 862, 880, 927, 932, 1015, 1024, 1031, 1045, 1049, 1054, 1057, 1060, 1063, 1073, 1325], "set_index": [193, 309, 853, 927], "resampl": [193, 309, 853, 927], "unlik": [193, 309, 853, 927], "evenli": [193, 309, 853, 927], "upsampl": [193, 309, 853, 927], "1n": [193, 213, 240, 278, 309, 427, 431, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063, 1073, 1325], "1u": [193, 213, 240, 278, 309, 427, 431, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063, 1073, 1325], "1m": [193, 213, 240, 278, 309, 427, 431, 444, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1058, 1059, 1061, 1062, 1063, 1073, 1325], "millisecond": [193, 213, 240, 278, 309, 411, 420, 427, 431, 441, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 801, 802, 814, 853, 862, 880, 927, 932, 1045, 1049, 1059, 1063, 1073, 1325], "minut": [193, 213, 240, 278, 309, 411, 415, 418, 425, 427, 431, 432, 442, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 757, 758, 759, 760, 800, 801, 802, 814, 853, 862, 880, 927, 932, 1045, 1049, 1060, 1063, 1073, 1325], "1h": [193, 213, 240, 278, 309, 409, 427, 431, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1023, 1025, 1045, 1049, 1063, 1073, 1325], "hour": [193, 213, 240, 278, 309, 415, 418, 420, 425, 427, 431, 432, 439, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 757, 758, 759, 760, 800, 801, 802, 814, 853, 862, 880, 927, 932, 1045, 1049, 1057, 1063, 1073, 1325], "1w": [193, 213, 240, 278, 309, 427, 431, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063, 1073, 1325], "1mo": [193, 213, 240, 278, 309, 404, 423, 424, 427, 430, 431, 438, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1018, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1056, 1063, 1064, 1073, 1325], "month": [193, 213, 240, 278, 309, 407, 423, 424, 427, 431, 434, 437, 445, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 754, 755, 756, 757, 758, 759, 760, 801, 802, 814, 853, 862, 880, 927, 1021, 1041, 1042, 1045, 1049, 1052, 1055, 1063, 1073, 1325], "1q": [193, 213, 240, 278, 309, 427, 431, 445, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063], "quarter": [193, 213, 240, 278, 309, 427, 431, 445, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063], "1y": [193, 213, 240, 278, 309, 427, 431, 445, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1045, 1049, 1063], "1i": [193, 240, 278, 309, 454, 612, 615, 617, 619, 621, 623, 626, 628, 630, 814, 853, 880, 927, 1073, 1325], "3d12h4m25": [193, 213, 240, 278, 309, 431, 445, 454, 612, 755, 756, 758, 759, 801, 802, 814, 853, 862, 880, 927, 1049, 1063, 1073, 1325], "correspond": [193, 213, 240, 267, 278, 309, 368, 414, 427, 431, 445, 555, 603, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 718, 755, 756, 758, 759, 801, 802, 814, 835, 853, 862, 880, 927, 1028, 1045, 1049, 1063, 1190, 1325], "daylight": [193, 213, 240, 278, 309, 400, 409, 427, 431, 445, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 755, 756, 758, 759, 760, 801, 802, 814, 853, 862, 880, 927, 1023, 1045, 1049, 1063], "10i": [193, 309, 853, 927], "datetime_rang": [193, 309, 401, 404, 423, 424, 427, 430, 431, 438, 439, 440, 441, 442, 443, 444, 445, 448, 615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 755, 814, 853, 927, 1014, 1015, 1018, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], "30m": [193, 309, 431, 445, 853, 927, 1049, 1063], "lower_bound": [193, 309, 374, 376, 482, 814, 853, 927, 991, 993, 1096, 1312, 1325], "upper_bound": [193, 309, 374, 375, 482, 543, 814, 853, 927, 991, 992, 1096, 1168, 1325], "bys": [193, 309, 853, 927], "int_rang": [193, 276, 285, 295, 309, 733, 773, 853, 867, 906, 915, 927], "2i": [193, 309, 853, 927], "3i": [193, 309, 853, 927], "a_agg_list": [193, 309, 853, 927], "rollinggroupbi": [194, 197, 240, 309], "more_bi": [195, 229, 254, 309, 647, 814, 855, 890, 927], "group_by_dynam": [196, 240, 309, 856, 880, 927], "_lower_bound": [196, 309, 856, 927], "_upper_bound": [196, 309, 856, 927], "seed_1": [198, 309, 475, 814, 1089, 1325], "seed_2": [198, 309, 475, 814, 1089, 1325], "seed_3": [198, 309, 475, 814, 1089, 1325], "hash": [198, 309, 814, 1325], "Its": [198, 309, 475, 814, 1089, 1325], "u64": [198, 285, 309, 475, 605, 814, 876, 906, 927, 932, 1089, 1192, 1325], "10783150408545073287": [198, 309], "1438741209321515184": [198, 309], "10047419486152048166": [198, 309], "2047317070637311557": [198, 309], "ab": [199, 215, 259, 282, 309, 704, 706, 814, 902, 927, 932, 1090, 1121, 1294, 1325], "in_plac": [201, 252, 280, 309, 1191, 1223, 1230, 1325], "grown": [201, 309], "insert_column": [202, 309], "intermedi": [204, 309, 860, 927, 1334], "333333": [204, 309, 497, 575, 814, 860, 927, 1184, 1209, 1325], "mask": [205, 207, 309, 363, 483, 485, 486, 489, 490, 496, 594, 595, 651, 655, 662, 814, 976, 1082, 1088, 1096, 1098, 1101, 1102, 1107, 1108, 1116, 1185, 1186, 1216, 1234, 1238, 1245, 1316, 1325], "visual": [205, 207, 309, 888, 927], "scalar": [208, 216, 241, 309, 635, 663, 668, 682, 694, 731, 774, 777, 814, 931, 1118, 1214, 1246, 1251, 1265, 1277, 1325], "buffer_s": [210, 309], "fit": [210, 252, 276, 309, 639, 790, 814, 1222, 1223, 1325], "signific": [210, 216, 309, 324, 555, 633, 814, 1170, 1211, 1325], "4x": [210, 309], "materialis": [210, 211, 241, 242, 309], "rows_by_kei": [210, 242, 309], "iter_row": [211, 241, 242, 243, 309], "17_500": [211, 309], "klmnoopqrstuvwxyz": [211, 309], "__name__": [211, 309], "7500": [211, 309], "15_000": [211, 309], "record_batch": [211, 309], "to_arrow": [211, 309, 1305, 1325], "to_batch": [211, 309], "date32": [211, 309], "large_str": [211, 261, 268, 309], "15000": [211, 309], "2500": [211, 271, 309], "left_on": [212, 213, 277, 309, 861, 862, 899, 927], "right_on": [212, 213, 277, 309, 861, 862, 899, 927], "suffix": [212, 213, 246, 282, 287, 309, 319, 365, 368, 491, 493, 494, 495, 552, 576, 578, 581, 582, 583, 592, 598, 609, 657, 689, 692, 718, 814, 861, 862, 882, 902, 904, 907, 927, 932, 978, 1240, 1275], "_right": [212, 213, 309, 861, 862, 927], "joinvalid": [212, 309, 861, 927], "join_nul": [212, 309, 861, 927], "coalesc": [212, 277, 309, 693, 861, 899, 927, 1276], "fashion": [212, 309, 844, 846, 876, 888, 927], "semi": [212, 309, 861, 927], "anti": [212, 309, 861, 915, 927, 1213, 1216, 1325], "cross": [212, 309, 861, 927], "cartesian": [212, 309, 861, 927], "many_to_mani": [212, 309, 861, 927], "one_to_on": [212, 309, 861, 927], "one_to_mani": [212, 309, 861, 927], "many_to_on": [212, 309, 861, 927], "join_asof": [212, 309, 861, 927], "other_df": [212, 309], "ham_right": [212, 309, 861, 927], "by_left": [213, 309, 862, 927], "by_right": [213, 309, 862, 927], "asofjoinstrategi": [213, 309, 862, 927], "allow_parallel": [213, 309, 861, 862, 927], "force_parallel": [213, 309, 861, 862, 927], "asof": [213, 309, 862, 927], "rather": [213, 309, 469, 553, 567, 600, 611, 703, 814, 862, 927, 1188, 1198, 1286, 1325], "asof_join": [213, 309], "distanc": [213, 309, 477, 814, 862, 927, 1091, 1325], "plan": [213, 214, 309, 394, 814, 831, 835, 840, 844, 861, 862, 884, 888, 927], "gdp": [213, 309, 862, 927], "date_rang": [213, 278, 309, 407, 410, 428, 436, 447, 1021, 1040, 1046, 1047, 1064, 1065], "2016": [213, 309, 862, 927], "4164": [213, 309, 862, 927], "4411": [213, 309, 862, 927], "4566": [213, 309, 862, 927], "4696": [213, 309, 862, 927], "4827": [213, 309], "2017": [213, 309, 862, 927], "2018": [213, 309, 430, 862, 927, 1048], "2019": [213, 309, 862, 927], "popul": [213, 309, 862, 927], "82": [213, 309, 862, 927], "66": [213, 277, 309, 628, 629, 726, 814, 862, 899, 927, 1119, 1205, 1325], "83": [213, 309, 862, 927], "quit": [213, 309], "earlier": [213, 309], "later": [213, 309, 566, 884, 927], "countri": [213, 309, 400, 1014], "gdp_date": [213, 309], "gdp2": [213, 309], "germani": [213, 309], "netherland": [213, 309], "784": [213, 309], "833": [213, 309], "914": [213, 309], "910": [213, 309, 660, 1243], "909": [213, 309], "pop2": [213, 309], "request": [214, 309], "describe_plan": [214, 309], "unoptim": [214, 309], "describe_optimized_plan": [214, 309], "show_graph": [214, 309, 927], "un": [214, 309], "graphviz": [214, 309, 888, 927], "much": [216, 276, 295, 309, 391, 516, 541, 555, 667, 668, 777, 814, 915, 1006, 1135, 1160, 1170, 1250, 1251, 1325], "intens": [216, 295, 309, 592, 814, 1170, 1325], "materi": [216, 243, 295, 309, 835, 876, 915, 927, 932, 1170, 1325], "parallelis": [216, 295, 309, 1170, 1325], "achiev": [216, 295, 309, 555, 668, 814, 1007, 1170, 1188, 1251, 1325], "black": [216, 309, 362, 363, 364, 365, 366], "arbitrarili": [216, 309], "rearrang": [216, 309], "transform": [216, 255, 309, 553, 699, 701, 702, 814, 891, 927], "map_el": [216, 309, 324, 553, 726, 814, 939, 1325], "lru_cach": [216, 309, 555, 814, 1170, 1325], "column_1": [216, 273, 309], "better": [216, 266, 267, 295, 309, 555, 668, 814, 831, 915, 927, 1213, 1216, 1251, 1325], "axi": [217, 219, 222, 224, 257, 309, 734, 735, 871, 927], "max_horizont": [217, 309, 778], "null_strategi": [219, 257, 309], "nullstrategi": [219, 257, 309], "mean_horizont": [219, 309, 780], "propag": [219, 257, 309, 346, 452, 520, 584, 585, 587, 650, 741, 814, 960, 1139, 1179, 1180, 1233, 1325], "spam": [219, 309, 660, 1243], "ignore_nul": [220, 258, 309, 320, 322, 346, 453, 455, 456, 520, 650, 727, 729, 741, 814, 936, 937, 960, 1072, 1074, 1075, 1139, 1233, 1315, 1325], "id_var": [222, 309, 871, 927], "value_var": [222, 309, 871, 927], "variable_nam": [222, 309, 871, 927], "value_nam": [222, 309, 871, 927], "unpivot": [222, 309, 871, 927], "massag": [222, 309, 871, 927], "measur": [222, 309, 871, 927], "steve": [223, 309, 872, 927], "elis": [223, 309, 872, 927], "ag": [223, 309, 872, 927], "anna": [223, 309, 872, 927], "megan": [223, 309, 872, 927], "thoma": [223, 309, 872, 927], "min_horizont": [224, 309, 783, 793], "what": [227, 309, 312, 399, 553, 652, 678, 814, 1013, 1235, 1261, 1315, 1325, 1329], "pack": [227, 309], "expr_unique_subset": [227, 309], "df_nuniqu": [227, 309], "df_agg_nuniqu": [227, 309], "include_kei": [229, 243, 309], "offer": [230, 309, 596, 814, 875, 927], "cast_str_to_int": [230, 309, 875, 927], "col_nam": [230, 309, 555, 804, 814, 875, 927], "tdf": [230, 309, 875, 927], "aggregate_funct": [231, 309, 932], "pivotagg": [231, 309], "sort_column": [231, 309], "section": [231, 309, 651, 659, 660, 662, 676, 677, 755, 756, 758, 759, 801, 802, 1234, 1242, 1243, 1245, 1259, 1260], "predefin": [231, 309], "predict": [231, 234, 278, 309], "transpos": [231, 309], "discoveri": [231, 309], "col3": [231, 309, 1334], "tanh": [231, 309, 814, 1325], "998347": [231, 309], "964028": [231, 309], "999954": [231, 309], "unique_column_valu": [231, 309], "ix": [231, 309], "column_nam": [235, 236, 273, 309, 878, 927], "coo": [235, 309, 878, 927], "car": [235, 262, 309, 609, 814, 878, 927], "cam": [235, 309, 878, 927], "replace_column": [237, 309], "t_0": [240, 309, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 880, 927], "t_1": [240, 309, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 880, 927, 1073, 1325], "t_n": [240, 309, 454, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 880, 927, 1073, 1325], "strptime": [240, 309, 430, 612, 814, 880, 927, 1048], "set_sort": [240, 278, 309, 612, 814, 862, 880, 927, 1325], "2d": [240, 266, 267, 309, 427, 612, 774, 814, 880, 927, 1014, 1021], "sum_a": [240, 309, 612, 814, 880, 927], "min_a": [240, 309, 612, 814, 880, 927], "max_a": [240, 309, 612, 814, 880, 927], "by_pred": [241, 309], "accord": [241, 309, 554, 600, 755, 756, 758, 759, 801, 802, 814, 1028, 1188, 1325], "mutual": [241, 309], "exclus": [241, 309, 726, 733, 770, 771, 814], "clariti": [241, 309], "toomanyrowsreturnederror": [241, 309], "norowsreturnederror": [241, 309], "inherit": [241, 309, 394, 814, 840, 927], "rowserror": [241, 309], "littl": [242, 309], "peak": [242, 309, 594, 595, 814, 1185, 1186, 1325], "flat": [243, 309, 514, 608, 814, 1133, 1195, 1325], "high": [243, 309, 600, 814, 826, 1188, 1325], "cost": [243, 309], "reoconstruct": [243, 309], "defaultdict": [243, 309], "assum": [243, 309, 866, 867, 909, 915, 927], "with_replac": [244, 309, 530, 634, 814, 1149, 1212, 1325], "ordereddict": [245, 309, 577, 579, 581, 796, 881, 927], "named_expr": [246, 247, 282, 283, 309, 707, 793, 796, 882, 883, 902, 903, 927], "threshold": [246, 309, 882, 927], "set_auto_structifi": [246, 282, 309, 882, 902, 927], "auto_structifi": [246, 282, 309, 882, 902, 927], "is_odd": [246, 309, 882, 927, 932], "_is_odd": [246, 309, 882, 927], "fill_valu": [250, 251, 276, 309, 637, 638, 814, 886, 887, 927, 1220, 1221, 1325], "opposit": [250, 309, 353, 535, 637, 814, 886, 927, 967, 1154, 1220, 1325], "lag": [250, 309, 353, 535, 637, 740, 814, 886, 927, 967, 1154, 1220, 1325], "shrink": [252, 309, 639, 814, 1222, 1223, 1325], "hold": [252, 267, 309, 1305, 1325], "multithread": [254, 309, 367, 368, 647, 717, 718, 736, 814, 830, 890, 896, 927, 968, 1156, 1230, 1325], "although": [255, 309, 891, 927], "sqlcontext": [255, 309, 826, 891, 927, 1333], "1999": [255, 309, 427, 932, 1045], "2010": [255, 309, 932], "2077": [255, 309, 932], "888": [255, 309, 891, 927], "AND": [255, 309, 727, 728, 891, 927, 932], "2050": [255, 309], "alias": [255, 309, 891, 927], "a_is_even": [255, 309, 891, 927], "concat_w": [255, 309, 891, 927], "b_b": [255, 309], "float4": [255, 309, 891, 927], "ddof": [256, 279, 309, 355, 360, 538, 545, 626, 627, 630, 631, 649, 724, 742, 744, 791, 792, 795, 803, 814, 892, 900, 927, 969, 974, 1157, 1164, 1207, 1209, 1232, 1314, 1325], "deviat": [256, 309, 455, 626, 627, 649, 795, 814, 892, 927, 1074, 1232, 1325], "degre": [256, 279, 309, 538, 545, 602, 626, 627, 630, 631, 649, 724, 735, 742, 744, 791, 792, 795, 803, 814, 892, 900, 927, 1207, 1209, 1232, 1314, 1325], "freedom": [256, 279, 309, 538, 545, 626, 627, 630, 631, 649, 724, 742, 744, 791, 792, 795, 803, 814, 892, 900, 927, 1207, 1209, 1232, 1314, 1325], "divisor": [256, 279, 309, 538, 545, 626, 627, 630, 631, 649, 724, 742, 744, 791, 792, 795, 803, 814, 892, 900, 927, 1207, 1209, 1232, 1314, 1325], "816497": [256, 309], "gather_everi": [260, 309, 713, 814, 895, 927, 1296, 1325], "mostli": [261, 309, 463, 814], "categoricaltyp": [261, 309], "fruit": [262, 309, 609, 657, 686, 694, 814, 1240, 1269, 1277], "beetl": [262, 309, 609, 814], "audi": [262, 309, 609, 814], "28": [262, 267, 309, 317, 430, 448, 814, 1048, 1066, 1305, 1325, 1334], "300": [262, 309, 590, 814, 932, 1201, 1202, 1204, 1325], "drop_first": [264, 309, 1300, 1325], "dummi": [264, 309, 1300, 1325], "foo_1": [264, 309], "foo_2": [264, 309], "bar_3": [264, 309], "bar_4": [264, 309], "ham_a": [264, 309], "ham_b": [264, 309], "instantiat": [265, 309, 1302, 1325], "from_repr": [265, 309, 1302, 1325], "df_from_str_repr": [265, 309], "eval": [265, 309, 555, 761, 814, 1170, 1302, 1325], "return_typ": [266, 271, 309], "jaxexporttyp": [266, 309], "devic": [266, 309, 1303, 1325], "jax": [266, 309, 1303, 1325], "indexord": [266, 267, 309], "fortran": [266, 267, 309], "gpu": [266, 309, 1303, 1325], "tpu": [266, 309, 1303, 1325], "design": [266, 271, 309], "32bit": [266, 309], "jax_enable_x64": [266, 309], "startup": [266, 309], "to_dummi": [266, 271, 309, 1325], "to_numpi": [266, 271, 309, 553, 814, 1325], "to_torch": [266, 309, 1325], "lbl": [266, 271, 309], "feat1": [266, 271, 309], "feat2": [266, 271, 309], "gpudevic": [266, 309], "process_index": [266, 309], "gpu_devic": [266, 309], "downstream": [267, 309, 636, 814, 1218, 1325], "applic": [267, 309, 555, 615, 617, 619, 621, 623, 626, 628, 630, 814], "prevent": [267, 309, 319, 384, 385, 497, 575, 710, 814, 927, 1000, 1001, 1293, 1325], "reshap": [267, 309, 514, 814, 1133, 1325], "immut": [267, 309, 1305, 1325], "arr": [267, 309, 806, 1305, 1317, 1325], "writeabl": [267, 309, 1305, 1325], "runtimeerror": [267, 309, 1305, 1325], "c_contigu": [267, 309], "u1": [267, 309], "f4": [267, 309], "use_pyarrow_extension_arrai": [268, 309, 1306, 1325], "extens": [268, 309, 1306, 1325], "na": [268, 309, 686, 1306, 1325], "doubl": [268, 309], "four": [270, 309], "five": [270, 309, 1334], "torchexporttyp": [271, 309], "tensor": [271, 309, 1308, 1325], "polarsdataset": [271, 309], "pytorch": [271, 309, 1308, 1325], "tensordataset": [271, 309], "label_column": [271, 309], "to_jax": [271, 309, 1325], "0000": [271, 309, 1308, 1325, 1334], "5000": [271, 309, 1308, 1325], "opt": [271, 309], "half": [271, 309, 431, 453, 454, 455, 456, 814, 1049, 1072, 1073, 1074, 1075, 1325], "experiment": [271, 309], "model": [271, 309], "float16": [271, 309], "dataload": [271, 309], "util": [271, 309, 766, 846, 927, 931], "dl": [271, 309], "scikit": [271, 309], "learn": [271, 309], "sklearn": [271, 309], "fetch_california_h": [271, 309], "hous": [271, 309], "feature_nam": [271, 309], "train": [271, 309], "loader": [271, 309], "bottom_k": [272, 309, 368, 717, 718, 814, 896, 927, 1309, 1325], "header_nam": [273, 309], "perhap": [273, 309], "column_2": [273, 309], "name_gener": [273, 309], "base_nam": [273, 309], "my_column_": [273, 309], "my_column_0": [273, 309], "my_column_1": [273, 309], "my_column_2": [273, 309], "j": [273, 309], "new_id": [273, 309], "uniquekeepstrategi": [274, 309, 897, 927], "kept": [274, 309, 897, 927], "decompos": [275, 309, 898, 927], "t_a": [275, 309, 898, 927], "t_b": [275, 309, 898, 927], "t_c": [275, 309, 898, 927], "t_d": [275, 309, 898, 927], "womp": [275, 309, 898, 927], "t_": [275, 309, 454, 814, 898, 927, 1073, 1325], "t_struct": [275, 309, 898, 927], "step": [276, 309, 467, 733, 770, 771, 814], "unstackdirect": [276, 309], "pivot": [276, 309, 932], "ascii_uppercas": [276, 309], "h": [276, 309, 317, 434, 437, 639, 676, 677, 693, 696, 700, 814, 1259, 1260, 1276, 1279, 1283], "x_0": [276, 309, 453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "x_1": [276, 309, 454, 814, 1073, 1325], "y_0": [276, 309, 453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "y_1": [276, 309], "z_0": [276, 309], "z_1": [276, 309], "include_nul": [277, 309, 899, 927], "implicit": [277, 309, 899, 927], "syntact": [277, 309, 607, 727, 729, 732, 743, 745, 748, 762, 767, 768, 769, 778, 780, 782, 783, 785, 787, 788, 793, 795, 797, 799, 803, 805, 814, 899, 927, 1194, 1231, 1325], "sugar": [277, 309, 607, 727, 729, 732, 743, 745, 748, 762, 767, 768, 769, 778, 780, 782, 783, 785, 787, 788, 793, 795, 797, 799, 803, 805, 814, 899, 927, 1194, 1231, 1325], "400": [277, 309, 440, 441, 443, 899, 927, 1201, 1202, 1204, 1325], "600": [277, 309, 440, 441, 443, 899, 927, 932], "700": [277, 309, 899, 927], "new_df": [277, 309, 899, 927], "time_column": [278, 309], "frequenc": [278, 309], "chain": [278, 309, 431, 445, 497, 575, 576, 578, 580, 582, 583, 598, 709, 804, 814, 1049, 1063], "offset_bi": [278, 309, 431, 445, 760, 1049, 1063], "forward_fil": [278, 309, 361, 382, 385, 637, 814], "varianc": [279, 309, 456, 498, 630, 631, 724, 803, 814, 900, 927, 1075, 1119, 1209, 1314, 1325], "grow": [280, 309], "not_": [282, 309, 492, 814, 902, 927, 932, 1325], "not_c": [282, 309, 902, 927], "52": [282, 309, 446, 632, 814, 862, 902, 927], "diff": [282, 309, 438, 439, 440, 441, 442, 443, 444, 531, 814, 902, 927, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1150, 1325], "_diff": [282, 309, 902, 927], "row_nr": [284, 309, 905, 927], "1001": [285, 309, 906, 927], "1002": [285, 309, 906, 927], "named_agg": [287, 907], "_sum": [287, 907], "_mean_squar": [287, 907], "b_sum": [287, 907], "c_mean_squar": [287, 907], "sub": [289, 295, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 360, 520, 528, 814, 953, 954, 955, 958, 959, 960, 961, 962, 963, 964, 965, 969, 970, 974, 1139, 1147], "map_group": [289, 731, 909], "toward": [290, 501, 522, 745, 814, 910, 1120, 1141, 1325], "nr": [292, 303, 912, 923], "triangl": [295, 915], "group_df": [295, 915], "maxim": [296, 332, 814, 916, 946, 1325], "833333": [297, 917], "minim": [299, 333, 340, 506, 639, 647, 814, 919, 947, 954, 1125, 1174, 1222, 1325], "overview": [309, 814, 826, 927, 1325, 1334], "frameinittyp": [309, 927], "entri": [309, 927, 1333], "workaround": 309, "pola": 309, "2846": 309, "df4": 309, "df5": 309, "df6": 309, "approx_n_uniqu": [309, 814, 927], "corr": 309, "drop_in_plac": 309, "drop_nul": [309, 397, 814, 927, 1011, 1325], "estimated_s": [309, 1325], "explod": [309, 368, 465, 592, 608, 718, 814, 927, 931, 1195, 1325], "find_idx_by_nam": 309, "fold": [309, 564, 739, 746, 747, 750, 751, 789], "frame_equ": 309, "group_by_rol": [309, 927], "groupby_dynam": [309, 927], "groupby_rol": [309, 927], "hash_row": 309, "insert_at_idx": 309, "is_dupl": [309, 814, 1325], "is_empti": [309, 1325], "is_uniqu": [309, 814, 1325], "iter_column": 309, "iter_slic": 309, "melt": [309, 927], "merge_sort": [309, 927], "n_chunk": [309, 938, 1078, 1191, 1325], "n_uniqu": [309, 325, 814, 1325], "pipe": [309, 814, 927], "plot": [309, 876, 888, 927, 1325], "hvplottabularpolar": [309, 1325], "defer": [309, 312, 1325, 1329], "galleri": [309, 312, 1325, 1329], "scatter": [309, 312, 1217, 1325], "speci": [309, 312], "setosa": [309, 312], "versicolor": [309, 312], "stock_1": [309, 312], "stock_2": [309, 312], "quantil": [309, 600, 623, 624, 814, 927, 1188, 1205, 1325], "replace_at_idx": 309, "select_seq": [309, 927], "shift_and_fil": [309, 814, 927, 1325], "shrink_to_fit": [309, 1325], "take_everi": [309, 814, 927, 1325], "to_panda": [309, 1325], "to_struct": [309, 660], "unnest": [309, 392, 600, 610, 660, 661, 684, 685, 706, 707, 723, 814, 927, 972, 1007, 1162, 1188, 1197, 1267, 1268, 1325], "unstack": 309, "with_columns_seq": [309, 927], "with_row_count": [309, 927], "write_avro": 309, "write_databas": 309, "write_delta": 309, "write_excel": 309, "write_ipc_stream": 309, "write_json": 309, "write_parquet": 309, "cum_prod": [317, 389, 814, 1004, 1325], "ghi": [317, 660, 814, 932, 1243], "94": [318, 814], "to_uppercas": [319, 582, 661, 814], "confus": [320, 491, 493, 678, 814], "kleen": [320, 322, 727, 728, 729, 730, 814, 936, 937, 1325], "bitwis": [321, 591, 726, 727, 728, 729, 730, 814], "upcast": [323, 814], "skip_nul": [324, 555, 814, 939, 1170, 1325], "pass_nam": [324, 555, 814], "mapelementsstrategi": [324, 555, 814], "thread_loc": [324, 555, 814], "unknown": [324, 659, 774, 814, 1242], "alpha": [324, 453, 455, 456, 814, 844, 846, 876, 888, 927, 932, 1072, 1074, 1075, 1325], "stage": [324, 814], "code": [324, 362, 363, 364, 365, 366, 394, 555, 636, 814, 840, 846, 864, 927, 1218, 1325], "gil": [324, 555, 814], "approx": [325, 814], "1005": [325, 814], "invers": [326, 327, 328, 329, 330, 331, 814, 940, 941, 942, 943, 944, 945, 1305, 1325], "cosin": [326, 327, 377, 378, 553, 814, 940, 941, 995, 996, 1325], "570796": [326, 328, 814, 940, 942, 1325], "hyperbol": [327, 329, 331, 378, 643, 715, 814, 941, 943, 945, 996, 1227, 1298, 1325], "sine": [328, 329, 553, 642, 643, 814, 942, 943, 1226, 1227, 1325], "881374": [329, 814, 943, 1325], "tangent": [330, 331, 714, 715, 814, 944, 945, 1297, 1298, 1325], "785398": [330, 734, 735, 814, 944, 1325], "rank": [334, 513, 736, 742, 761, 814, 948, 1132, 1325], "arg_wher": [335, 814], "subarrai": [337, 338, 951, 952], "membership": [341, 508, 955, 1127], "number_of_two": [342, 510], "null_on_oob": [345, 516, 518, 541, 959, 1135, 1137, 1160], "sublist": [345, 505, 506, 508, 511, 515, 516, 517, 518, 519, 520, 521, 531, 536, 540, 541, 543, 959, 1104, 1124, 1125, 1127, 1130, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1150, 1155, 1159, 1160, 1162, 1325], "x_y": [346, 520], "707107": [355, 455, 626, 627, 814, 969, 1074, 1325], "i8": [357, 358, 407, 411, 415, 418, 420, 422, 425, 428, 429, 432, 446, 447, 542, 639, 787, 790, 805, 814, 971, 972, 1009, 1021, 1025, 1038, 1040, 1047, 1050, 1064, 1065, 1161, 1196, 1222, 1312, 1325], "field_0": [358, 543, 972, 1162], "field_1": [358, 543, 972, 1162], "field_n": [358, 543, 972, 1162], "n0": [358, 543], "n1": [358, 543], "c1": 358, "c2": 358, "c3": 358, "seen": [361, 468, 814], "substr": [362, 365, 366, 651, 657, 662, 676, 677, 682, 683, 684, 685, 686, 932, 975, 978, 979, 1234, 1240, 1245, 1259, 1260, 1265, 1266, 1267, 1268, 1269], "ends_with": [362, 366, 651, 686, 932, 1269], "yellow": [362, 363, 364, 365, 366], "x00": [362, 363, 364, 365, 366, 655, 975, 976, 977, 978, 979, 1238], "xff": [362, 363, 364, 365, 366, 655, 975, 976, 977, 978, 979, 1238], "contains_with_lit": 362, "contains_with_expr": 362, "transferencod": [363, 364, 655, 656, 976, 977, 1238, 1239], "hex": [363, 364, 655, 656, 698, 976, 977, 1238, 1239, 1281], "base64": [363, 364, 655, 656, 976, 977, 1238, 1239], "000000": [363, 364, 655, 976, 977, 1238], "ffff00": [363, 364, 655, 976, 977, 1238], "0000ff": [363, 364, 655, 976, 977, 1238], "anywher": [365, 366, 693, 695, 696, 1276, 1278, 1279], "ends_with_lit": 365, "ends_with_expr": 365, "starts_with_lit": 366, "starts_with_expr": 366, "frac": [367, 368, 453, 455, 456, 644, 717, 718, 814, 980, 1072, 1074, 1075, 1228, 1309, 1325], "top_k_bi": [367, 368, 717, 814], "bottom_k_bi": [367, 717, 718, 814], "_btm_by_a": [368, 814], "_btm_by_b": [368, 814], "a_btm_by_a": [368, 814], "b_btm_by_a": [368, 814], "c_btm_by_a": [368, 814], "a_btm_by_b": [368, 814], "b_btm_by_b": [368, 814], "c_btm_by_b": [368, 814], "_by_ca": [368, 718, 814], "_by_cb": [368, 718, 814], "a_by_ca": [368, 718, 814], "b_by_ca": [368, 718, 814], "c_by_ca": [368, 718, 814], "a_by_cb": [368, 718, 814], "b_by_cb": [368, 718, 814], "c_by_cb": [368, 718, 814], "to_fram": [370, 410, 431, 436, 445, 693, 1007, 1188, 1213, 1216, 1267, 1268, 1276, 1325], "259921": [372, 814, 987, 1325], "587401": [372, 814], "numericliter": [374, 375, 376, 814, 991, 992, 993, 1325], "temporalliter": [374, 375, 376, 814, 991, 992, 993, 1030, 1031, 1325], "outsid": [374, 814, 991, 1325], "clip": [375, 376, 814, 992, 993, 1325], "543081": [378, 814, 996, 1325], "cotang": [379, 814, 997, 1325], "cumul": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 745, 746, 747, 748, 749, 750, 751, 752, 753, 814, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1325], "cum_count_revers": [381, 814], "cum_max_revers": [382, 814], "cum_max_all_fil": [382, 814], "cum_min_revers": [383, 814], "cum_prod_revers": [384, 814], "cum_sum_revers": [385, 814], "value_cum_sum": [385, 814], "value_cum_sum_all_fil": [385, 814], "cum_count": [386, 814, 1325], "cum_max": [387, 814, 1002, 1325], "cum_min": [388, 814, 1003, 1325], "cum_sum": [390, 479, 708, 749, 752, 814, 859, 927, 1005, 1118, 1325], "min_period": [391, 453, 455, 456, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 791, 792, 814, 1006, 1072, 1074, 1075, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "slide": [391, 814, 1006, 1325], "slot": [391, 395, 511, 814, 1006, 1009, 1130, 1325], "realli": [391, 652, 678, 814, 1006, 1235, 1261, 1325], "visit": [391, 814, 1006, 1325], "left_clos": [392, 600, 814, 1007, 1188, 1325], "include_break": [392, 600, 814, 1007, 1188, 1325], "bin": [392, 477, 600, 698, 726, 807, 814, 1007, 1091, 1188, 1281, 1319, 1325], "discret": [392, 395, 450, 477, 511, 531, 600, 814, 1007, 1009, 1069, 1091, 1130, 1150, 1188, 1325], "plu": [392, 548, 814, 1007, 1167, 1188, 1325], "endpoint": [392, 600, 814, 1007, 1188, 1325], "observ": [392, 453, 454, 455, 456, 600, 814, 1007, 1072, 1073, 1074, 1075, 1188, 1325], "fall": [392, 600, 814, 1007, 1188, 1325], "qcut": [392, 814, 1007, 1325], "breakpoint": [392, 477, 600, 814, 1007, 1091, 1188, 1325], "brk": [392, 600, 814], "foo_bin": [392, 600, 814], "radian": [393, 734, 814], "720": [393, 602, 814], "540": [393, 602, 814], "360": [393, 602, 814], "180": [393, 602, 814], "pickl": [394, 814, 840, 927], "circumst": [394, 814, 840, 927], "secur": [394, 814, 840, 927], "implic": [394, 814, 840, 927], "trust": [394, 814, 840, 927], "meta": [394, 814], "ba": [394, 457, 566, 686, 762, 814, 932], "null_behavior": [395, 511, 814, 1009, 1130, 1325], "nullbehavior": [395, 511, 814, 1009, 1130, 1325], "drop_nan": [398, 814, 1012, 1325], "week_mask": [399, 738, 1013], "holidai": [399, 738, 1013], "busi": [399, 738, 1013], "handi": [399, 738, 1013], "pip": [399, 738, 1013], "dutch": [399, 738, 1013], "my_holidai": [399, 738, 1013], "country_holidai": [399, 738, 1013], "nl": [399, 738, 1013], "2025": [399, 738, 932, 1013], "business_day_count": [399, 1013], "land": [399, 1013], "weekend": [399, 738, 1013], "rolled_forward": 399, "vari": [400, 1014, 1334], "rare": [400, 1014], "switch": [400, 1014], "samoa": [400, 1014], "apia": [400, 1014], "did": [400, 1014], "2011": [400, 1014], "dst_offset": [400, 1014], "2012": [400, 1014], "replace_time_zon": [400, 406, 409, 1019, 1020, 1053], "pacif": [400, 1014], "11h": [400, 1014], "13h": [400, 1014], "lose": [401, 1015], "time_unit_m": [401, 1015], "time_unit_n": [401, 1015], "999": [402, 417, 932, 1016, 1034, 1334], "1897": [402, 417, 1016, 1034], "3002": [402, 417, 1016, 1034], "cent": 402, "0999": [402, 417], "naiv": [403, 404, 1017, 1018, 1279], "compon": [403, 432, 693, 696, 760, 1017, 1050, 1276, 1279], "resolv": 403, "tm": [403, 932], "456000": [403, 1017], "101000": 403, "d1": 403, "d2": 403, "d3": 403, "europ": [404, 409, 430, 1018, 1023, 1048], "london": [404, 409, 430, 1018, 1023, 1048], "gmt": [404, 409, 430, 1018, 1023, 1048], "bst": [404, 409, 430, 1018, 1023, 1048], "1978": [405, 406, 411, 414, 415, 418, 420, 425, 432, 435, 449], "500_000": [405, 406, 411, 415, 418, 420, 425, 432, 435], "2065": [405, 406, 411, 415, 418, 420, 425, 432, 435], "60_000": [405, 406, 411, 415, 418, 420, 425, 432, 435], "060": [405, 406, 411, 415, 418, 420, 425, 432, 435], "weekdai": [407, 428], "ordinal_dai": [407, 447], "day_of_month": [407, 428, 447], "day_of_year": [407, 428, 447], "356": [407, 428, 447], "357": [407, 428, 447], "358": [407, 428, 447], "359": [407, 428, 447], "total_dai": [408, 1022], "base_utc_offset": [409, 1023], "0m": [409, 1023], "epochtimeunit": [410, 766, 1024], "epoch_n": [410, 1024], "epoch_": [410, 1024], "978307200000000": [410, 436, 1024, 1054], "978307200": [410, 1024], "978393600000000": [410, 436, 1024, 1054], "978393600": [410, 1024], "978480000000000": [410, 436, 1024, 1054], "978480000": [410, 1024], "total_hour": [412, 1026], "leap": [413, 427, 1027, 1045], "leap_year": 413, "iso": [414, 446, 447, 1028, 1064, 1065], "1977": [414, 449], "1979": [414, 449], "calendar_year": [414, 449], "1976": [414, 449], "500000": [415, 1032], "60000": 415, "total_microsecond": [416, 1033], "mlnm": 417, "total_millisecond": [419, 1036], "total_minut": [421, 1039], "think": [423, 424, 1041, 1042], "vectoris": [423, 424, 1041, 1042], "tseri": [423, 424, 1041, 1042], "monthend": [423, 1041], "rollforward": [423, 1041], "monthbegin": [424, 1042], "rollback": [424, 1042], "500000000": [425, 1043], "60000000": 425, "total_nanosecond": [426, 1044], "minu": [427, 588, 814, 1045], "dictat": [427, 814, 931, 1045], "2005": [427, 1045], "date_plus_1i": [427, 1045], "1y2mo": [427, 1045], "date_min": 427, "1998": [427, 1045], "2003": [427, 766, 1045], "2004": [427, 1045], "2006": [427, 1045], "new_dat": 427, "ordin": [428, 603, 814, 1046, 1190, 1325], "366": [428, 1046], "use_earliest": [430, 445, 693, 696, 757, 1048, 1063, 1276, 1279], "non_exist": [430, 1048], "nonexist": [430, 1048], "convert_time_zon": [430, 1048], "london_timezon": [430, 1048], "amsterdam": [430, 1048], "london_to_amsterdam": [430, 1048], "cet": [430, 1048], "cest": [430, 1048], "ts_local": [430, 1048], "brussel": [430, 1048], "localis": [431, 445, 1063], "dst": [431, 445, 1049, 1063], "cst": [431, 445, 1049, 1063], "cdt": [431, 445, 1049, 1063], "safe": [431, 445, 454, 605, 616, 618, 620, 622, 624, 627, 629, 631, 814, 1049, 1063, 1192, 1279, 1304, 1325], "225": [431, 445], "10m": [431, 445, 1049, 1063], "milli": [432, 1050], "micro": [432, 1050], "total_second": [433, 1051], "to_str": [434, 1052], "datetime_str": [434, 437], "day_nam": [434, 437], "month_nam": [434, 437], "march": [434, 437, 1052, 1055], "april": [434, 437, 1052, 1055], "timestamp_u": [436, 1054], "timestamp_m": 436, "978307200000": 436, "978393600000": 436, "978480000000": 436, "strftime": [437, 1055], "days_diff": 438, "hours_diff": 439, "200m": [440, 441, 443], "milliseconds_diff": [440, 441, 443], "200": [440, 441, 443, 607, 814, 932, 1194, 1201, 1202, 1204, 1325], "200000": [440, 867, 927], "800": [440, 441, 443], "minutes_diff": 442, "1440": [442, 1060], "200000000": 443, "seconds_diff": 444, "truncate_str": 445, "truncate_td": 445, "53": [446, 1064], "time_unit_u": 448, "32971": [448, 1066], "32974": [448, 1066], "32976": [448, 1066], "iso_year": 449, "pk": [450, 814, 1069, 1325], "probabl": [450, 600, 814, 1069, 1188, 1325], "459148": [450, 814], "754888": [450, 814], "span": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "half_lif": [453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "adjust": [453, 455, 456, 644, 814, 1072, 1074, 1075, 1228, 1325], "exponenti": [453, 454, 455, 456, 458, 597, 814, 1072, 1073, 1074, 1075, 1076, 1325], "weight": [453, 454, 455, 456, 613, 614, 615, 617, 619, 621, 623, 626, 628, 630, 644, 814, 1072, 1073, 1074, 1075, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1228, 1325], "decai": [453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "term": [453, 455, 456, 663, 682, 694, 814, 1072, 1074, 1075, 1246, 1265, 1277, 1325], "mass": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "gamma": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "foral": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "geq": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "theta": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "life": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "exp": [453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "ln": [453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "smooth": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "factor": [453, 455, 456, 716, 814, 1072, 1074, 1075, 1307, 1325], "leq": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "imbal": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "ew": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "w_i": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "recurs": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "y_t": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "y_": [453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "x_t": [453, 455, 456, 814, 1072, 1074, 1075, 1325], "x_2": [453, 454, 455, 456, 814, 1072, 1073, 1074, 1075, 1325], "428571": [453, 814, 1072, 1325], "ldot": [454, 814, 1073, 1325], "x_n": [454, 814, 1073, 1325], "t_2": [454, 814, 1073, 1325], "ewma": [454, 814, 1073, 1325], "alpha_i": [454, 814, 1073, 1325], "t_i": [454, 814, 1073, 1325], "y_i": [454, 814, 1073, 1325], "x_i": [454, 814, 1073, 1325], "quad": [454, 814, 1073, 1325], "370h": [454, 814, 1073, 1325], "quick": [454, 810, 814, 1008, 1325, 1334], "4d": [454, 814, 1073, 1325], "292893": [454, 814, 1073, 1325], "492474": [454, 814, 1073, 1325], "254508": [454, 814, 1073, 1325], "bia": [455, 456, 498, 625, 644, 814, 1074, 1075, 1119, 1206, 1228, 1325], "unbias": [455, 456, 814, 1074, 1075, 1325], "963624": [455, 814, 1074, 1325], "928571": [456, 814, 1075, 1325], "wildcard": [457, 704, 746, 747, 750, 751, 764, 789, 814, 931], "regex": [457, 561, 651, 653, 654, 657, 659, 660, 661, 662, 676, 677, 686, 704, 762, 814, 932, 1234, 1236, 1237, 1240, 1242, 1243, 1244, 1245, 1259, 1260, 1269], "aa": [457, 651, 662, 762, 814, 932, 1008, 1234, 1245, 1325], "cc": [457, 762, 814, 932, 1008, 1325], "718282": [458, 814, 1076, 1325], "389056": [458, 814, 1076, 1325], "54": [458, 814, 1119, 1325, 1334], "59815": [458, 814], "extrem": [460, 614, 814, 1079, 1200, 1325], "expressioin": [460, 814, 1079, 1325], "group_col": [463, 725, 814], "g1": [463, 725, 814], "g2": [463, 725, 814], "lt": [463, 725, 814, 1325], "gte": [463, 725, 814], "n_1": [463, 814], "n_2": [463, 814], "n_3": [463, 814], "exprlistnamespac": [465, 814], "divis": [467, 719, 814], "truediv": [467, 814], "subtli": [467, 814], "intuit": [467, 814, 932], "backward_fil": [468, 637, 814], "deseri": [469, 566, 814, 884, 927], "enclos": [469, 814], "9774092659964970114": [475, 814], "13614470193936745724": [475, 814], "1101441246220388612": [475, 814], "11638928888656214026": [475, 814], "13382926553367784577": [475, 814], "bin_count": [477, 814, 1091, 1325], "include_categori": [477, 814, 1091, 1325], "include_breakpoint": [477, 814, 1091, 1325], "occurr": [477, 485, 486, 489, 490, 723, 814, 1091, 1101, 1102, 1107, 1108, 1313, 1325], "interpolationmethod": [480, 814, 1094, 1325], "regrid": [480, 814], "grid": [480, 814], "df_original_grid": [480, 814], "grid_point": [480, 814], "df_new_grid": [480, 814], "a_interpol": [481, 814], "285714": [481, 814, 1095, 1325], "714286": [481, 814, 1095, 1325], "satisfi": [482, 814, 1096, 1325], "conflat": [482, 814], "between_ab": [482, 814], "finit": [484, 719, 742, 814, 1100, 1325], "is_first_distinct": [485, 814, 1101, 1325], "optional_memb": [487, 814, 1104, 1325], "infinit": [488, 719, 814, 1105, 1325], "is_last_distinct": [489, 814, 1107, 1325], "_isnan": [491, 814], "b_isnan": [491, 814], "negat": [492, 589, 814, 1182, 1325], "_is_not_nan": [493, 814], "b_is_not_nan": [493, 814], "_not_nul": [494, 814], "a_not_nul": [494, 814], "b_not_nul": [494, 814], "_isnul": [495, 814], "a_isnul": [495, 814], "b_isnul": [495, 814], "undo": [497, 568, 575, 576, 578, 580, 582, 583, 598, 709, 814], "fisher": [498, 644, 814, 1119, 1228, 1325], "fourth": [498, 814, 1119, 1325], "subtract": [498, 708, 814, 1119, 1325], "distribut": [498, 644, 814, 1119, 1228, 1325], "elimin": [498, 814, 1119, 1325], "bias": [498, 644, 814, 1119, 1228, 1325], "scipi": [498, 644, 814, 1119, 1228, 1325, 1329], "stat": [498, 644, 814, 884, 927, 1119, 1228, 1325], "153061": [498, 814], "blindli": [513, 1132], "worth": [513, 1132], "enough": [513, 644, 814, 1132, 1228, 1325], "concat_list": [513, 761], "exprnamespac": 514, "cheaper": [516, 541, 1135, 1160], "symmetr": [533, 1152], "sdiff": 533, "taken": [536, 682, 1155, 1265], "363961": [538, 1157], "n_field_strategi": [543, 1162], "tostructstrategi": [543, 1162], "first_non_nul": [543, 1162], "max_width": [543, 1162], "pre": [543, 555, 600, 787, 790, 805, 814, 1188, 1325], "obtain": 543, "ok": 543, "longest": 543, "logarithm": [546, 547, 548, 814, 1165, 1166, 1167, 1325], "584963": [546, 814], "30103": [547, 814], "60206": [547, 814], "natur": [548, 814, 1167, 1325], "693147": [548, 814, 1165, 1167, 1325], "098612": [548, 814, 1165, 1167, 1325], "386294": [548, 814, 1167, 1325], "lowest": [549, 814], "9223372036854775808": [549, 814], "agg_list": [551, 553, 814], "map_batch": [551, 775, 814, 866, 927], "keep_nam": [552, 814], "a_revers": [552, 576, 580, 609, 709, 814], "b_revers": [552, 576, 580, 609, 709, 814], "rstrip": [552, 576, 814], "_revers": [552, 576, 580, 609, 709, 814], "is_elementwis": [553, 814, 931], "whole": [553, 646, 647, 659, 814, 915, 927, 1242], "elementwis": [553, 613, 614, 615, 617, 621, 628, 814, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "third": [553, 814], "parti": [553, 814], "book": [553, 814], "invok": [553, 814], "bug": [553, 555, 814, 866, 867, 909, 915, 927, 1170, 1325], "argmax": [553, 814], "remap": [554, 814, 1169, 1325], "lookup": [554, 810, 814, 1169, 1325], "suppos": [555, 814, 1170, 1325], "sqrt": [555, 644, 707, 734, 735, 814, 1170, 1228, 1325], "discourag": [555, 814], "loop": [555, 814], "a_times_2": [555, 814], "tip": [555, 814], "view": [555, 814, 1325], "again": [555, 814], "exprmetanamespac": [559, 562], "foo_bar2": [559, 562], "raise_if_undetermin": 563, "computeerror": [563, 675, 698, 1258, 1281], "e_filt": [563, 565], "e_sum_ov": [563, 565], "e_sum_slic": [563, 565], "groupstorow": 566, "tree": [567, 844, 927], "modulu": [571, 814], "xlog2": [573, 597, 814], "purpos": [574, 814, 835, 846, 927], "x_uniqu": [574, 814], "y_uniqu": [574, 814], "reverse_": [578, 598, 814], "reverse_a": [578, 598, 814], "reverse_b": [578, 598, 814], "prefix_": 579, "prefix_a": 579, "prefix_b": 579, "_suffix": 581, "a_suffix": 581, "b_suffix": 581, "lowercas": [582, 699, 1282], "uppercas": [583, 702, 1285], "to_lowercas": 583, "poison": [584, 585, 814, 1179, 1180, 1325], "nanmax": [584, 585, 814, 1179, 1180, 1325], "inequ": [586, 814], "ne": [587, 814, 1325], "unari": [588, 814], "350": [590, 814, 1202, 1325], "650": [590, 814], "850": [590, 814], "more_expr": [592, 736, 739, 740, 741, 814], "mapping_strategi": [592, 814], "windowmappingstrategi": [592, 814], "group_to_row": [592, 814], "outcom": [592, 814], "group_dtyp": [592, 814], "warn": [592, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814, 1325], "_max": [592, 814], "c_max": [592, 814], "_min": [592, 814], "c_min": [592, 814], "sort_bi": [592, 814], "percent": [593, 814, 1184, 1325], "090909": [593, 814], "extract_numb": [596, 814], "scale_negative_even": [596, 814], "expon": [597, 814, 1325], "allow_dupl": [600, 814, 1188, 1325], "duplicateerror": [600, 814, 1188, 1325], "cut": [600, 814, 1188, 1325], "566371": [602, 814], "424778": [602, 814], "283185": [602, 814], "141593": [602, 814, 940, 1325], "rankmethod": [603, 814, 1190, 1325], "ti": [603, 814, 1190, 1325], "competit": [603, 814, 1190, 1325], "highest": [603, 722, 742, 814, 927, 1190, 1325], "immedi": [603, 733, 737, 755, 756, 758, 759, 770, 771, 787, 790, 796, 801, 802, 805, 814, 1190, 1325], "nodefault": [607, 814, 1194, 1325], "_nodefault": [607, 814, 1194, 1325], "no_default": [607, 814, 1194, 1325], "fruits_revers": [609, 814], "cars_revers": [609, 814], "rle_id": [610, 814, 1325], "rle": [611, 814, 1198, 1325], "rle_id_a": [611, 814], "rle_id_ab": [611, 814], "window_s": [613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 791, 792, 814, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1325], "rolling_map": [613, 814, 1199, 1325], "multipli": [613, 614, 615, 617, 621, 626, 628, 630, 707, 814, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1325], "rolling_sum": [614, 814, 1200, 1325], "nansum": [614, 814, 1200, 1325], "warn_if_unsort": [615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 814], "travers": [615, 617, 621, 628, 814, 1201, 1202, 1204, 1207, 1208, 1209, 1325], "vector": [615, 617, 621, 628, 814, 1201, 1202, 1204, 1207, 1208, 1209, 1325], "5h": [615, 617, 619, 621, 623, 626, 628, 630, 814], "rolling_max_bi": [615, 814], "df_tempor": [615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 814], "rolling_row_max": [615, 616, 814], "2h": [615, 616, 617, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 814], "closur": [615, 616, 617, 618, 626, 627, 628, 629, 630, 631, 814], "rolling_mean_bi": [617, 814], "rolling_row_mean": [617, 618, 814], "contribut": [619, 623, 626, 630, 814], "rolling_median_bi": [619, 814], "rolling_row_median": [620, 814], "rolling_min_bi": [621, 814], "rolling_row_min": [621, 622, 814], "rolling_quantile_bi": [623, 814], "625": [623, 814], "rolling_row_quantil": [624, 814], "skew": [625, 814, 1206, 1325], "381802": [625, 814, 1206, 1325], "47033": [625, 814, 1206, 1325], "38180177416060584": [625, 814, 1206, 1325], "47033046033698594": [625, 814, 1206, 1325], "rolling_std_bi": [626, 814], "433013": [626, 814, 892, 927], "rolling_row_std": [626, 627, 814], "rolling_sum_bi": [628, 814], "rolling_row_sum": [628, 629, 814], "39": [628, 629, 766, 814], "57": [628, 629, 814, 1210, 1325, 1334], "63": [628, 629, 814], "69": [628, 629, 814, 1119, 1325], "rolling_var_bi": [630, 814], "1875": [630, 814, 900, 927], "rolling_row_var": [630, 631, 814], "figur": [633, 814, 888, 927, 1211, 1325], "01234": [633, 814, 1211, 1325], "012": [633, 814, 1211, 1325], "1200": [633, 814, 1211, 1325], "searchsortedsid": [635, 814, 1214, 1325], "leftmost": [635, 814, 1214, 1325], "rightmost": [635, 814, 1214, 1325], "six": [635, 814], "extrema": [639, 814, 1222, 1325], "112": [639, 814, 1334], "129": [639, 814], "8589934592": [639, 814], "1073741824": [639, 814], "175201": [643, 814, 1227, 1325], "unimod": [644, 814, 1228, 1325], "skewtest": [644, 814, 1228, 1325], "speak": [644, 814, 1228, 1325], "g_1": [644, 814, 1228, 1325], "m_3": [644, 814, 1228, 1325], "m_2": [644, 814, 1228, 1325], "m_i": [644, 814, 1228, 1325], "sum_": [644, 814, 1228, 1325], "texttt": [644, 814, 1228, 1325], "k_3": [644, 814, 1228, 1325], "k_2": [644, 814, 1228, 1325], "343622": [644, 814], "value1": [647, 814], "value2": [647, 814], "attain": [647, 814], "414214": [648, 814, 1231, 1325], "sensit": [651, 660, 662, 676, 677, 1234, 1243, 1245, 1259, 1260], "ilmsuxu": [651, 659, 660, 662, 676, 677, 1234, 1242, 1243, 1245, 1259, 1260], "default_match": [651, 662], "insensitive_match": [651, 662], "crab": [651, 662, 1234, 1245], "dog": [651, 699, 702, 741, 1234, 1282, 1285], "rab": [651, 679, 1234, 1262], "ascii_case_insensit": [652, 678, 1235, 1261], "aho": [652, 678, 1235, 1261], "corasick": [652, 678, 1235, 1261], "insensit": [652, 660, 676, 677, 678, 932, 1234, 1235, 1243, 1245, 1259, 1260, 1261], "set_fmt_str_length": [652, 678, 1235, 1261], "lyric": [652, 678, 1235, 1261], "everybodi": [652, 678, 1235, 1261], "tell": [652, 678, 1235, 1261], "me": [652, 678, 1235, 1261], "feel": [652, 678, 1235, 1261], "love": [652, 678, 1235, 1261], "tonight": [652, 678, 1235, 1261], "success": [653, 654, 660, 1236, 1237, 1243], "overlap": [653, 654, 660, 1236, 1237, 1243], "bla": [654, 660, 1237, 1243], "asd": [654, 660, 1237, 1243], "678": [654, 660, 1237, 1243], "910t": [654, 660, 1237, 1243], "count_digit": 654, "dbc": [654, 1237], "3xy": [654, 1237], "1zy3": [654, 1237], "strings_hex": 656, "666f6f": [656, 1239], "626172": [656, 1239], "mango": [657, 686, 1240, 1269], "has_suffix": 657, "le": [657, 814, 1325], "nu": 657, "group_index": [659, 1242], "captur": [659, 661, 676, 677, 1242, 1244, 1259, 1260], "nthose": [659, 1242], "nodd": [659, 1242], "nthe": [659, 1242], "odd": 659, "vote": [659, 661, 1242, 1244], "ballon_dor": [659, 661, 1242, 1244], "404": [659, 661, 1242, 1244], "ref": [659, 661, 1242, 1244], "candid": [659, 661, 1242, 1244], "messi": [659, 661, 1242, 1244], "ronaldo": [659, 1242], "haystack": [660, 1243], "email": [660, 1243], "real": [660, 1243], "some_account": [660, 1243], "somewher": [660, 1243], "net": [660, 1243], "jkl": [660, 1243], "uvw": [660, 1243], "co": [660, 814, 1243, 1325], "uk": [660, 1243], "address": 660, "xi": [660, 1243], "quantifi": [660, 1243], "email_part": [660, 1243], "extracted_nr": 660, "unnam": [661, 1244], "weghorst": [661, 1244], "err": 661, "lobster": [662, 1245], "crustaceon": [662, 1245], "pat": [662, 1245], "bc": [662, 677, 797, 1245], "aeiuo": [662, 1245], "find_pat": 662, "fewer": [663, 694, 846, 927, 1246, 1277], "pear": [663, 682, 694, 1246, 1265, 1277], "papaya": [663, 682, 694, 1246, 1265, 1277], "dragonfruit": [663, 682, 694, 1246, 1265, 1277], "s_head_5": 663, "papai": [663, 1246], "drago": [663, 1246], "s_head_n": 663, "pea": 663, "papa": 663, "dragon": 663, "json_path_match": [664, 1247], "jsonpath": [664, 666, 1247, 1249], "json_decod": [665, 1248], "json_path": [666, 1249], "json_val": [666, 1249], "len_char": [667, 672, 1250, 1255], "_o": [667, 668, 1250, 1251], "caf\u00e9": [667, 668, 932, 1250, 1251], "345": [667, 668, 1250, 1251], "\u6771\u4eac": [667, 668, 932, 1250, 1251], "n_byte": [667, 668], "n_char": [667, 668], "fill_char": [670, 673, 674, 680, 1253, 1256, 1257, 1263], "justifi": [670, 680, 1253, 1263], "pad_end": [670, 674, 1253, 1257], "strip_chars_start": [671, 689, 691, 1254], "pad": [673, 674, 703, 1256, 1257, 1286], "reach": [673, 674, 703, 1256, 1257, 1286], "pad_start": [673, 680, 703, 1256, 1263, 1286], "cow": [673, 674, 1256, 1257], "monkei": [673, 674, 1256, 1257], "hippopotamu": [673, 674, 1256, 1257], "zfill": [674, 726, 814, 1257], "radix": [675, 698, 1258, 1281], "parseerror": [675, 698, 1258, 1281], "to_integ": [675, 1258], "silent": [675, 698, 1258, 1281], "replace_al": [676, 1259], "dollar": [676, 677, 1259, 1260], "123abc": [676, 1259, 1260], "abc456": [676, 1259, 1260], "hat": [676, 677, 1259, 1260], "hut": [676, 677, 1259, 1260], "vowel": [676, 677, 1259, 1260], "bad": [676, 677, 1259, 1260], "bud": [676, 677, 1259, 1260], "citi": [676, 677], "philadelphia": [676, 677], "season": [676, 677], "spring": [676, 677], "summer": [676, 677], "autumn": [676, 677], "winter": [676, 677], "weather": [676, 677, 1259, 1260], "raini": [676, 677, 1259, 1260], "sunni": [676, 677, 1259, 1260], "cloudi": [676, 677], "snowi": [676, 677], "foggi": [676, 677, 1259, 1260], "abcabc": 677, "123a123": 677, "replace_with": [678, 1261], "broadcast": [678, 932, 1261], "removes_pronoun": 678, "man": [679, 1262], "ana": [679, 1262], "oof": [679, 1262], "anan": [679, 1262], "am": [679, 1262], "strip_chars_end": [681, 690, 692, 1264], "ear": [682, 694, 1265], "aya": [682, 1265, 1277], "uit": [682, 1265], "ya": [682, 1265], "onf": [682, 1265], "foo_bar_baz": 683, "split_inclus": 683, "foo_": [683, 765], "bar_": 683, "a_1": [684, 1267, 1300, 1325], "d_4": [684, 1267], "rename_field": [684, 685, 1007, 1188, 1267, 1268, 1325], "first_part": [684, 685, 1267, 1268], "second_part": [684, 685, 1267, 1268], "remaind": [685, 1268], "app": [686, 1269], "has_prefix": 686, "strip_char": [687, 1270], "nworld": 688, "foo_strip": 688, "ow": 688, "hell": [688, 1271], "rld": [688, 690, 1273], "strip_suffix": [689, 691], "foo_strip_end": 689, "oldw": 689, "he": 689, "abcdeff": 689, "fed": 689, "strip_prefix": [690, 692], "tworld": [690, 1271, 1273], "foo_strip_start": 690, "wod": [690, 1273], "aabcdef": 690, "cba": 690, "foobar": [691, 692, 1274, 1275], "foofoobar": [691, 1274], "foobarbar": [692, 1275], "polarstemporaltyp": [693, 1276], "penalti": [693, 695, 696, 1276, 1278, 1279], "clean": [693, 695, 696, 1276, 1278, 1279], "beforehand": [693, 695, 696, 1276, 1278, 1279], "certainli": [693, 695, 696, 1276, 1278, 1279], "00z": [693, 696, 1276, 1279], "sun": [693, 1276], "jul": [693, 1276], "s_tail_5": 694, "apaya": [694, 1277], "s_tail_n": 694, "paya": 694, "nfruit": 694, "inference_length": [697, 1280], "3420": [697, 1280], "120134": [697, 1280], "3212": [697, 1280], "143": [697, 1280, 1334], "numbers_decim": 697, "110": [698, 1281], "fa1e": [698, 1281], "ff00": [698, 1281], "cafe": [698, 1281], "64030": [698, 1281], "65280": [698, 1281], "51966": [698, 1281], "variant": [699, 701, 702, 1106, 1325], "foo_low": 699, "titlecas": [701, 1284], "sing": [701, 1284], "welcom": [701, 1284], "THERE": [701, 1284], "NO": [701, 932, 1284], "foo_titl": 701, "There": [701, 1284], "foo_upp": 702, "999999": [703, 757, 800, 801, 802, 932, 1286], "0123": [703, 1286], "more_nam": [704, 810], "__getitem__": 704, "struct_col": [704, 706], "cd": [704, 706, 932], "expans": 704, "www": 706, "xxx": 706, "yyi": 706, "zzz": 706, "obvious": 706, "structfieldnotfounderror": 706, "coord": 707, "y_mul": 707, "761594": [715, 814, 1298, 1325], "replic": [716, 814, 1307, 1325], "vals_phys": [716, 814], "_top_by_a": [718, 814], "_top_by_b": [718, 814], "a_top_by_a": [718, 814], "b_top_by_a": [718, 814], "c_top_by_a": [718, 814], "a_top_by_b": [718, 814], "b_top_by_b": [718, 814], "c_top_by_b": [718, 814], "floordiv": [719, 814], "ieee": [719, 814], "754": [719, 814], "mathemat": [719, 761, 814], "undefin": [719, 814], "On": [719, 814], "operand": [719, 814], "infin": [719, 814], "value_count": [721, 814, 1325], "9223372036854775807": [722, 814], "binary_str": [726, 814], "250": [726, 814, 1202, 1325, 1334], "bin_x": [726, 814], "bin_i": [726, 814], "xor_xi": [726, 814], "bin_xor_xi": [726, 814], "00001010": [726, 814], "00001011": [726, 814], "00001000": [726, 814], "00000010": [726, 814], "11111010": [726, 814], "00000011": [726, 814], "249": [726, 814], "11111001": [726, 814], "01000010": [726, 814], "00000100": [726, 814], "01000110": [726, 814], "OR": [729, 730, 849, 927, 932], "any_horizont": 729, "returns_scalar": [731, 777, 814, 931], "polarsintegertyp": [733, 770, 771], "arctan": [734, 735, 814, 1325], "angl": [734, 735], "plane": [734, 735], "rai": [734, 735], "tworoottwo": [734, 735], "arctan2d": 734, "atan2d": [734, 735], "atan2": [734, 735], "135": [734, 735], "356194": [734, 735], "arctan2": 735, "arg_tru": [737, 814, 1325], "oppos": 738, "mimic": 740, "a_lag_": 740, "a_rol": 740, "swim": 741, "walk": 741, "full_sent": 741, "correlationmethod": 742, "propagate_nan": 742, "spearman": 742, "544705": 742, "covari": [744, 792, 814, 931], "acc": [746, 747, 750, 751, 764, 789], "include_init": [746, 750], "accumul": [746, 747, 750, 751, 764, 789], "fn": [746, 747, 750, 751, 764, 789], "new_valu": [746, 747, 750, 751, 764, 789], "cum_reduc": [746, 751], "cumsum_horizont": 748, "cum_fold": 750, "cum_sum_horizont": 753, "granular": 755, "finer": 755, "permut": 755, "1985": [755, 758], "australia": 757, "sydnei": 757, "aedt": 757, "america": 758, "new_york": 758, "est": 758, "contrast": 760, "sometim": [760, 813], "tbl_width_char": 760, "120": 760, "add_week": 760, "add_dai": 760, "add_second": 760, "add_milli": 760, "add_hour": 760, "002": [760, 1058, 1059, 1061], "add_calendar_dai": 760, "add_calendar_month": 760, "mo": 760, "add_calendar_year": 760, "a_b_doubl": 761, "presenc": [763, 772, 786, 932, 1088, 1325], "f_string": 765, "placehold": 765, "hello_": 765, "_world": 765, "_bar_": 765, "foo_a_bar_1": 765, "foo_b_bar_2": 765, "foo_c_bar_3": 765, "timestep": 766, "1666683077": 766, "1666683099": 766, "12345": [766, 988, 1084, 1210, 1325], "12346": 766, "agg_group": [767, 814], "allow_object": 774, "valueexcept": 774, "test_func": 776, "list_of_seri": 777, "my_custom_aggreg": 777, "understood": 777, "power": [794, 1325], "a_a": 794, "a_txt": 794, "605551": 795, "605551275463989": 795, "my_struct": 796, "elif": 804, "met": 804, "own": [804, 1305, 1325, 1334], "isn": 804, "technic": 810, "further": 810, "columnfactori": 810, "__call__": 810, "helper": 810, "__getattr__": 810, "idiomat": [810, 915], "prototyp": 810, "keystrok": 810, "drawback": 810, "readabl": 810, "and_": 814, "arcco": [814, 1325], "arccosh": [814, 1325], "arcsin": [814, 1325], "arcsinh": [814, 1325], "arctanh": [814, 1325], "arg_max": [814, 1325], "arg_min": [814, 1325], "arg_sort": [814, 1325], "arg_uniqu": [814, 1325], "cbrt": [814, 1325], "clip_max": [814, 1325], "clip_min": [814, 1325], "cosh": [814, 1325], "cot": [814, 1325], "cumcount": 814, "cummax": [814, 1325], "cummin": [814, 1325], "cumprod": [814, 1325], "cumsum": [814, 1325], "cumulative_ev": [814, 1325], "entropi": [814, 1325], "eq_miss": [814, 1325], "ewm_mean": [814, 1325], "ewm_mean_bi": [814, 1325], "ewm_std": [814, 1325], "ewm_var": [814, 1325], "extend_const": [814, 1325], "flatten": 814, "from_json": 814, "ge": [814, 1325], "gt": [814, 1325], "hist": [814, 1325, 1329], "implod": [814, 1325], "inspect": [814, 927], "interpolate_bi": [814, 1325], "is_between": [814, 1325], "is_finit": [814, 1325], "is_first": [814, 1325], "is_infinit": [814, 1325], "is_last": [814, 1325], "is_nan": [814, 1325], "is_not": 814, "is_not_nan": [814, 1325], "is_not_nul": [814, 1325], "kurtosi": [814, 1325], "log10": [814, 1325], "log1p": [814, 1325], "map_alia": 814, "map_dict": [814, 1325], "mod": 814, "mul": 814, "nan_max": [814, 1325], "nan_min": [814, 1325], "ne_miss": [814, 1325], "or_": 814, "pct_chang": [814, 1325], "peak_max": [814, 1325], "peak_min": [814, 1325], "pow": [814, 1325], "register_plugin": 814, "lib": [814, 1299, 1325], "input_wildcard_expans": [814, 931], "cast_to_supertyp": [814, 931], "pass_name_to_appli": [814, 931], "changes_length": [814, 931], "register_plugin_funct": [814, 931], "guid": [814, 931, 1334], "serializ": [814, 931], "ran": [814, 931], "highli": [814, 931], "unsaf": [814, 931], "reinterpret": [814, 1325], "repeat_bi": 814, "rolling_appli": [814, 1325], "rolling_max": [814, 1325], "rolling_mean": [814, 1325], "rolling_median": [814, 1325], "rolling_min": [814, 1325], "rolling_quantil": [814, 1325], "rolling_skew": [814, 1325], "rolling_std": [814, 1325], "rolling_var": [814, 1325], "round_sig_fig": [814, 1325], "search_sort": [814, 1325], "shrink_dtyp": [814, 1325], "sin": [814, 1325], "sinh": [814, 1325], "tan": [814, 1325], "to_phys": [814, 985, 1325], "unique_count": [814, 1325], "xor": 814, "expos": 826, "miscellan": 826, "parametr": 826, "hit": [831, 927], "node": [831, 835, 859, 866, 867, 871, 876, 878, 927], "job": [831, 927], "background": [835, 927], "_eager": [835, 927], "_kwarg": [835, 927], "inprocessqueri": [835, 927], "cancel": [835, 927], "set_streaming_chunk_s": [835, 927], "collect_all_async": [836, 927], "snippet": [842, 927], "tree_format": [844, 927], "Be": [846, 927], "suscept": [846, 927], "lazygroupbi": [852, 853, 854, 855, 856, 857, 880, 927], "other_lf": [861, 927], "jan": [862, 927], "1st": [862, 927], "12th": [862, 927], "validate_output_schema": [866, 867, 927], "streamabl": [866, 867, 871, 927], "paramount": [866, 867, 927], "elig": [866, 867, 927], "invari": [867, 927], "upheld": [867, 927], "100_000": [867, 927], "199998": [867, 927], "199996": [867, 927], "199994": [867, 927], "199992": [867, 927], "show_plot": [876, 927], "truncate_nod": [876, 927], "figsiz": [876, 888, 927], "gantt": [876, 927], "group_by_partit": [876, 927], "470": [876, 927], "475": [876, 927], "1964": [876, 927], "swap": [878, 927], "mapfunct": [884, 927], "dataframescan": [884, 927], "output_schema": [884, 927], "output_path": [888, 927], "raw_output": [888, 927], "render": [888, 927], "download": [888, 927], "freeli": [891, 927, 932], "c_c_c": [891, 927], "290994": [892, 927], "118034": [892, 927], "new_lf": [899, 927], "extern": [904, 927], "lf_other": [904, 927], "afoo": [904, 927], "cfoo": [904, 927], "train_lf": [904, 927], "feature_0": [904, 927], "feature_1": [904, 927], "test_lf": [904, 927], "_train": [904, 927], "feature_0_train": [904, 927], "opaqu": 915, "my_column": 915, "struct_seri": 915, "lf5": 927, "lf6": 927, "sink_csv": 927, "sink_ipc": 927, "sink_ndjson": 927, "sink_parquet": 927, "with_context": 927, "resourc": 931, "plugin_path": 931, "function_nam": 931, "emploi": 932, "complement": 932, "plenti": 932, "cde": 932, "fgg": 932, "jjk": 932, "lmn": 932, "opp": 932, "qqr": 932, "by_dtyp": 932, "as_expr": 932, "dispatch": 932, "1_234_500": 932, "5_000_555": 932, "1234500": 932, "5000555": 932, "ascii_onli": 932, "ignore_spac": 932, "alphabet": [932, 1334], "accent": 932, "idiograph": 932, "no1": 932, "espresso": 932, "latt": 932, "mocha": 932, "hmm": 932, "\u90fd\u5e02": 932, "\u5927\u962a": 932, "\u4eac\u90fd": 932, "kanji": 932, "alphanumer": 932, "1st_col": 932, "00prefix": 932, "bb": [932, 1008, 1325], "n_even": 932, "invert": 932, "by_nam": 932, "by_index": 932, "4_500_000": 932, "4500000": 932, "3265500": 932, "c00": 932, "c01": 932, "c02": 932, "c96": 932, "c97": 932, "c98": 932, "c99": 932, "c20": 932, "c40": 932, "c60": 932, "c80": 932, "c75": 932, "c50": 932, "c25": 932, "ones": 932, "51": 932, "c03": 932, "c05": 932, "c93": 932, "c95": 932, "46": 932, "require_al": 932, "zap": 932, "moos": 932, "bear": 932, "2031": 932, "tstamp_tokyo": 932, "123465": 932, "tstamp_utc": 932, "999000": 932, "666000": 932, "tstamp": 932, "600000": 932, "123000": 932, "666": 932, "0005": 932, "5555": 932, "00050": 932, "55550": 932, "\u0967\u096f\u096f\u096f": 932, "\u0968\u0966\u096d\u096d": 932, "3000": 932, "td1": 932, "987000": 932, "td2": 932, "456789": [932, 1050], "td3": 932, "2m": [932, 1038], "456m": 932, "7d": 932, "456789\u00b5": 932, "18d": 932, "999999\u00b5": 932, "23h": 932, "987m": 932, "14d": 932, "16h": 932, "39m": 932, "21d": 932, "456001\u00b5": 932, "simpler": 932, "expand_selector": 932, "colz": [932, 1334], "everyth": 932, "signed_integ": 932, "unsigned_integ": 932, "is_selector": 932, "obj": 932, "3456": 932, "7654": 932, "4321": 932, "include_categor": 932, "2345": 932, "292432": [941, 1325], "549306": [945, 1325], "innter": 959, "field_2": [972, 1162], "n00": [972, 1162], "n01": [972, 1162], "n02": [972, 1162], "hexadecim": [976, 977], "aaaa": [976, 977], "8a": [976, 977], "aad": [976, 977], "invalid_valu": 976, "44225": [987, 1325], "56789": [988, 1084, 1210, 1325], "901234": [988, 1084, 1210, 1325], "1232e": [995, 997, 1325], "1656e15": [997, 1325], "break_point_label": [1007, 1188, 1325], "break_point": [1007, 1091, 1188, 1325], "category_label": [1007, 1188, 1325], "581139": [1008, 1325], "arraylik": [1010, 1325], "ser": [1019, 1020, 1053], "kathmandu": [1019, 1020, 1053], "0545": [1019, 1020, 1053], "500m": [1032, 1035, 1043], "date_minus_1y_2mon": 1045, "165": [1049, 1063], "round_str": 1049, "round_td": 1049, "111110": 1050, "765431": 1050, "11111": 1050, "timestamp_n": 1054, "978307200000000000": 1054, "978393600000000000": 1054, "978480000000000000": 1054, "005": [1069, 1325], "06293300616044681": [1069, 1325], "65": [1069, 1325], "8568409950394724": [1069, 1325], "4000000": [1071, 1325], "814697265625": [1071, 1325], "085537": [1076, 1325], "sorted_asc": [1083, 1325], "sorted_desc": [1083, 1325], "bitmask": [1088, 1325], "absenc": [1088, 1325], "confirm": [1088, 1325], "10734580197236529959": [1089, 1325], "3022416320763508302": [1089, 1325], "13756996518000038261": [1089, 1325], "is_signed_integ": [1106, 1325], "is_unsigned_integ": [1106, 1325], "grade": [1119, 1325], "79": [1119, 1325], "93": [1119, 1325], "0522623626787952": [1119, 1325], "9477376373212048": [1119, 1325], "1040361802642726": [1119, 1325], "2147483648": [1168, 1325], "pythonliter": [1171, 1172, 1173, 1174, 1213, 1325], "166667": [1184, 1325], "142857": [1184, 1325], "1152921504606846976": [1192, 1325], "17293822569102704640": [1192, 1325], "18446744073709551614": [1192, 1325], "150": [1202, 1325], "450": [1202, 1325], "dev": [1207, 1325], "527525": [1207, 1325], "frequent": [1213, 1216, 1325], "2246e": [1226, 1297, 1325], "34776706224699483": [1228, 1325], "732051": [1231, 1325], "idx_rx": 1245, "idx_lit": 1245, "3rd": [1246, 1277], "pap": 1246, "dragonfr": 1246, "orld": 1272, "gonfruit": 1277, "6331e16": [1297, 1325], "int64arrai": [1299, 1325], "a_2": [1300, 1325], "a_3": [1300, 1325], "s_from_str_repr": [1302, 1325], "zero_copy_onli": [1305, 1325], "127": [1312, 1325], "seriesview": [1315, 1325], "dtype_if_empti": 1325, "position": 1325, "scenario": 1325, "chunk_length": 1325, "get_chunk": 1325, "has_valid": 1325, "is_boolean": 1325, "is_float": 1325, "is_integ": 1325, "is_numer": [1325, 1334], "is_sort": 1325, "is_tempor": 1325, "is_utf8": 1325, "new_from_index": 1325, "histogram": [1325, 1329], "kde": [1325, 1329], "series_equ": 1325, "set_at_idx": 1325, "two_a": 1333, "__enter__": 1333, "__exit__": 1333, "exc_typ": 1333, "baseexcept": 1333, "exc_val": 1333, "exc_tb": 1333, "tracebacktyp": 1333, "machin": 1334, "xdist": 1334, "hardwar": 1334, "setup": 1334, "sec": 1334, "numeric_dtyp": 1334, "test_numer": 1334, "col4": 1334, "29096": 1334, "485": 1334, "2147483647": 1334, "8257e14": 1334, "7508": 1334, "37338": 1334, "7264": 1334, "16996": 1334, "121": 1334, "361": 1334, "63204": 1334, "1443e235": 1334, "conform": 1334, "st": 1334, "ascii_lett": 1334, "id_char": 1334, "ccy": 1334, "sampled_from": 1334, "gbp": 1334, "jpy": 1334, "price": 1334, "min_valu": 1334, "max_valu": 1334, "test_price_calcul": 1334, "a101": 1334, "8nin": 1334, "qhoo": 1334, "714": 1334, "544": 1334, "i0e0": 1334, "uint8_pair": 1334, "drawfn": 1334, "uint": 1334, "zip": 1334, "test_miscellan": 1334, "235": 1334, "87": 1334, "186": 1334, "174": 1334, "179": 1334, "213": 1334, "149": 1334, "221": 1334, "86": 1334, "255": 1334}, "objects": {"polars.Config": [[2, 0, 1, "", "activate_decimals"], [3, 0, 1, "", "load"], [4, 0, 1, "", "load_from_file"], [5, 0, 1, "", "restore_defaults"], [6, 0, 1, "", "save"], [7, 0, 1, "", "save_to_file"], [8, 0, 1, "", "set_ascii_tables"], [9, 0, 1, "", "set_auto_structify"], [10, 0, 1, "", "set_decimal_separator"], [11, 0, 1, "", "set_float_precision"], [12, 0, 1, "", "set_fmt_float"], [13, 0, 1, "", "set_fmt_str_lengths"], [14, 0, 1, "", "set_fmt_table_cell_list_len"], [15, 0, 1, "", "set_streaming_chunk_size"], [16, 0, 1, "", "set_tbl_cell_alignment"], [17, 0, 1, "", "set_tbl_cell_numeric_alignment"], [18, 0, 1, "", "set_tbl_cols"], [19, 0, 1, "", "set_tbl_column_data_type_inline"], [20, 0, 1, "", "set_tbl_dataframe_shape_below"], [21, 0, 1, "", "set_tbl_formatting"], [22, 0, 1, "", "set_tbl_hide_column_data_types"], [23, 0, 1, "", "set_tbl_hide_column_names"], [24, 0, 1, "", "set_tbl_hide_dataframe_shape"], [25, 0, 1, "", "set_tbl_hide_dtype_separator"], [26, 0, 1, "", "set_tbl_rows"], [27, 0, 1, "", "set_tbl_width_chars"], [28, 0, 1, "", "set_thousands_separator"], [29, 0, 1, "", "set_trim_decimal_zeros"], [30, 0, 1, "", "set_verbose"], [31, 0, 1, "", "state"]], "polars.DataFrame": [[161, 0, 1, "", "__dataframe__"], [162, 0, 1, "", "apply"], [163, 0, 1, "", "approx_n_unique"], [164, 0, 1, "", "bottom_k"], [165, 0, 1, "", "cast"], [166, 0, 1, "", "clear"], [167, 0, 1, "", "clone"], [168, 1, 1, "", "columns"], [169, 0, 1, "", "corr"], [170, 0, 1, "", "count"], [171, 0, 1, "", "describe"], [172, 0, 1, "", "drop"], [173, 0, 1, "", "drop_in_place"], [174, 0, 1, "", "drop_nulls"], [175, 1, 1, "", "dtypes"], [176, 0, 1, "", "equals"], [177, 0, 1, "", "estimated_size"], [178, 0, 1, "", "explode"], [179, 0, 1, "", "extend"], [180, 0, 1, "", "fill_nan"], [181, 0, 1, "", "fill_null"], [182, 0, 1, "", "filter"], [183, 0, 1, "", "find_idx_by_name"], [184, 1, 1, "", "flags"], [185, 0, 1, "", "fold"], [186, 0, 1, "", "frame_equal"], [187, 0, 1, "", "gather_every"], [188, 0, 1, "", "get_column"], [189, 0, 1, "", "get_column_index"], [190, 0, 1, "", "get_columns"], [191, 0, 1, "", "glimpse"], [192, 0, 1, "", "group_by"], [193, 0, 1, "", "group_by_dynamic"], [194, 0, 1, "", "group_by_rolling"], [195, 0, 1, "", "groupby"], [196, 0, 1, "", "groupby_dynamic"], [197, 0, 1, "", "groupby_rolling"], [198, 0, 1, "", "hash_rows"], [199, 0, 1, "", "head"], [200, 1, 1, "", "height"], [201, 0, 1, "", "hstack"], [202, 0, 1, "", "insert_at_idx"], [203, 0, 1, "", "insert_column"], [204, 0, 1, "", "interpolate"], [205, 0, 1, "", "is_duplicated"], [206, 0, 1, "", "is_empty"], [207, 0, 1, "", "is_unique"], [208, 0, 1, "", "item"], [209, 0, 1, "", "iter_columns"], [210, 0, 1, "", "iter_rows"], [211, 0, 1, "", "iter_slices"], [212, 0, 1, "", "join"], [213, 0, 1, "", "join_asof"], [214, 0, 1, "", "lazy"], [215, 0, 1, "", "limit"], [216, 0, 1, "", "map_rows"], [217, 0, 1, "", "max"], [218, 0, 1, "", "max_horizontal"], [219, 0, 1, "", "mean"], [220, 0, 1, "", "mean_horizontal"], [221, 0, 1, "", "median"], [222, 0, 1, "", "melt"], [223, 0, 1, "", "merge_sorted"], [224, 0, 1, "", "min"], [225, 0, 1, "", "min_horizontal"], [226, 0, 1, "", "n_chunks"], [227, 0, 1, "", "n_unique"], [228, 0, 1, "", "null_count"], [229, 0, 1, "", "partition_by"], [230, 0, 1, "", "pipe"], [231, 0, 1, "", "pivot"], [232, 0, 1, "", "product"], [233, 0, 1, "", "quantile"], [234, 0, 1, "", "rechunk"], [235, 0, 1, "", "rename"], [236, 0, 1, "", "replace"], [237, 0, 1, "", "replace_at_idx"], [238, 0, 1, "", "replace_column"], [239, 0, 1, "", "reverse"], [240, 0, 1, "", "rolling"], [241, 0, 1, "", "row"], [242, 0, 1, "", "rows"], [243, 0, 1, "", "rows_by_key"], [244, 0, 1, "", "sample"], [245, 1, 1, "", "schema"], [246, 0, 1, "", "select"], [247, 0, 1, "", "select_seq"], [248, 0, 1, "", "set_sorted"], [249, 1, 1, "", "shape"], [250, 0, 1, "", "shift"], [251, 0, 1, "", "shift_and_fill"], [252, 0, 1, "", "shrink_to_fit"], [253, 0, 1, "", "slice"], [254, 0, 1, "", "sort"], [255, 0, 1, "", "sql"], [256, 0, 1, "", "std"], [257, 0, 1, "", "sum"], [258, 0, 1, "", "sum_horizontal"], [259, 0, 1, "", "tail"], [260, 0, 1, "", "take_every"], [261, 0, 1, "", "to_arrow"], [262, 0, 1, "", "to_dict"], [263, 0, 1, "", "to_dicts"], [264, 0, 1, "", "to_dummies"], [265, 0, 1, "", "to_init_repr"], [266, 0, 1, "", "to_jax"], [267, 0, 1, "", "to_numpy"], [268, 0, 1, "", "to_pandas"], [269, 0, 1, "", "to_series"], [270, 0, 1, "", "to_struct"], [271, 0, 1, "", "to_torch"], [272, 0, 1, "", "top_k"], [273, 0, 1, "", "transpose"], [274, 0, 1, "", "unique"], [275, 0, 1, "", "unnest"], [276, 0, 1, "", "unstack"], [277, 0, 1, "", "update"], [278, 0, 1, "", "upsample"], [279, 0, 1, "", "var"], [280, 0, 1, "", "vstack"], [281, 1, 1, "", "width"], [282, 0, 1, "", "with_columns"], [283, 0, 1, "", "with_columns_seq"], [284, 0, 1, "", "with_row_count"], [285, 0, 1, "", "with_row_index"], [32, 0, 1, "", "write_avro"], [33, 0, 1, "", "write_clipboard"], [34, 0, 1, "", "write_csv"], [35, 0, 1, "", "write_database"], [36, 0, 1, "", "write_delta"], [37, 0, 1, "", "write_excel"], [38, 0, 1, "", "write_ipc"], [39, 0, 1, "", "write_ipc_stream"], [40, 0, 1, "", "write_json"], [41, 0, 1, "", "write_ndjson"], [42, 0, 1, "", "write_parquet"]], "polars.Expr": [[316, 0, 1, "", "abs"], [317, 0, 1, "", "add"], [318, 0, 1, "", "agg_groups"], [319, 0, 1, "", "alias"], [320, 0, 1, "", "all"], [321, 0, 1, "", "and_"], [322, 0, 1, "", "any"], [323, 0, 1, "", "append"], [324, 0, 1, "", "apply"], [325, 0, 1, "", "approx_n_unique"], [326, 0, 1, "", "arccos"], [327, 0, 1, "", "arccosh"], [328, 0, 1, "", "arcsin"], [329, 0, 1, "", "arcsinh"], [330, 0, 1, "", "arctan"], [331, 0, 1, "", "arctanh"], [332, 0, 1, "", "arg_max"], [333, 0, 1, "", "arg_min"], [334, 0, 1, "", "arg_sort"], [335, 0, 1, "", "arg_true"], [336, 0, 1, "", "arg_unique"], [361, 0, 1, "", "backward_fill"], [367, 0, 1, "", "bottom_k"], [368, 0, 1, "", "bottom_k_by"], [369, 0, 1, "", "cast"], [372, 0, 1, "", "cbrt"], [373, 0, 1, "", "ceil"], [374, 0, 1, "", "clip"], [375, 0, 1, "", "clip_max"], [376, 0, 1, "", "clip_min"], [377, 0, 1, "", "cos"], [378, 0, 1, "", "cosh"], [379, 0, 1, "", "cot"], [380, 0, 1, "", "count"], [381, 0, 1, "", "cum_count"], [382, 0, 1, "", "cum_max"], [383, 0, 1, "", "cum_min"], [384, 0, 1, "", "cum_prod"], [385, 0, 1, "", "cum_sum"], [386, 0, 1, "", "cumcount"], [387, 0, 1, "", "cummax"], [388, 0, 1, "", "cummin"], [389, 0, 1, "", "cumprod"], [390, 0, 1, "", "cumsum"], [391, 0, 1, "", "cumulative_eval"], [392, 0, 1, "", "cut"], [393, 0, 1, "", "degrees"], [394, 0, 1, "", "deserialize"], [395, 0, 1, "", "diff"], [396, 0, 1, "", "dot"], [397, 0, 1, "", "drop_nans"], [398, 0, 1, "", "drop_nulls"], [450, 0, 1, "", "entropy"], [451, 0, 1, "", "eq"], [452, 0, 1, "", "eq_missing"], [453, 0, 1, "", "ewm_mean"], [454, 0, 1, "", "ewm_mean_by"], [455, 0, 1, "", "ewm_std"], [456, 0, 1, "", "ewm_var"], [457, 0, 1, "", "exclude"], [458, 0, 1, "", "exp"], [459, 0, 1, "", "explode"], [460, 0, 1, "", "extend_constant"], [461, 0, 1, "", "fill_nan"], [462, 0, 1, "", "fill_null"], [463, 0, 1, "", "filter"], [464, 0, 1, "", "first"], [465, 0, 1, "", "flatten"], [466, 0, 1, "", "floor"], [467, 0, 1, "", "floordiv"], [468, 0, 1, "", "forward_fill"], [469, 0, 1, "", "from_json"], [470, 0, 1, "", "gather"], [471, 0, 1, "", "gather_every"], [472, 0, 1, "", "ge"], [473, 0, 1, "", "get"], [474, 0, 1, "", "gt"], [475, 0, 1, "", "hash"], [476, 0, 1, "", "head"], [477, 0, 1, "", "hist"], [478, 0, 1, "", "implode"], [479, 0, 1, "", "inspect"], [480, 0, 1, "", "interpolate"], [481, 0, 1, "", "interpolate_by"], [482, 0, 1, "", "is_between"], [483, 0, 1, "", "is_duplicated"], [484, 0, 1, "", "is_finite"], [485, 0, 1, "", "is_first"], [486, 0, 1, "", "is_first_distinct"], [487, 0, 1, "", "is_in"], [488, 0, 1, "", "is_infinite"], [489, 0, 1, "", "is_last"], [490, 0, 1, "", "is_last_distinct"], [491, 0, 1, "", "is_nan"], [492, 0, 1, "", "is_not"], [493, 0, 1, "", "is_not_nan"], [494, 0, 1, "", "is_not_null"], [495, 0, 1, "", "is_null"], [496, 0, 1, "", "is_unique"], [497, 0, 1, "", "keep_name"], [498, 0, 1, "", "kurtosis"], [499, 0, 1, "", "last"], [500, 0, 1, "", "le"], [501, 0, 1, "", "len"], [502, 0, 1, "", "limit"], [546, 0, 1, "", "log"], [547, 0, 1, "", "log10"], [548, 0, 1, "", "log1p"], [549, 0, 1, "", "lower_bound"], [550, 0, 1, "", "lt"], [551, 0, 1, "", "map"], [552, 0, 1, "", "map_alias"], [553, 0, 1, "", "map_batches"], [554, 0, 1, "", "map_dict"], [555, 0, 1, "", "map_elements"], [556, 0, 1, "", "max"], [557, 0, 1, "", "mean"], [558, 0, 1, "", "median"], [570, 0, 1, "", "min"], [571, 0, 1, "", "mod"], [572, 0, 1, "", "mode"], [573, 0, 1, "", "mul"], [574, 0, 1, "", "n_unique"], [584, 0, 1, "", "nan_max"], [585, 0, 1, "", "nan_min"], [586, 0, 1, "", "ne"], [587, 0, 1, "", "ne_missing"], [588, 0, 1, "", "neg"], [589, 0, 1, "", "not_"], [590, 0, 1, "", "null_count"], [591, 0, 1, "", "or_"], [592, 0, 1, "", "over"], [593, 0, 1, "", "pct_change"], [594, 0, 1, "", "peak_max"], [595, 0, 1, "", "peak_min"], [596, 0, 1, "", "pipe"], [597, 0, 1, "", "pow"], [598, 0, 1, "", "prefix"], [599, 0, 1, "", "product"], [600, 0, 1, "", "qcut"], [601, 0, 1, "", "quantile"], [602, 0, 1, "", "radians"], [603, 0, 1, "", "rank"], [604, 0, 1, "", "rechunk"], [605, 0, 1, "", "reinterpret"], [606, 0, 1, "", "repeat_by"], [607, 0, 1, "", "replace"], [608, 0, 1, "", "reshape"], [609, 0, 1, "", "reverse"], [610, 0, 1, "", "rle"], [611, 0, 1, "", "rle_id"], [612, 0, 1, "", "rolling"], [613, 0, 1, "", "rolling_apply"], [614, 0, 1, "", "rolling_map"], [615, 0, 1, "", "rolling_max"], [616, 0, 1, "", "rolling_max_by"], [617, 0, 1, "", "rolling_mean"], [618, 0, 1, "", "rolling_mean_by"], [619, 0, 1, "", "rolling_median"], [620, 0, 1, "", "rolling_median_by"], [621, 0, 1, "", "rolling_min"], [622, 0, 1, "", "rolling_min_by"], [623, 0, 1, "", "rolling_quantile"], [624, 0, 1, "", "rolling_quantile_by"], [625, 0, 1, "", "rolling_skew"], [626, 0, 1, "", "rolling_std"], [627, 0, 1, "", "rolling_std_by"], [628, 0, 1, "", "rolling_sum"], [629, 0, 1, "", "rolling_sum_by"], [630, 0, 1, "", "rolling_var"], [631, 0, 1, "", "rolling_var_by"], [632, 0, 1, "", "round"], [633, 0, 1, "", "round_sig_figs"], [634, 0, 1, "", "sample"], [635, 0, 1, "", "search_sorted"], [636, 0, 1, "", "set_sorted"], [637, 0, 1, "", "shift"], [638, 0, 1, "", "shift_and_fill"], [639, 0, 1, "", "shrink_dtype"], [640, 0, 1, "", "shuffle"], [641, 0, 1, "", "sign"], [642, 0, 1, "", "sin"], [643, 0, 1, "", "sinh"], [644, 0, 1, "", "skew"], [645, 0, 1, "", "slice"], [646, 0, 1, "", "sort"], [647, 0, 1, "", "sort_by"], [648, 0, 1, "", "sqrt"], [649, 0, 1, "", "std"], [708, 0, 1, "", "sub"], [709, 0, 1, "", "suffix"], [710, 0, 1, "", "sum"], [711, 0, 1, "", "tail"], [712, 0, 1, "", "take"], [713, 0, 1, "", "take_every"], [714, 0, 1, "", "tan"], [715, 0, 1, "", "tanh"], [716, 0, 1, "", "to_physical"], [717, 0, 1, "", "top_k"], [718, 0, 1, "", "top_k_by"], [719, 0, 1, "", "truediv"], [720, 0, 1, "", "unique"], [721, 0, 1, "", "unique_counts"], [722, 0, 1, "", "upper_bound"], [723, 0, 1, "", "value_counts"], [724, 0, 1, "", "var"], [725, 0, 1, "", "where"], [726, 0, 1, "", "xor"]], "polars.Expr.arr": [[337, 0, 1, "", "all"], [338, 0, 1, "", "any"], [339, 0, 1, "", "arg_max"], [340, 0, 1, "", "arg_min"], [341, 0, 1, "", "contains"], [342, 0, 1, "", "count_matches"], [343, 0, 1, "", "explode"], [344, 0, 1, "", "first"], [345, 0, 1, "", "get"], [346, 0, 1, "", "join"], [347, 0, 1, "", "last"], [348, 0, 1, "", "max"], [349, 0, 1, "", "median"], [350, 0, 1, "", "min"], [351, 0, 1, "", "n_unique"], [352, 0, 1, "", "reverse"], [353, 0, 1, "", "shift"], [354, 0, 1, "", "sort"], [355, 0, 1, "", "std"], [356, 0, 1, "", "sum"], [357, 0, 1, "", "to_list"], [358, 0, 1, "", "to_struct"], [359, 0, 1, "", "unique"], [360, 0, 1, "", "var"]], "polars.Expr.bin": [[362, 0, 1, "", "contains"], [363, 0, 1, "", "decode"], [364, 0, 1, "", "encode"], [365, 0, 1, "", "ends_with"], [366, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[370, 0, 1, "", "get_categories"], [371, 0, 1, "", "set_ordering"]], "polars.Expr.dt": [[399, 0, 1, "", "add_business_days"], [400, 0, 1, "", "base_utc_offset"], [401, 0, 1, "", "cast_time_unit"], [402, 0, 1, "", "century"], [403, 0, 1, "", "combine"], [404, 0, 1, "", "convert_time_zone"], [405, 0, 1, "", "date"], [406, 0, 1, "", "datetime"], [407, 0, 1, "", "day"], [408, 0, 1, "", "days"], [409, 0, 1, "", "dst_offset"], [410, 0, 1, "", "epoch"], [411, 0, 1, "", "hour"], [412, 0, 1, "", "hours"], [413, 0, 1, "", "is_leap_year"], [414, 0, 1, "", "iso_year"], [415, 0, 1, "", "microsecond"], [416, 0, 1, "", "microseconds"], [417, 0, 1, "", "millennium"], [418, 0, 1, "", "millisecond"], [419, 0, 1, "", "milliseconds"], [420, 0, 1, "", "minute"], [421, 0, 1, "", "minutes"], [422, 0, 1, "", "month"], [423, 0, 1, "", "month_end"], [424, 0, 1, "", "month_start"], [425, 0, 1, "", "nanosecond"], [426, 0, 1, "", "nanoseconds"], [427, 0, 1, "", "offset_by"], [428, 0, 1, "", "ordinal_day"], [429, 0, 1, "", "quarter"], [430, 0, 1, "", "replace_time_zone"], [431, 0, 1, "", "round"], [432, 0, 1, "", "second"], [433, 0, 1, "", "seconds"], [434, 0, 1, "", "strftime"], [435, 0, 1, "", "time"], [436, 0, 1, "", "timestamp"], [437, 0, 1, "", "to_string"], [438, 0, 1, "", "total_days"], [439, 0, 1, "", "total_hours"], [440, 0, 1, "", "total_microseconds"], [441, 0, 1, "", "total_milliseconds"], [442, 0, 1, "", "total_minutes"], [443, 0, 1, "", "total_nanoseconds"], [444, 0, 1, "", "total_seconds"], [445, 0, 1, "", "truncate"], [446, 0, 1, "", "week"], [447, 0, 1, "", "weekday"], [448, 0, 1, "", "with_time_unit"], [449, 0, 1, "", "year"]], "polars.Expr.list": [[503, 0, 1, "", "all"], [504, 0, 1, "", "any"], [505, 0, 1, "", "arg_max"], [506, 0, 1, "", "arg_min"], [507, 0, 1, "", "concat"], [508, 0, 1, "", "contains"], [509, 0, 1, "", "count_match"], [510, 0, 1, "", "count_matches"], [511, 0, 1, "", "diff"], [512, 0, 1, "", "drop_nulls"], [513, 0, 1, "", "eval"], [514, 0, 1, "", "explode"], [515, 0, 1, "", "first"], [516, 0, 1, "", "gather"], [517, 0, 1, "", "gather_every"], [518, 0, 1, "", "get"], [519, 0, 1, "", "head"], [520, 0, 1, "", "join"], [521, 0, 1, "", "last"], [522, 0, 1, "", "len"], [523, 0, 1, "", "lengths"], [524, 0, 1, "", "max"], [525, 0, 1, "", "mean"], [526, 0, 1, "", "median"], [527, 0, 1, "", "min"], [528, 0, 1, "", "n_unique"], [529, 0, 1, "", "reverse"], [530, 0, 1, "", "sample"], [531, 0, 1, "", "set_difference"], [532, 0, 1, "", "set_intersection"], [533, 0, 1, "", "set_symmetric_difference"], [534, 0, 1, "", "set_union"], [535, 0, 1, "", "shift"], [536, 0, 1, "", "slice"], [537, 0, 1, "", "sort"], [538, 0, 1, "", "std"], [539, 0, 1, "", "sum"], [540, 0, 1, "", "tail"], [541, 0, 1, "", "take"], [542, 0, 1, "", "to_array"], [543, 0, 1, "", "to_struct"], [544, 0, 1, "", "unique"], [545, 0, 1, "", "var"]], "polars.Expr.meta": [[559, 0, 1, "", "eq"], [560, 0, 1, "", "has_multiple_outputs"], [561, 0, 1, "", "is_regex_projection"], [562, 0, 1, "", "ne"], [563, 0, 1, "", "output_name"], [564, 0, 1, "", "pop"], [565, 0, 1, "", "root_names"], [566, 0, 1, "", "serialize"], [567, 0, 1, "", "tree_format"], [568, 0, 1, "", "undo_aliases"], [569, 0, 1, "", "write_json"]], "polars.Expr.name": [[575, 0, 1, "", "keep"], [576, 0, 1, "", "map"], [577, 0, 1, "", "map_fields"], [578, 0, 1, "", "prefix"], [579, 0, 1, "", "prefix_fields"], [580, 0, 1, "", "suffix"], [581, 0, 1, "", "suffix_fields"], [582, 0, 1, "", "to_lowercase"], [583, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[650, 0, 1, "", "concat"], [651, 0, 1, "", "contains"], [652, 0, 1, "", "contains_any"], [653, 0, 1, "", "count_match"], [654, 0, 1, "", "count_matches"], [655, 0, 1, "", "decode"], [656, 0, 1, "", "encode"], [657, 0, 1, "", "ends_with"], [658, 0, 1, "", "explode"], [659, 0, 1, "", "extract"], [660, 0, 1, "", "extract_all"], [661, 0, 1, "", "extract_groups"], [662, 0, 1, "", "find"], [663, 0, 1, "", "head"], [664, 0, 1, "", "json_decode"], [665, 0, 1, "", "json_extract"], [666, 0, 1, "", "json_path_match"], [667, 0, 1, "", "len_bytes"], [668, 0, 1, "", "len_chars"], [669, 0, 1, "", "lengths"], [670, 0, 1, "", "ljust"], [671, 0, 1, "", "lstrip"], [672, 0, 1, "", "n_chars"], [673, 0, 1, "", "pad_end"], [674, 0, 1, "", "pad_start"], [675, 0, 1, "", "parse_int"], [676, 0, 1, "", "replace"], [677, 0, 1, "", "replace_all"], [678, 0, 1, "", "replace_many"], [679, 0, 1, "", "reverse"], [680, 0, 1, "", "rjust"], [681, 0, 1, "", "rstrip"], [682, 0, 1, "", "slice"], [683, 0, 1, "", "split"], [684, 0, 1, "", "split_exact"], [685, 0, 1, "", "splitn"], [686, 0, 1, "", "starts_with"], [687, 0, 1, "", "strip"], [688, 0, 1, "", "strip_chars"], [689, 0, 1, "", "strip_chars_end"], [690, 0, 1, "", "strip_chars_start"], [691, 0, 1, "", "strip_prefix"], [692, 0, 1, "", "strip_suffix"], [693, 0, 1, "", "strptime"], [694, 0, 1, "", "tail"], [695, 0, 1, "", "to_date"], [696, 0, 1, "", "to_datetime"], [697, 0, 1, "", "to_decimal"], [698, 0, 1, "", "to_integer"], [699, 0, 1, "", "to_lowercase"], [700, 0, 1, "", "to_time"], [701, 0, 1, "", "to_titlecase"], [702, 0, 1, "", "to_uppercase"], [703, 0, 1, "", "zfill"]], "polars.Expr.struct": [[704, 0, 1, "", "field"], [705, 0, 1, "", "json_encode"], [706, 0, 1, "", "rename_fields"], [707, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[829, 0, 1, "", "approx_n_unique"], [830, 0, 1, "", "bottom_k"], [831, 0, 1, "", "cache"], [832, 0, 1, "", "cast"], [833, 0, 1, "", "clear"], [834, 0, 1, "", "clone"], [835, 0, 1, "", "collect"], [836, 0, 1, "", "collect_async"], [837, 1, 1, "", "columns"], [838, 0, 1, "", "count"], [839, 0, 1, "", "describe"], [840, 0, 1, "", "deserialize"], [841, 0, 1, "", "drop"], [842, 0, 1, "", "drop_nulls"], [843, 1, 1, "", "dtypes"], [844, 0, 1, "", "explain"], [845, 0, 1, "", "explode"], [846, 0, 1, "", "fetch"], [847, 0, 1, "", "fill_nan"], [848, 0, 1, "", "fill_null"], [849, 0, 1, "", "filter"], [850, 0, 1, "", "first"], [851, 0, 1, "", "gather_every"], [852, 0, 1, "", "group_by"], [853, 0, 1, "", "group_by_dynamic"], [854, 0, 1, "", "group_by_rolling"], [855, 0, 1, "", "groupby"], [856, 0, 1, "", "groupby_dynamic"], [857, 0, 1, "", "groupby_rolling"], [858, 0, 1, "", "head"], [859, 0, 1, "", "inspect"], [860, 0, 1, "", "interpolate"], [861, 0, 1, "", "join"], [862, 0, 1, "", "join_asof"], [863, 0, 1, "", "last"], [864, 0, 1, "", "lazy"], [865, 0, 1, "", "limit"], [866, 0, 1, "", "map"], [867, 0, 1, "", "map_batches"], [868, 0, 1, "", "max"], [869, 0, 1, "", "mean"], [870, 0, 1, "", "median"], [871, 0, 1, "", "melt"], [872, 0, 1, "", "merge_sorted"], [873, 0, 1, "", "min"], [874, 0, 1, "", "null_count"], [875, 0, 1, "", "pipe"], [876, 0, 1, "", "profile"], [877, 0, 1, "", "quantile"], [878, 0, 1, "", "rename"], [879, 0, 1, "", "reverse"], [880, 0, 1, "", "rolling"], [881, 1, 1, "", "schema"], [882, 0, 1, "", "select"], [883, 0, 1, "", "select_seq"], [884, 0, 1, "", "serialize"], [885, 0, 1, "", "set_sorted"], [886, 0, 1, "", "shift"], [887, 0, 1, "", "shift_and_fill"], [888, 0, 1, "", "show_graph"], [43, 0, 1, "", "sink_csv"], [44, 0, 1, "", "sink_ipc"], [45, 0, 1, "", "sink_ndjson"], [46, 0, 1, "", "sink_parquet"], [889, 0, 1, "", "slice"], [890, 0, 1, "", "sort"], [891, 0, 1, "", "sql"], [892, 0, 1, "", "std"], [893, 0, 1, "", "sum"], [894, 0, 1, "", "tail"], [895, 0, 1, "", "take_every"], [896, 0, 1, "", "top_k"], [897, 0, 1, "", "unique"], [898, 0, 1, "", "unnest"], [899, 0, 1, "", "update"], [900, 0, 1, "", "var"], [901, 1, 1, "", "width"], [902, 0, 1, "", "with_columns"], [903, 0, 1, "", "with_columns_seq"], [904, 0, 1, "", "with_context"], [905, 0, 1, "", "with_row_count"], [906, 0, 1, "", "with_row_index"]], "polars": [[1333, 2, 1, "", "SQLContext"], [53, 2, 1, "", "StringCache"], [54, 4, 1, "", "align_frames"], [727, 4, 1, "", "all"], [728, 4, 1, "", "all_horizontal"], [729, 4, 1, "", "any"], [730, 4, 1, "", "any_horizontal"], [731, 4, 1, "", "apply"], [732, 4, 1, "", "approx_n_unique"], [733, 4, 1, "", "arange"], [734, 4, 1, "", "arctan2"], [735, 4, 1, "", "arctan2d"], [736, 4, 1, "", "arg_sort_by"], [737, 4, 1, "", "arg_where"], [59, 4, 1, "", "build_info"], [738, 4, 1, "", "business_day_count"], [739, 4, 1, "", "coalesce"], [60, 4, 1, "", "collect_all"], [61, 4, 1, "", "collect_all_async"], [62, 4, 1, "", "concat"], [740, 4, 1, "", "concat_list"], [741, 4, 1, "", "concat_str"], [742, 4, 1, "", "corr"], [743, 4, 1, "", "count"], [744, 4, 1, "", "cov"], [745, 4, 1, "", "cum_count"], [746, 4, 1, "", "cum_fold"], [747, 4, 1, "", "cum_reduce"], [748, 4, 1, "", "cum_sum"], [749, 4, 1, "", "cum_sum_horizontal"], [750, 4, 1, "", "cumfold"], [751, 4, 1, "", "cumreduce"], [752, 4, 1, "", "cumsum"], [753, 4, 1, "", "cumsum_horizontal"], [754, 4, 1, "", "date"], [755, 4, 1, "", "date_range"], [756, 4, 1, "", "date_ranges"], [757, 4, 1, "", "datetime"], [758, 4, 1, "", "datetime_range"], [759, 4, 1, "", "datetime_ranges"], [91, 4, 1, "", "disable_string_cache"], [760, 4, 1, "", "duration"], [761, 4, 1, "", "element"], [92, 4, 1, "", "enable_string_cache"], [762, 4, 1, "", "exclude"], [763, 4, 1, "", "first"], [764, 4, 1, "", "fold"], [765, 4, 1, "", "format"], [108, 4, 1, "", "from_arrow"], [109, 4, 1, "", "from_dataframe"], [110, 4, 1, "", "from_dict"], [111, 4, 1, "", "from_dicts"], [766, 4, 1, "", "from_epoch"], [112, 4, 1, "", "from_numpy"], [113, 4, 1, "", "from_pandas"], [114, 4, 1, "", "from_records"], [115, 4, 1, "", "from_repr"], [116, 4, 1, "", "get_index_type"], [767, 4, 1, "", "groups"], [768, 4, 1, "", "head"], [769, 4, 1, "", "implode"], [770, 4, 1, "", "int_range"], [771, 4, 1, "", "int_ranges"], [772, 4, 1, "", "last"], [773, 4, 1, "", "len"], [774, 4, 1, "", "lit"], [775, 4, 1, "", "map"], [776, 4, 1, "", "map_batches"], [777, 4, 1, "", "map_groups"], [778, 4, 1, "", "max"], [779, 4, 1, "", "max_horizontal"], [780, 4, 1, "", "mean"], [781, 4, 1, "", "mean_horizontal"], [782, 4, 1, "", "median"], [783, 4, 1, "", "min"], [784, 4, 1, "", "min_horizontal"], [785, 4, 1, "", "n_unique"], [786, 4, 1, "", "nth"], [787, 4, 1, "", "ones"], [931, 6, 0, "-", "plugins"], [788, 4, 1, "", "quantile"], [118, 4, 1, "", "read_avro"], [119, 4, 1, "", "read_clipboard"], [120, 4, 1, "", "read_csv"], [121, 4, 1, "", "read_csv_batched"], [122, 4, 1, "", "read_database"], [123, 4, 1, "", "read_database_uri"], [124, 4, 1, "", "read_delta"], [125, 4, 1, "", "read_excel"], [126, 4, 1, "", "read_ipc"], [127, 4, 1, "", "read_ipc_schema"], [128, 4, 1, "", "read_ipc_stream"], [129, 4, 1, "", "read_json"], [130, 4, 1, "", "read_ndjson"], [131, 4, 1, "", "read_ods"], [132, 4, 1, "", "read_parquet"], [133, 4, 1, "", "read_parquet_schema"], [789, 4, 1, "", "reduce"], [790, 4, 1, "", "repeat"], [791, 4, 1, "", "rolling_corr"], [792, 4, 1, "", "rolling_cov"], [134, 4, 1, "", "scan_csv"], [135, 4, 1, "", "scan_delta"], [136, 4, 1, "", "scan_iceberg"], [137, 4, 1, "", "scan_ipc"], [138, 4, 1, "", "scan_ndjson"], [139, 4, 1, "", "scan_parquet"], [140, 4, 1, "", "scan_pyarrow_dataset"], [793, 4, 1, "", "select"], [932, 6, 0, "-", "selectors"], [141, 4, 1, "", "set_random_seed"], [142, 4, 1, "", "show_versions"], [794, 4, 1, "", "sql_expr"], [795, 4, 1, "", "std"], [796, 4, 1, "", "struct"], [797, 4, 1, "", "sum"], [798, 4, 1, "", "sum_horizontal"], [799, 4, 1, "", "tail"], [156, 4, 1, "", "thread_pool_size"], [157, 4, 1, "", "threadpool_size"], [800, 4, 1, "", "time"], [801, 4, 1, "", "time_range"], [802, 4, 1, "", "time_ranges"], [158, 4, 1, "", "using_string_cache"], [803, 4, 1, "", "var"], [804, 4, 1, "", "when"], [805, 4, 1, "", "zeros"]], "polars.SQLContext": [[1333, 0, 1, "", "__enter__"], [1333, 0, 1, "", "__exit__"], [1333, 0, 1, "", "__init__"], [47, 0, 1, "", "execute"], [48, 0, 1, "", "register"], [49, 0, 1, "", "register_globals"], [50, 0, 1, "", "register_many"], [51, 0, 1, "", "tables"], [52, 0, 1, "", "unregister"]], "polars.Series": [[934, 0, 1, "", "abs"], [935, 0, 1, "", "alias"], [936, 0, 1, "", "all"], [937, 0, 1, "", "any"], [938, 0, 1, "", "append"], [939, 0, 1, "", "apply"], [940, 0, 1, "", "arccos"], [941, 0, 1, "", "arccosh"], [942, 0, 1, "", "arcsin"], [943, 0, 1, "", "arcsinh"], [944, 0, 1, "", "arctan"], [945, 0, 1, "", "arctanh"], [946, 0, 1, "", "arg_max"], [947, 0, 1, "", "arg_min"], [948, 0, 1, "", "arg_sort"], [949, 0, 1, "", "arg_true"], [950, 0, 1, "", "arg_unique"], [980, 0, 1, "", "bottom_k"], [981, 0, 1, "", "cast"], [987, 0, 1, "", "cbrt"], [988, 0, 1, "", "ceil"], [989, 0, 1, "", "chunk_lengths"], [990, 0, 1, "", "clear"], [991, 0, 1, "", "clip"], [992, 0, 1, "", "clip_max"], [993, 0, 1, "", "clip_min"], [994, 0, 1, "", "clone"], [995, 0, 1, "", "cos"], [996, 0, 1, "", "cosh"], [997, 0, 1, "", "cot"], [998, 0, 1, "", "cum_max"], [999, 0, 1, "", "cum_min"], [1000, 0, 1, "", "cum_prod"], [1001, 0, 1, "", "cum_sum"], [1002, 0, 1, "", "cummax"], [1003, 0, 1, "", "cummin"], [1004, 0, 1, "", "cumprod"], [1005, 0, 1, "", "cumsum"], [1006, 0, 1, "", "cumulative_eval"], [1007, 0, 1, "", "cut"], [1008, 0, 1, "", "describe"], [1009, 0, 1, "", "diff"], [1010, 0, 1, "", "dot"], [1011, 0, 1, "", "drop_nans"], [1012, 0, 1, "", "drop_nulls"], [1068, 3, 1, "", "dtype"], [1069, 0, 1, "", "entropy"], [1070, 0, 1, "", "equals"], [1071, 0, 1, "", "estimated_size"], [1072, 0, 1, "", "ewm_mean"], [1073, 0, 1, "", "ewm_mean_by"], [1074, 0, 1, "", "ewm_std"], [1075, 0, 1, "", "ewm_var"], [1076, 0, 1, "", "exp"], [1077, 0, 1, "", "explode"], [1078, 0, 1, "", "extend"], [1079, 0, 1, "", "extend_constant"], [1080, 0, 1, "", "fill_nan"], [1081, 0, 1, "", "fill_null"], [1082, 0, 1, "", "filter"], [1083, 3, 1, "", "flags"], [1084, 0, 1, "", "floor"], [1085, 0, 1, "", "gather"], [1086, 0, 1, "", "gather_every"], [1087, 0, 1, "", "get_chunks"], [1088, 0, 1, "", "has_validity"], [1089, 0, 1, "", "hash"], [1090, 0, 1, "", "head"], [1091, 0, 1, "", "hist"], [1092, 0, 1, "", "implode"], [1093, 3, 1, "", "inner_dtype"], [1094, 0, 1, "", "interpolate"], [1095, 0, 1, "", "interpolate_by"], [1096, 0, 1, "", "is_between"], [1097, 0, 1, "", "is_boolean"], [1098, 0, 1, "", "is_duplicated"], [1099, 0, 1, "", "is_empty"], [1100, 0, 1, "", "is_finite"], [1101, 0, 1, "", "is_first"], [1102, 0, 1, "", "is_first_distinct"], [1103, 0, 1, "", "is_float"], [1104, 0, 1, "", "is_in"], [1105, 0, 1, "", "is_infinite"], [1106, 0, 1, "", "is_integer"], [1107, 0, 1, "", "is_last"], [1108, 0, 1, "", "is_last_distinct"], [1109, 0, 1, "", "is_nan"], [1110, 0, 1, "", "is_not_nan"], [1111, 0, 1, "", "is_not_null"], [1112, 0, 1, "", "is_null"], [1113, 0, 1, "", "is_numeric"], [1114, 0, 1, "", "is_sorted"], [1115, 0, 1, "", "is_temporal"], [1116, 0, 1, "", "is_unique"], [1117, 0, 1, "", "is_utf8"], [1118, 0, 1, "", "item"], [1119, 0, 1, "", "kurtosis"], [1120, 0, 1, "", "len"], [1121, 0, 1, "", "limit"], [1165, 0, 1, "", "log"], [1166, 0, 1, "", "log10"], [1167, 0, 1, "", "log1p"], [1168, 0, 1, "", "lower_bound"], [1169, 0, 1, "", "map_dict"], [1170, 0, 1, "", "map_elements"], [1171, 0, 1, "", "max"], [1172, 0, 1, "", "mean"], [1173, 0, 1, "", "median"], [1174, 0, 1, "", "min"], [1175, 0, 1, "", "mode"], [1176, 0, 1, "", "n_chunks"], [1177, 0, 1, "", "n_unique"], [1178, 3, 1, "", "name"], [1179, 0, 1, "", "nan_max"], [1180, 0, 1, "", "nan_min"], [1181, 0, 1, "", "new_from_index"], [1182, 0, 1, "", "not_"], [1183, 0, 1, "", "null_count"], [1184, 0, 1, "", "pct_change"], [1185, 0, 1, "", "peak_max"], [1186, 0, 1, "", "peak_min"], [1187, 0, 1, "", "product"], [1188, 0, 1, "", "qcut"], [1189, 0, 1, "", "quantile"], [1190, 0, 1, "", "rank"], [1191, 0, 1, "", "rechunk"], [1192, 0, 1, "", "reinterpret"], [1193, 0, 1, "", "rename"], [1194, 0, 1, "", "replace"], [1195, 0, 1, "", "reshape"], [1196, 0, 1, "", "reverse"], [1197, 0, 1, "", "rle"], [1198, 0, 1, "", "rle_id"], [1199, 0, 1, "", "rolling_apply"], [1200, 0, 1, "", "rolling_map"], [1201, 0, 1, "", "rolling_max"], [1202, 0, 1, "", "rolling_mean"], [1203, 0, 1, "", "rolling_median"], [1204, 0, 1, "", "rolling_min"], [1205, 0, 1, "", "rolling_quantile"], [1206, 0, 1, "", "rolling_skew"], [1207, 0, 1, "", "rolling_std"], [1208, 0, 1, "", "rolling_sum"], [1209, 0, 1, "", "rolling_var"], [1210, 0, 1, "", "round"], [1211, 0, 1, "", "round_sig_figs"], [1212, 0, 1, "", "sample"], [1213, 0, 1, "", "scatter"], [1214, 0, 1, "", "search_sorted"], [1215, 0, 1, "", "series_equal"], [1216, 0, 1, "", "set"], [1217, 0, 1, "", "set_at_idx"], [1218, 0, 1, "", "set_sorted"], [1219, 3, 1, "", "shape"], [1220, 0, 1, "", "shift"], [1221, 0, 1, "", "shift_and_fill"], [1222, 0, 1, "", "shrink_dtype"], [1223, 0, 1, "", "shrink_to_fit"], [1224, 0, 1, "", "shuffle"], [1225, 0, 1, "", "sign"], [1226, 0, 1, "", "sin"], [1227, 0, 1, "", "sinh"], [1228, 0, 1, "", "skew"], [1229, 0, 1, "", "slice"], [1230, 0, 1, "", "sort"], [1231, 0, 1, "", "sqrt"], [1232, 0, 1, "", "std"], [1293, 0, 1, "", "sum"], [1294, 0, 1, "", "tail"], [1295, 0, 1, "", "take"], [1296, 0, 1, "", "take_every"], [1297, 0, 1, "", "tan"], [1298, 0, 1, "", "tanh"], [1299, 0, 1, "", "to_arrow"], [1300, 0, 1, "", "to_dummies"], [1301, 0, 1, "", "to_frame"], [1302, 0, 1, "", "to_init_repr"], [1303, 0, 1, "", "to_jax"], [1304, 0, 1, "", "to_list"], [1305, 0, 1, "", "to_numpy"], [1306, 0, 1, "", "to_pandas"], [1307, 0, 1, "", "to_physical"], [1308, 0, 1, "", "to_torch"], [1309, 0, 1, "", "top_k"], [1310, 0, 1, "", "unique"], [1311, 0, 1, "", "unique_counts"], [1312, 0, 1, "", "upper_bound"], [1313, 0, 1, "", "value_counts"], [1314, 0, 1, "", "var"], [1315, 0, 1, "", "view"], [1316, 0, 1, "", "zip_with"]], "polars.Series.arr": [[951, 0, 1, "", "all"], [952, 0, 1, "", "any"], [953, 0, 1, "", "arg_max"], [954, 0, 1, "", "arg_min"], [955, 0, 1, "", "contains"], [956, 0, 1, "", "count_matches"], [957, 0, 1, "", "explode"], [958, 0, 1, "", "first"], [959, 0, 1, "", "get"], [960, 0, 1, "", "join"], [961, 0, 1, "", "last"], [962, 0, 1, "", "max"], [963, 0, 1, "", "median"], [964, 0, 1, "", "min"], [965, 0, 1, "", "n_unique"], [966, 0, 1, "", "reverse"], [967, 0, 1, "", "shift"], [968, 0, 1, "", "sort"], [969, 0, 1, "", "std"], [970, 0, 1, "", "sum"], [971, 0, 1, "", "to_list"], [972, 0, 1, "", "to_struct"], [973, 0, 1, "", "unique"], [974, 0, 1, "", "var"]], "polars.Series.bin": [[975, 0, 1, "", "contains"], [976, 0, 1, "", "decode"], [977, 0, 1, "", "encode"], [978, 0, 1, "", "ends_with"], [979, 0, 1, "", "starts_with"]], "polars.Series.cat": [[982, 0, 1, "", "get_categories"], [983, 0, 1, "", "is_local"], [984, 0, 1, "", "set_ordering"], [985, 0, 1, "", "to_local"], [986, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1013, 0, 1, "", "add_business_days"], [1014, 0, 1, "", "base_utc_offset"], [1015, 0, 1, "", "cast_time_unit"], [1016, 0, 1, "", "century"], [1017, 0, 1, "", "combine"], [1018, 0, 1, "", "convert_time_zone"], [1019, 0, 1, "", "date"], [1020, 0, 1, "", "datetime"], [1021, 0, 1, "", "day"], [1022, 0, 1, "", "days"], [1023, 0, 1, "", "dst_offset"], [1024, 0, 1, "", "epoch"], [1025, 0, 1, "", "hour"], [1026, 0, 1, "", "hours"], [1027, 0, 1, "", "is_leap_year"], [1028, 0, 1, "", "iso_year"], [1029, 0, 1, "", "max"], [1030, 0, 1, "", "mean"], [1031, 0, 1, "", "median"], [1032, 0, 1, "", "microsecond"], [1033, 0, 1, "", "microseconds"], [1034, 0, 1, "", "millennium"], [1035, 0, 1, "", "millisecond"], [1036, 0, 1, "", "milliseconds"], [1037, 0, 1, "", "min"], [1038, 0, 1, "", "minute"], [1039, 0, 1, "", "minutes"], [1040, 0, 1, "", "month"], [1041, 0, 1, "", "month_end"], [1042, 0, 1, "", "month_start"], [1043, 0, 1, "", "nanosecond"], [1044, 0, 1, "", "nanoseconds"], [1045, 0, 1, "", "offset_by"], [1046, 0, 1, "", "ordinal_day"], [1047, 0, 1, "", "quarter"], [1048, 0, 1, "", "replace_time_zone"], [1049, 0, 1, "", "round"], [1050, 0, 1, "", "second"], [1051, 0, 1, "", "seconds"], [1052, 0, 1, "", "strftime"], [1053, 0, 1, "", "time"], [1054, 0, 1, "", "timestamp"], [1055, 0, 1, "", "to_string"], [1056, 0, 1, "", "total_days"], [1057, 0, 1, "", "total_hours"], [1058, 0, 1, "", "total_microseconds"], [1059, 0, 1, "", "total_milliseconds"], [1060, 0, 1, "", "total_minutes"], [1061, 0, 1, "", "total_nanoseconds"], [1062, 0, 1, "", "total_seconds"], [1063, 0, 1, "", "truncate"], [1064, 0, 1, "", "week"], [1065, 0, 1, "", "weekday"], [1066, 0, 1, "", "with_time_unit"], [1067, 0, 1, "", "year"]], "polars.Series.list": [[1122, 0, 1, "", "all"], [1123, 0, 1, "", "any"], [1124, 0, 1, "", "arg_max"], [1125, 0, 1, "", "arg_min"], [1126, 0, 1, "", "concat"], [1127, 0, 1, "", "contains"], [1128, 0, 1, "", "count_match"], [1129, 0, 1, "", "count_matches"], [1130, 0, 1, "", "diff"], [1131, 0, 1, "", "drop_nulls"], [1132, 0, 1, "", "eval"], [1133, 0, 1, "", "explode"], [1134, 0, 1, "", "first"], [1135, 0, 1, "", "gather"], [1136, 0, 1, "", "gather_every"], [1137, 0, 1, "", "get"], [1138, 0, 1, "", "head"], [1139, 0, 1, "", "join"], [1140, 0, 1, "", "last"], [1141, 0, 1, "", "len"], [1142, 0, 1, "", "lengths"], [1143, 0, 1, "", "max"], [1144, 0, 1, "", "mean"], [1145, 0, 1, "", "median"], [1146, 0, 1, "", "min"], [1147, 0, 1, "", "n_unique"], [1148, 0, 1, "", "reverse"], [1149, 0, 1, "", "sample"], [1150, 0, 1, "", "set_difference"], [1151, 0, 1, "", "set_intersection"], [1152, 0, 1, "", "set_symmetric_difference"], [1153, 0, 1, "", "set_union"], [1154, 0, 1, "", "shift"], [1155, 0, 1, "", "slice"], [1156, 0, 1, "", "sort"], [1157, 0, 1, "", "std"], [1158, 0, 1, "", "sum"], [1159, 0, 1, "", "tail"], [1160, 0, 1, "", "take"], [1161, 0, 1, "", "to_array"], [1162, 0, 1, "", "to_struct"], [1163, 0, 1, "", "unique"], [1164, 0, 1, "", "var"]], "polars.Series.str": [[1233, 0, 1, "", "concat"], [1234, 0, 1, "", "contains"], [1235, 0, 1, "", "contains_any"], [1236, 0, 1, "", "count_match"], [1237, 0, 1, "", "count_matches"], [1238, 0, 1, "", "decode"], [1239, 0, 1, "", "encode"], [1240, 0, 1, "", "ends_with"], [1241, 0, 1, "", "explode"], [1242, 0, 1, "", "extract"], [1243, 0, 1, "", "extract_all"], [1244, 0, 1, "", "extract_groups"], [1245, 0, 1, "", "find"], [1246, 0, 1, "", "head"], [1247, 0, 1, "", "json_decode"], [1248, 0, 1, "", "json_extract"], [1249, 0, 1, "", "json_path_match"], [1250, 0, 1, "", "len_bytes"], [1251, 0, 1, "", "len_chars"], [1252, 0, 1, "", "lengths"], [1253, 0, 1, "", "ljust"], [1254, 0, 1, "", "lstrip"], [1255, 0, 1, "", "n_chars"], [1256, 0, 1, "", "pad_end"], [1257, 0, 1, "", "pad_start"], [1258, 0, 1, "", "parse_int"], [1259, 0, 1, "", "replace"], [1260, 0, 1, "", "replace_all"], [1261, 0, 1, "", "replace_many"], [1262, 0, 1, "", "reverse"], [1263, 0, 1, "", "rjust"], [1264, 0, 1, "", "rstrip"], [1265, 0, 1, "", "slice"], [1266, 0, 1, "", "split"], [1267, 0, 1, "", "split_exact"], [1268, 0, 1, "", "splitn"], [1269, 0, 1, "", "starts_with"], [1270, 0, 1, "", "strip"], [1271, 0, 1, "", "strip_chars"], [1272, 0, 1, "", "strip_chars_end"], [1273, 0, 1, "", "strip_chars_start"], [1274, 0, 1, "", "strip_prefix"], [1275, 0, 1, "", "strip_suffix"], [1276, 0, 1, "", "strptime"], [1277, 0, 1, "", "tail"], [1278, 0, 1, "", "to_date"], [1279, 0, 1, "", "to_datetime"], [1280, 0, 1, "", "to_decimal"], [1281, 0, 1, "", "to_integer"], [1282, 0, 1, "", "to_lowercase"], [1283, 0, 1, "", "to_time"], [1284, 0, 1, "", "to_titlecase"], [1285, 0, 1, "", "to_uppercase"], [1286, 0, 1, "", "zfill"]], "polars.Series.struct": [[1287, 0, 1, "", "field"], [1288, 3, 1, "", "fields"], [1289, 0, 1, "", "json_encode"], [1290, 0, 1, "", "rename_fields"], [1291, 3, 1, "", "schema"], [1292, 0, 1, "", "unnest"]], "polars.StringCache": [[53, 0, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[286, 0, 1, "", "__iter__"], [287, 0, 1, "", "agg"], [288, 0, 1, "", "all"], [289, 0, 1, "", "apply"], [290, 0, 1, "", "count"], [291, 0, 1, "", "first"], [292, 0, 1, "", "head"], [293, 0, 1, "", "last"], [294, 0, 1, "", "len"], [295, 0, 1, "", "map_groups"], [296, 0, 1, "", "max"], [297, 0, 1, "", "mean"], [298, 0, 1, "", "median"], [299, 0, 1, "", "min"], [300, 0, 1, "", "n_unique"], [301, 0, 1, "", "quantile"], [302, 0, 1, "", "sum"], [303, 0, 1, "", "tail"]], "polars.datatypes": [[63, 2, 1, "", "Array"], [64, 2, 1, "", "Binary"], [65, 2, 1, "", "Boolean"], [66, 2, 1, "", "Categorical"], [67, 2, 1, "", "DataType"], [68, 2, 1, "", "Date"], [69, 2, 1, "", "Datetime"], [70, 2, 1, "", "Decimal"], [71, 2, 1, "", "Duration"], [72, 2, 1, "", "Enum"], [73, 2, 1, "", "Float32"], [74, 2, 1, "", "Float64"], [75, 2, 1, "", "Int16"], [76, 2, 1, "", "Int32"], [77, 2, 1, "", "Int64"], [78, 2, 1, "", "Int8"], [79, 2, 1, "", "List"], [80, 2, 1, "", "Null"], [81, 2, 1, "", "Object"], [82, 2, 1, "", "String"], [83, 2, 1, "", "Struct"], [84, 2, 1, "", "Time"], [85, 2, 1, "", "UInt16"], [86, 2, 1, "", "UInt32"], [87, 2, 1, "", "UInt64"], [88, 2, 1, "", "UInt8"], [89, 2, 1, "", "Unknown"], [90, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[66, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[78, 0, 1, "", "__init__"]], "polars.datatypes.List": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[81, 0, 1, "", "__init__"]], "polars.datatypes.String": [[82, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[83, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[86, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[87, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[88, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[89, 0, 1, "", "__init__"]], "polars.exceptions": [[93, 5, 1, "", "ArrowError"], [94, 5, 1, "", "ColumnNotFoundError"], [95, 5, 1, "", "ComputeError"], [96, 5, 1, "", "DuplicateError"], [97, 5, 1, "", "InvalidOperationError"], [98, 5, 1, "", "NoDataError"], [99, 5, 1, "", "NoRowsReturnedError"], [100, 5, 1, "", "PolarsError"], [101, 5, 1, "", "PolarsPanicError"], [102, 5, 1, "", "RowsError"], [103, 5, 1, "", "SchemaError"], [104, 5, 1, "", "SchemaFieldNotFoundError"], [105, 5, 1, "", "ShapeError"], [106, 5, 1, "", "StructFieldNotFoundError"], [107, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[117, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[907, 0, 1, "", "agg"], [908, 0, 1, "", "all"], [909, 0, 1, "", "apply"], [910, 0, 1, "", "count"], [911, 0, 1, "", "first"], [912, 0, 1, "", "head"], [913, 0, 1, "", "last"], [914, 0, 1, "", "len"], [915, 0, 1, "", "map_groups"], [916, 0, 1, "", "max"], [917, 0, 1, "", "mean"], [918, 0, 1, "", "median"], [919, 0, 1, "", "min"], [920, 0, 1, "", "n_unique"], [921, 0, 1, "", "quantile"], [922, 0, 1, "", "sum"], [923, 0, 1, "", "tail"]], "polars.plugins": [[931, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[932, 4, 1, "", "all"], [932, 4, 1, "", "alpha"], [932, 4, 1, "", "alphanumeric"], [932, 4, 1, "", "binary"], [932, 4, 1, "", "boolean"], [932, 4, 1, "", "by_dtype"], [932, 4, 1, "", "by_index"], [932, 4, 1, "", "by_name"], [932, 4, 1, "", "categorical"], [932, 4, 1, "", "contains"], [932, 4, 1, "", "date"], [932, 4, 1, "", "datetime"], [932, 4, 1, "", "decimal"], [932, 4, 1, "", "digit"], [932, 4, 1, "", "duration"], [932, 4, 1, "", "ends_with"], [932, 4, 1, "", "exclude"], [932, 4, 1, "", "expand_selector"], [932, 4, 1, "", "first"], [932, 4, 1, "", "float"], [932, 4, 1, "", "integer"], [932, 4, 1, "", "is_selector"], [932, 4, 1, "", "last"], [932, 4, 1, "", "matches"], [932, 4, 1, "", "numeric"], [932, 4, 1, "", "signed_integer"], [932, 4, 1, "", "starts_with"], [932, 4, 1, "", "string"], [932, 4, 1, "", "temporal"], [932, 4, 1, "", "time"], [932, 4, 1, "", "unsigned_integer"]], "polars.testing": [[143, 4, 1, "", "assert_frame_equal"], [144, 4, 1, "", "assert_frame_not_equal"], [145, 4, 1, "", "assert_series_equal"], [146, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[147, 2, 1, "", "column"], [148, 4, 1, "", "columns"], [149, 4, 1, "", "create_list_strategy"], [150, 4, 1, "", "dataframes"], [151, 4, 1, "", "dtypes"], [152, 4, 1, "", "lists"], [153, 4, 1, "", "load_profile"], [154, 4, 1, "", "series"], [155, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[147, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 179, 1078], "api": [1, 55, 56, 57, 58, 826], "provid": 1, "new": 1, "function": [1, 813, 825, 932], "avail": 1, "registr": 1, "exampl": [1, 312, 932, 1329, 1334], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 810, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1334], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 159], "activate_decim": 2, "load": [3, 159], "load_from_fil": 4, "restore_default": 5, "save": [6, 159], "save_to_fil": 7, "set_ascii_t": 8, "set_auto_structifi": 9, "set_decimal_separ": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_verbos": 30, "state": [31, 159], "datafram": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 150, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309], "write_avro": 32, "write_clipboard": 33, "write_csv": 34, "write_databas": 35, "write_delta": 36, "write_excel": 37, "write_ipc": 38, "write_ipc_stream": 39, "write_json": [40, 569], "write_ndjson": 41, "write_parquet": 42, "lazyfram": [43, 44, 45, 46, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927], "sink_csv": 43, "sink_ipc": 44, "sink_ndjson": 45, "sink_parquet": 46, "sqlcontext": [47, 48, 49, 50, 51, 52], "execut": 47, "regist": 48, "register_glob": 49, "register_mani": 50, "tabl": 51, "unregist": 52, "stringcach": [53, 825], "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "build_info": 59, "collect_al": 60, "collect_all_async": 61, "concat": [62, 507, 650, 1126, 1233], "datatyp": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 313], "arrai": [63, 806, 1317], "binari": [64, 807, 820, 1319], "boolean": [65, 808, 1320], "categor": 66, "date": [68, 405, 754, 1019], "datetim": [69, 406, 757, 1020], "decim": 70, "durat": [71, 760], "enum": 72, "float32": 73, "float64": 74, "int16": 75, "int32": 76, "int64": 77, "int8": 78, "list": [79, 152, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 815, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1326], "null": 80, "object": 81, "string": [82, 313, 821, 1330], "struct": [83, 704, 705, 706, 707, 796, 822, 1287, 1288, 1289, 1290, 1291, 1292, 1331], "time": [84, 435, 800, 1053], "uint16": 85, "uint32": 86, "uint64": 87, "uint8": 88, "unknown": 89, "utf8": 90, "disable_string_cach": 91, "enable_string_cach": 92, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 314], "arrowerror": 93, "columnnotfounderror": 94, "computeerror": 95, "duplicateerror": 96, "invalidoperationerror": 97, "nodataerror": 98, "norowsreturnederror": 99, "polarserror": 100, "polarspanicerror": 101, "rowserror": 102, "schemaerror": 103, "schemafieldnotfounderror": 104, "shapeerror": 105, "structfieldnotfounderror": 106, "toomanyrowsreturnederror": 107, "from_arrow": 108, "from_datafram": 109, "from_dict": [110, 111], "from_numpi": 112, "from_panda": 113, "from_record": 114, "from_repr": 115, "get_index_typ": 116, "io": 117, "csv": [117, 827], "batched_read": 117, "batchedcsvread": 117, "next_batch": 117, "read_avro": 118, "read_clipboard": 119, "read_csv": 120, "read_csv_batch": 121, "read_databas": 122, "read_database_uri": 123, "read_delta": 124, "read_excel": 125, "read_ipc": 126, "read_ipc_schema": 127, "read_ipc_stream": 128, "read_json": 129, "read_ndjson": 130, "read_od": 131, "read_parquet": 132, "read_parquet_schema": 133, "scan_csv": 134, "scan_delta": 135, "scan_iceberg": 136, "scan_ipc": 137, "scan_ndjson": 138, "scan_parquet": 139, "scan_pyarrow_dataset": 140, "set_random_se": 141, "show_vers": 142, "test": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 1334], "assert_frame_equ": 143, "assert_frame_not_equ": 144, "assert_series_equ": 145, "assert_series_not_equ": 146, "parametr": [147, 148, 149, 150, 151, 152, 153, 154, 155, 1334], "column": [147, 148, 168, 811, 837], "create_list_strategi": 149, "dtype": [151, 175, 843, 1068], "load_profil": 153, "seri": [154, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1325], "set_profil": 155, "thread_pool_s": 156, "threadpool_s": 157, "using_string_cach": 158, "option": 159, "us": 159, "context": 159, "manag": 159, "decor": 159, "aggreg": [160, 315, 828, 933], "__dataframe__": 161, "appli": [162, 289, 324, 731, 909, 939], "approx_n_uniqu": [163, 325, 732, 829], "bottom_k": [164, 367, 830, 980], "cast": [165, 369, 832, 981], "clear": [166, 833, 990], "clone": [167, 834, 994], "corr": [169, 742], "count": [170, 290, 380, 743, 838, 910], "describ": [171, 839, 1008], "drop": [172, 841], "drop_in_plac": 173, "drop_nul": [174, 398, 512, 842, 1012, 1131], "equal": [176, 1070], "estimated_s": [177, 1071], "explod": [178, 343, 459, 514, 658, 845, 957, 1077, 1133, 1241], "fill_nan": [180, 461, 847, 1080], "fill_nul": [181, 462, 848, 1081], "filter": [182, 463, 849, 1082], "find_idx_by_nam": 183, "flag": [184, 1083], "fold": [185, 764], "frame_equ": 186, "gather_everi": [187, 471, 517, 851, 1086, 1136], "get_column": [188, 190], "get_column_index": 189, "glimps": 191, "group_bi": [192, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 852, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "group_by_dynam": [193, 853], "group_by_rol": [194, 854], "groupbi": [195, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 855, 926], "groupby_dynam": [196, 856], "groupby_rol": [197, 857], "hash_row": 198, "head": [199, 292, 476, 519, 663, 768, 858, 912, 1090, 1138, 1246], "height": 200, "hstack": 201, "insert_at_idx": 202, "insert_column": 203, "interpol": [204, 480, 860, 1094], "is_dupl": [205, 483, 1098], "is_empti": [206, 1099], "is_uniqu": [207, 496, 1116], "item": [208, 1118], "iter_column": 209, "iter_row": 210, "iter_slic": 211, "join": [212, 346, 520, 861, 960, 1139], "join_asof": [213, 862], "lazi": [214, 864], "limit": [215, 502, 865, 1121], "map_row": 216, "max": [217, 296, 348, 524, 556, 778, 868, 916, 962, 1029, 1143, 1171], "max_horizont": [218, 779], "mean": [219, 297, 525, 557, 780, 869, 917, 1030, 1144, 1172], "mean_horizont": [220, 781], "median": [221, 298, 349, 526, 558, 782, 870, 918, 963, 1031, 1145, 1173], "melt": [222, 871], "merge_sort": [223, 872], "min": [224, 299, 350, 527, 570, 783, 873, 919, 964, 1037, 1146, 1174], "min_horizont": [225, 784], "n_chunk": [226, 1176], "n_uniqu": [227, 300, 351, 528, 574, 785, 920, 965, 1147, 1177], "null_count": [228, 590, 874, 1183], "partition_bi": 229, "pipe": [230, 596, 875], "pivot": 231, "product": [232, 599, 1187], "quantil": [233, 301, 601, 788, 877, 921, 1189], "rechunk": [234, 604, 1191], "renam": [235, 878, 1193], "replac": [236, 607, 676, 1194, 1259], "replace_at_idx": 237, "replace_column": 238, "revers": [239, 352, 529, 609, 679, 879, 966, 1148, 1196, 1262], "roll": [240, 612, 880], "row": [241, 242], "rows_by_kei": 243, "sampl": [244, 530, 634, 1149, 1212], "schema": [245, 881, 1291], "select": [246, 311, 793, 818, 882, 929, 1328], "select_seq": [247, 883], "set_sort": [248, 636, 885, 1218], "shape": [249, 1219], "shift": [250, 353, 535, 637, 886, 967, 1154, 1220], "shift_and_fil": [251, 638, 887, 1221], "shrink_to_fit": [252, 1223], "slice": [253, 536, 645, 682, 889, 1155, 1229, 1265], "sort": [254, 354, 537, 646, 890, 968, 1156, 1230], "sql": [255, 891, 1333], "std": [256, 355, 538, 649, 795, 892, 969, 1157, 1232], "sum": [257, 302, 356, 539, 710, 797, 893, 922, 970, 1158, 1293], "sum_horizont": [258, 798], "tail": [259, 303, 540, 694, 711, 799, 894, 923, 1159, 1277, 1294], "take_everi": [260, 713, 895, 1296], "to_arrow": [261, 1299], "to_dict": [262, 263], "to_dummi": [264, 1300], "to_init_repr": [265, 1302], "to_jax": [266, 1303], "to_numpi": [267, 1305], "to_panda": [268, 1306], "to_seri": 269, "to_struct": [270, 358, 543, 972, 1162], "to_torch": [271, 1308], "top_k": [272, 717, 896, 1309], "transpos": 273, "uniqu": [274, 359, 544, 720, 897, 973, 1163, 1310], "unnest": [275, 898, 1292], "unstack": 276, "updat": [277, 899], "upsampl": 278, "var": [279, 360, 545, 724, 803, 900, 974, 1164, 1314], "vstack": 280, "width": [281, 901], "with_column": [282, 902], "with_columns_seq": [283, 903], "with_row_count": [284, 905], "with_row_index": [285, 906], "__iter__": 286, "agg": [287, 907], "all": [288, 320, 337, 503, 727, 908, 936, 951, 1122], "first": [291, 344, 464, 515, 763, 850, 911, 958, 1134], "last": [293, 347, 499, 521, 772, 863, 913, 961, 1140], "len": [294, 501, 522, 773, 914, 1120, 1141], "map_group": [295, 777, 915], "attribut": [304, 924, 1318], "comput": [305, 812, 1322], "descript": [306, 925, 1323], "export": [307, 1324], "miscellan": [310, 817, 825, 928, 1327], "manipul": [311, 818, 929, 1328], "plot": [312, 1329], "data": 313, "type": 313, "numer": [313, 820], "tempor": [313, 823, 1332], "nest": 313, "other": 313, "expr": [316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726], "ab": [316, 934], "add": 317, "agg_group": 318, "alia": [319, 935], "and_": 321, "ani": [322, 338, 504, 729, 937, 952, 1123], "append": [323, 938], "arcco": [326, 940], "arccosh": [327, 941], "arcsin": [328, 942], "arcsinh": [329, 943], "arctan": [330, 944], "arctanh": [331, 945], "arg_max": [332, 339, 505, 946, 953, 1124], "arg_min": [333, 340, 506, 947, 954, 1125], "arg_sort": [334, 948], "arg_tru": [335, 949], "arg_uniqu": [336, 950], "arr": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974], "contain": [341, 362, 508, 651, 955, 975, 1127, 1234], "count_match": [342, 509, 510, 653, 654, 956, 1128, 1129, 1236, 1237], "get": [345, 473, 518, 959, 1137], "to_list": [357, 971, 1304], "backward_fil": 361, "bin": [362, 363, 364, 365, 366, 975, 976, 977, 978, 979], "decod": [363, 655, 976, 1238], "encod": [364, 656, 977, 1239], "ends_with": [365, 657, 978, 1240], "starts_with": [366, 686, 979, 1269], "bottom_k_bi": 368, "cat": [370, 371, 982, 983, 984, 985, 986], "get_categori": [370, 982], "set_ord": [371, 984], "cbrt": [372, 987], "ceil": [373, 988], "clip": [374, 991], "clip_max": [375, 992], "clip_min": [376, 993], "co": [377, 995], "cosh": [378, 996], "cot": [379, 997], "cum_count": [381, 745], "cum_max": [382, 998], "cum_min": [383, 999], "cum_prod": [384, 1000], "cum_sum": [385, 748, 1001], "cumcount": 386, "cummax": [387, 1002], "cummin": [388, 1003], "cumprod": [389, 1004], "cumsum": [390, 752, 1005], "cumulative_ev": [391, 1006], "cut": [392, 1007], "degre": 393, "deseri": [394, 840], "diff": [395, 511, 1009, 1130], "dot": [396, 1010], "drop_nan": [397, 1011], "dt": [399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067], "add_business_dai": [399, 1013], "base_utc_offset": [400, 1014], "cast_time_unit": [401, 1015], "centuri": [402, 1016], "combin": [403, 1017], "convert_time_zon": [404, 1018], "dai": [407, 408, 1021, 1022], "dst_offset": [409, 1023], "epoch": [410, 1024], "hour": [411, 412, 1025, 1026], "is_leap_year": [413, 1027], "iso_year": [414, 1028], "microsecond": [415, 416, 1032, 1033], "millennium": [417, 1034], "millisecond": [418, 419, 1035, 1036], "minut": [420, 421, 1038, 1039], "month": [422, 1040], "month_end": [423, 1041], "month_start": [424, 1042], "nanosecond": [425, 426, 1043, 1044], "offset_bi": [427, 1045], "ordinal_dai": [428, 1046], "quarter": [429, 1047], "replace_time_zon": [430, 1048], "round": [431, 632, 1049, 1210], "second": [432, 433, 1050, 1051], "strftime": [434, 1052], "timestamp": [436, 1054], "to_str": [437, 1055], "total_dai": [438, 1056], "total_hour": [439, 1057], "total_microsecond": [440, 1058], "total_millisecond": [441, 1059], "total_minut": [442, 1060], "total_nanosecond": [443, 1061], "total_second": [444, 1062], "truncat": [445, 1063], "week": [446, 1064], "weekdai": [447, 1065], "with_time_unit": [448, 1066], "year": [449, 1067], "entropi": [450, 1069], "eq": [451, 559], "eq_miss": 452, "ewm_mean": [453, 1072], "ewm_mean_bi": [454, 1073], "ewm_std": [455, 1074], "ewm_var": [456, 1075], "exclud": [457, 762], "exp": [458, 1076], "extend_const": [460, 1079], "flatten": 465, "floor": [466, 1084], "floordiv": 467, "forward_fil": 468, "from_json": 469, "gather": [470, 516, 1085, 1135], "ge": 472, "gt": 474, "hash": [475, 1089], "hist": [477, 1091], "implod": [478, 769, 1092], "inspect": [479, 859], "interpolate_bi": [481, 1095], "is_between": [482, 1096], "is_finit": [484, 1100], "is_first": [485, 1101], "is_first_distinct": [486, 1102], "is_in": [487, 1104], "is_infinit": [488, 1105], "is_last": [489, 1107], "is_last_distinct": [490, 1108], "is_nan": [491, 1109], "is_not": 492, "is_not_nan": [493, 1110], "is_not_nul": [494, 1111], "is_nul": [495, 1112], "keep_nam": 497, "kurtosi": [498, 1119], "le": 500, "eval": [513, 1132], "length": [523, 669, 1142, 1252], "set_differ": [531, 1150], "set_intersect": [532, 1151], "set_symmetric_differ": [533, 1152], "set_union": [534, 1153], "take": [541, 712, 1160, 1295], "to_arrai": [542, 1161], "log": [546, 1165], "log10": [547, 1166], "log1p": [548, 1167], "lower_bound": [549, 1168], "lt": 550, "map": [551, 576, 775, 866], "map_alia": 552, "map_batch": [553, 776, 867], "map_dict": [554, 1169], "map_el": [555, 1170], "meta": [559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 816], "has_multiple_output": 560, "is_regex_project": 561, "ne": [562, 586], "output_nam": 563, "pop": 564, "root_nam": 565, "serial": [566, 884], "tree_format": 567, "undo_alias": 568, "mod": 571, "mode": [572, 1175], "mul": 573, "name": [575, 576, 577, 578, 579, 580, 581, 582, 583, 811, 819, 1178], "keep": 575, "map_field": 577, "prefix": [578, 598], "prefix_field": 579, "suffix": [580, 709], "suffix_field": 581, "to_lowercas": [582, 699, 1282], "to_uppercas": [583, 702, 1285], "nan_max": [584, 1179], "nan_min": [585, 1180], "ne_miss": 587, "neg": 588, "not_": [589, 1182], "or_": 591, "over": 592, "pct_chang": [593, 1184], "peak_max": [594, 1185], "peak_min": [595, 1186], "pow": 597, "qcut": [600, 1188], "radian": 602, "rank": [603, 1190], "reinterpret": [605, 1192], "repeat_bi": 606, "reshap": [608, 1195], "rle": [610, 1197], "rle_id": [611, 1198], "rolling_appli": [613, 1199], "rolling_map": [614, 1200], "rolling_max": [615, 1201], "rolling_max_bi": 616, "rolling_mean": [617, 1202], "rolling_mean_bi": 618, "rolling_median": [619, 1203], "rolling_median_bi": 620, "rolling_min": [621, 1204], "rolling_min_bi": 622, "rolling_quantil": [623, 1205], "rolling_quantile_bi": 624, "rolling_skew": [625, 1206], "rolling_std": [626, 1207], "rolling_std_bi": 627, "rolling_sum": [628, 1208], "rolling_sum_bi": 629, "rolling_var": [630, 1209], "rolling_var_bi": 631, "round_sig_fig": [633, 1211], "search_sort": [635, 1214], "shrink_dtyp": [639, 1222], "shuffl": [640, 1224], "sign": [641, 1225], "sin": [642, 1226], "sinh": [643, 1227], "skew": [644, 1228], "sort_bi": 647, "sqrt": [648, 1231], "str": [650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286], "contains_ani": [652, 1235], "extract": [659, 1242], "extract_al": [660, 1243], "extract_group": [661, 1244], "find": [662, 1245], "json_decod": [664, 1247], "json_extract": [665, 1248], "json_path_match": [666, 1249], "len_byt": [667, 1250], "len_char": [668, 1251], "ljust": [670, 1253], "lstrip": [671, 1254], "n_char": [672, 1255], "pad_end": [673, 1256], "pad_start": [674, 1257], "parse_int": [675, 1258], "replace_al": [677, 1260], "replace_mani": [678, 1261], "rjust": [680, 1263], "rstrip": [681, 1264], "split": [683, 1266], "split_exact": [684, 1267], "splitn": [685, 1268], "strip": [687, 1270], "strip_char": [688, 1271], "strip_chars_end": [689, 1272], "strip_chars_start": [690, 1273], "strip_prefix": [691, 1274], "strip_suffix": [692, 1275], "strptime": [693, 1276], "to_dat": [695, 1278], "to_datetim": [696, 1279], "to_decim": [697, 1280], "to_integ": [698, 1281], "to_tim": [700, 1283], "to_titlecas": [701, 1284], "zfill": [703, 1286], "field": [704, 1287, 1288], "json_encod": [705, 1289], "rename_field": [706, 1290], "with_field": 707, "sub": 708, "tan": [714, 1297], "tanh": [715, 1298], "to_phys": [716, 1307], "top_k_bi": 718, "truediv": 719, "unique_count": [721, 1311], "upper_bound": [722, 1312], "value_count": [723, 1313], "where": 725, "xor": 726, "all_horizont": 728, "any_horizont": 730, "arang": 733, "arctan2": 734, "arctan2d": 735, "arg_sort_bi": 736, "arg_wher": 737, "business_day_count": 738, "coalesc": 739, "concat_list": 740, "concat_str": 741, "cov": 744, "cum_fold": 746, "cum_reduc": 747, "cum_sum_horizont": 749, "cumfold": 750, "cumreduc": 751, "cumsum_horizont": 753, "date_rang": [755, 756], "datetime_rang": [758, 759], "element": 761, "format": 765, "from_epoch": 766, "group": 767, "int_rang": [770, 771], "lit": 774, "nth": 786, "ones": 787, "reduc": 789, "repeat": 790, "rolling_corr": 791, "rolling_cov": 792, "sql_expr": 794, "time_rang": [801, 802], "when": 804, "zero": 805, "categori": [809, 1321], "col": 810, "express": 814, "oper": [820, 932], "conjunct": 820, "comparison": 820, "window": 824, "convers": 825, "parallel": 825, "random": 825, "python": 826, "refer": 826, "input": 827, "output": 827, "avro": 827, "clipboard": 827, "databas": 827, "delta": 827, "lake": 827, "excel": 827, "od": 827, "feather": 827, "ipc": 827, "iceberg": 827, "json": 827, "parquet": 827, "pyarrow": 827, "dataset": 827, "cach": 831, "collect": 835, "collect_async": 836, "explain": 844, "fetch": 846, "profil": [876, 1334], "show_graph": 888, "with_context": 904, "lazygroupbi": [907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "read": 928, "write": 928, "logic": 928, "plan": 928, "metadata": 930, "plugin": 931, "selector": 932, "import": 932, "set": [932, 1216], "is_loc": 983, "to_loc": 985, "uses_lexical_ord": 986, "chunk_length": 989, "get_chunk": 1087, "has_valid": 1088, "inner_dtyp": 1093, "is_boolean": 1097, "is_float": 1103, "is_integ": 1106, "is_numer": 1113, "is_sort": 1114, "is_tempor": 1115, "is_utf8": 1117, "new_from_index": 1181, "scatter": 1213, "series_equ": 1215, "set_at_idx": 1217, "to_fram": 1301, "view": 1315, "zip_with": 1316, "interfac": 1333, "method": 1333, "assert": 1334, "strategi": 1334, "helper": 1334}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.group_by_dynamic": [[193, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.mean": [[219, "polars-dataframe-mean"]], "polars.DataFrame.filter": [[182, "polars-dataframe-filter"]], "polars.DataFrame.extend": [[179, "polars-dataframe-extend"]], "polars.DataFrame.min_horizontal": [[225, "polars-dataframe-min-horizontal"]], "polars.DataFrame.groupby_dynamic": [[196, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.map_rows": [[216, "polars-dataframe-map-rows"]], "polars.DataFrame.groupby": [[195, "polars-dataframe-groupby"]], "polars.DataFrame.get_column": [[188, "polars-dataframe-get-column"]], "polars.DataFrame.insert_at_idx": [[202, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.frame_equal": [[186, "polars-dataframe-frame-equal"]], "polars.DataFrame.insert_column": [[203, "polars-dataframe-insert-column"]], "polars.DataFrame.is_duplicated": [[205, "polars-dataframe-is-duplicated"]], "polars.DataFrame.fill_null": [[181, "polars-dataframe-fill-null"]], "polars.DataFrame.glimpse": [[191, "polars-dataframe-glimpse"]], "polars.DataFrame.melt": [[222, "polars-dataframe-melt"]], "polars.DataFrame.iter_columns": [[209, "polars-dataframe-iter-columns"]], "polars.DataFrame.interpolate": [[204, "polars-dataframe-interpolate"]], "polars.DataFrame.join": [[212, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[213, "polars-dataframe-join-asof"]], "polars.DataFrame.get_columns": [[190, "polars-dataframe-get-columns"]], "polars.DataFrame.hash_rows": [[198, "polars-dataframe-hash-rows"]], "polars.DataFrame.iter_slices": [[211, "polars-dataframe-iter-slices"]], "polars.DataFrame.max_horizontal": [[218, "polars-dataframe-max-horizontal"]], "polars.DataFrame.group_by_rolling": [[194, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.n_unique": [[227, "polars-dataframe-n-unique"]], "polars.DataFrame.is_unique": [[207, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_rows": [[210, "polars-dataframe-iter-rows"]], "polars.DataFrame.find_idx_by_name": [[183, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.describe": [[171, "polars-dataframe-describe"]], "polars.DataFrame.lazy": [[214, "polars-dataframe-lazy"]], "polars.DataFrame.fold": [[185, "polars-dataframe-fold"]], "polars.DataFrame.estimated_size": [[177, "polars-dataframe-estimated-size"]], "polars.DataFrame.head": [[199, "polars-dataframe-head"]], "polars.DataFrame.min": [[224, "polars-dataframe-min"]], "polars.DataFrame.flags": [[184, "polars-dataframe-flags"]], "polars.DataFrame.get_column_index": [[189, "polars-dataframe-get-column-index"]], "polars.DataFrame.median": [[221, "polars-dataframe-median"]], "polars.DataFrame.max": [[217, "polars-dataframe-max"]], "polars.DataFrame.fill_nan": [[180, "polars-dataframe-fill-nan"]], "polars.DataFrame.gather_every": [[187, "polars-dataframe-gather-every"]], "polars.DataFrame.explode": [[178, "polars-dataframe-explode"]], "polars.DataFrame.drop_nulls": [[174, "polars-dataframe-drop-nulls"]], "polars.DataFrame.group_by": [[192, "polars-dataframe-group-by"]], "polars.DataFrame.drop_in_place": [[173, "polars-dataframe-drop-in-place"]], "polars.DataFrame.equals": [[176, "polars-dataframe-equals"]], "polars.DataFrame.hstack": [[201, "polars-dataframe-hstack"]], "polars.DataFrame.dtypes": [[175, "polars-dataframe-dtypes"]], "polars.DataFrame.n_chunks": [[226, "polars-dataframe-n-chunks"]], "polars.DataFrame.drop": [[172, "polars-dataframe-drop"]], "polars.DataFrame.groupby_rolling": [[197, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.merge_sorted": [[223, "polars-dataframe-merge-sorted"]], "polars.DataFrame.height": [[200, "polars-dataframe-height"]], "polars.DataFrame.mean_horizontal": [[220, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.is_empty": [[206, "polars-dataframe-is-empty"]], "polars.DataFrame.item": [[208, "polars-dataframe-item"]], "polars.DataFrame.limit": [[215, "polars-dataframe-limit"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_verbose": [[30, "polars-config-set-verbose"]], "polars.LazyFrame.sink_ndjson": [[45, "polars-lazyframe-sink-ndjson"]], "polars.SQLContext.unregister": [[52, "polars-sqlcontext-unregister"]], "polars.DataFrame.write_clipboard": [[33, "polars-dataframe-write-clipboard"]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.DataFrame.write_parquet": [[42, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.SQLContext.register_many": [[50, "polars-sqlcontext-register-many"]], "polars.Config.set_fmt_table_cell_list_len": [[14, "polars-config-set-fmt-table-cell-list-len"]], "polars.LazyFrame.sink_csv": [[43, "polars-lazyframe-sink-csv"]], "polars.Config.activate_decimals": [[2, "polars-config-activate-decimals"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.Config.set_fmt_str_lengths": [[13, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [932, "examples"], [1329, "examples"], [1334, "examples"], [312, "examples"]], "polars.Config.set_decimal_separator": [[10, "polars-config-set-decimal-separator"]], "polars.Config.load": [[3, "polars-config-load"]], "polars.SQLContext.register": [[48, "polars-sqlcontext-register"]], "polars.Config.state": [[31, "polars-config-state"]], "polars.DataFrame.write_database": [[35, "polars-dataframe-write-database"]], "polars.SQLContext.register_globals": [[49, "polars-sqlcontext-register-globals"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_ipc": [[38, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[40, "polars-dataframe-write-json"]], "polars.LazyFrame.sink_ipc": [[44, "polars-lazyframe-sink-ipc"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.SQLContext.tables": [[51, "polars-sqlcontext-tables"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.StringCache": [[53, "polars-stringcache"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.SQLContext.execute": [[47, "polars-sqlcontext-execute"]], "polars.DataFrame.write_excel": [[37, "polars-dataframe-write-excel"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "Index": [[0, "index"]], "polars.Config.load_from_file": [[4, "polars-config-load-from-file"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_csv": [[34, "polars-dataframe-write-csv"]], "polars.DataFrame.write_delta": [[36, "polars-dataframe-write-delta"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_ndjson": [[41, "polars-dataframe-write-ndjson"]], "polars.Config.save_to_file": [[7, "polars-config-save-to-file"]], "polars.Config.set_float_precision": [[11, "polars-config-set-float-precision"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_auto_structify": [[9, "polars-config-set-auto-structify"]], "polars.Config.set_fmt_float": [[12, "polars-config-set-fmt-float"]], "polars.Config.set_trim_decimal_zeros": [[29, "polars-config-set-trim-decimal-zeros"]], "polars.DataFrame.write_avro": [[32, "polars-dataframe-write-avro"]], "polars.Config.set_thousands_separator": [[28, "polars-config-set-thousands-separator"]], "polars.LazyFrame.sink_parquet": [[46, "polars-lazyframe-sink-parquet"]], "polars.DataFrame.write_ipc_stream": [[39, "polars-dataframe-write-ipc-stream"]], "polars.from_repr": [[115, "polars-from-repr"]], "polars.scan_parquet": [[139, "polars-scan-parquet"]], "polars.scan_delta": [[135, "polars-scan-delta"]], "polars.show_versions": [[142, "polars-show-versions"]], "polars.testing.assert_frame_equal": [[143, "polars-testing-assert-frame-equal"]], "polars.read_csv_batched": [[121, "polars-read-csv-batched"]], "polars.read_ndjson": [[130, "polars-read-ndjson"]], "polars.DataFrame.cast": [[165, "polars-dataframe-cast"]], "polars.testing.assert_series_not_equal": [[146, "polars-testing-assert-series-not-equal"]], "polars.DataFrame.count": [[170, "polars-dataframe-count"]], "polars.scan_ipc": [[137, "polars-scan-ipc"]], "polars.testing.assert_series_equal": [[145, "polars-testing-assert-series-equal"]], "polars.read_ods": [[131, "polars-read-ods"]], "polars.scan_csv": [[134, "polars-scan-csv"]], "polars.read_delta": [[124, "polars-read-delta"]], "polars.DataFrame.clone": [[167, "polars-dataframe-clone"]], "polars.using_string_cache": [[158, "polars-using-string-cache"]], "polars.scan_pyarrow_dataset": [[140, "polars-scan-pyarrow-dataset"]], "Config": [[159, "config"]], "Config options": [[159, "config-options"]], "Config load, save, state": [[159, "config-load-save-state"]], "Use as a context manager": [[159, "use-as-a-context-manager"]], "Use as a decorator": [[159, "use-as-a-decorator"]], "polars.read_database_uri": [[123, "polars-read-database-uri"]], "polars.read_json": [[129, "polars-read-json"]], "polars.testing.parametric.dataframes": [[150, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.lists": [[152, "polars-testing-parametric-lists"]], "polars.from_records": [[114, "polars-from-records"]], "polars.set_random_seed": [[141, "polars-set-random-seed"]], "polars.read_ipc": [[126, "polars-read-ipc"]], "Aggregation": [[160, "aggregation"], [933, "aggregation"], [828, "aggregation"], [315, "aggregation"]], "polars.DataFrame.columns": [[168, "polars-dataframe-columns"]], "polars.DataFrame.apply": [[162, "polars-dataframe-apply"]], "polars.get_index_type": [[116, "polars-get-index-type"]], "polars.read_parquet": [[132, "polars-read-parquet"]], "polars.DataFrame.clear": [[166, "polars-dataframe-clear"]], "polars.DataFrame.bottom_k": [[164, "polars-dataframe-bottom-k"]], "polars.read_ipc_schema": [[127, "polars-read-ipc-schema"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[117, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_database": [[122, "polars-read-database"]], "polars.scan_ndjson": [[138, "polars-scan-ndjson"]], "polars.DataFrame.approx_n_unique": [[163, "polars-dataframe-approx-n-unique"]], "polars.read_clipboard": [[119, "polars-read-clipboard"]], "polars.read_avro": [[118, "polars-read-avro"]], "polars.testing.parametric.column": [[147, "polars-testing-parametric-column"]], "polars.read_parquet_schema": [[133, "polars-read-parquet-schema"]], "polars.DataFrame.corr": [[169, "polars-dataframe-corr"]], "polars.scan_iceberg": [[136, "polars-scan-iceberg"]], "polars.read_excel": [[125, "polars-read-excel"]], "polars.testing.parametric.columns": [[148, "polars-testing-parametric-columns"]], "polars.DataFrame.__dataframe__": [[161, "polars-dataframe-dataframe"]], "polars.testing.parametric.create_list_strategy": [[149, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.load_profile": [[153, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[154, "polars-testing-parametric-series"]], "polars.read_ipc_stream": [[128, "polars-read-ipc-stream"]], "polars.thread_pool_size": [[156, "polars-thread-pool-size"]], "polars.read_csv": [[120, "polars-read-csv"]], "polars.testing.parametric.set_profile": [[155, "polars-testing-parametric-set-profile"]], "polars.testing.parametric.dtypes": [[151, "polars-testing-parametric-dtypes"]], "polars.testing.assert_frame_not_equal": [[144, "polars-testing-assert-frame-not-equal"]], "polars.threadpool_size": [[157, "polars-threadpool-size"]], "polars.Series.str.starts_with": [[1269, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars_end": [[1272, "polars-series-str-strip-chars-end"]], "polars.Series.to_init_repr": [[1302, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1303, "polars-series-to-jax"]], "polars.Series.str.to_titlecase": [[1284, "polars-series-str-to-titlecase"]], "polars.Series.str.strip_prefix": [[1274, "polars-series-str-strip-prefix"]], "polars.Series.to_list": [[1304, "polars-series-to-list"]], "polars.Series.take_every": [[1296, "polars-series-take-every"]], "polars.Series.str.to_uppercase": [[1285, "polars-series-str-to-uppercase"]], "polars.Series.struct.json_encode": [[1289, "polars-series-struct-json-encode"]], "polars.Series.str.replace_many": [[1261, "polars-series-str-replace-many"]], "polars.Series.to_numpy": [[1305, "polars-series-to-numpy"]], "polars.Series.str.to_date": [[1278, "polars-series-str-to-date"]], "polars.Series.str.to_time": [[1283, "polars-series-str-to-time"]], "polars.Series.str.split": [[1266, "polars-series-str-split"]], "polars.Series.str.to_integer": [[1281, "polars-series-str-to-integer"]], "polars.Series.str.split_exact": [[1267, "polars-series-str-split-exact"]], "polars.Series.str.strptime": [[1276, "polars-series-str-strptime"]], "polars.Series.str.strip_chars_start": [[1273, "polars-series-str-strip-chars-start"]], "polars.Series.str.n_chars": [[1255, "polars-series-str-n-chars"]], "polars.Series.str.replace_all": [[1260, "polars-series-str-replace-all"]], "polars.Series.str.tail": [[1277, "polars-series-str-tail"]], "polars.Series.top_k": [[1309, "polars-series-top-k"]], "polars.Series.tanh": [[1298, "polars-series-tanh"]], "polars.Series.str.strip_suffix": [[1275, "polars-series-str-strip-suffix"]], "polars.Series.tan": [[1297, "polars-series-tan"]], "polars.Series.str.slice": [[1265, "polars-series-str-slice"]], "polars.Series.str.to_lowercase": [[1282, "polars-series-str-to-lowercase"]], "polars.Series.str.pad_start": [[1257, "polars-series-str-pad-start"]], "polars.Series.str.zfill": [[1286, "polars-series-str-zfill"]], "polars.Series.str.splitn": [[1268, "polars-series-str-splitn"]], "polars.Series.to_torch": [[1308, "polars-series-to-torch"]], "polars.Series.struct.field": [[1287, "polars-series-struct-field"]], "polars.Series.to_dummies": [[1300, "polars-series-to-dummies"]], "polars.Series.sum": [[1293, "polars-series-sum"]], "polars.Series.str.strip": [[1270, "polars-series-str-strip"]], "polars.Series.str.rstrip": [[1264, "polars-series-str-rstrip"]], "polars.Series.str.to_decimal": [[1280, "polars-series-str-to-decimal"]], "polars.Series.str.strip_chars": [[1271, "polars-series-str-strip-chars"]], "polars.Series.take": [[1295, "polars-series-take"]], "polars.Series.str.to_datetime": [[1279, "polars-series-str-to-datetime"]], "polars.Series.struct.fields": [[1288, "polars-series-struct-fields"]], "polars.Series.tail": [[1294, "polars-series-tail"]], "polars.Series.to_frame": [[1301, "polars-series-to-frame"]], "polars.Series.to_pandas": [[1306, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1307, "polars-series-to-physical"]], "polars.Series.struct.unnest": [[1292, "polars-series-struct-unnest"]], "polars.Series.str.replace": [[1259, "polars-series-str-replace"]], "polars.Series.str.pad_end": [[1256, "polars-series-str-pad-end"]], "polars.Series.str.rjust": [[1263, "polars-series-str-rjust"]], "polars.Series.str.reverse": [[1262, "polars-series-str-reverse"]], "polars.Series.struct.rename_fields": [[1290, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1291, "polars-series-struct-schema"]], "polars.Series.str.lstrip": [[1254, "polars-series-str-lstrip"]], "polars.Series.str.parse_int": [[1258, "polars-series-str-parse-int"]], "polars.Series.unique": [[1310, "polars-series-unique"]], "polars.Series.to_arrow": [[1299, "polars-series-to-arrow"]], "polars.Series.slice": [[1229, "polars-series-slice"]], "polars.Series.rle": [[1197, "polars-series-rle"]], "polars.Series.sort": [[1230, "polars-series-sort"]], "polars.Series.str.json_decode": [[1247, "polars-series-str-json-decode"]], "polars.Series.str.encode": [[1239, "polars-series-str-encode"]], "polars.Series.str.extract_all": [[1243, "polars-series-str-extract-all"]], "polars.Series.rolling_min": [[1204, "polars-series-rolling-min"]], "polars.Series.rolling_median": [[1203, "polars-series-rolling-median"]], "polars.Series.search_sorted": [[1214, "polars-series-search-sorted"]], "polars.Series.scatter": [[1213, "polars-series-scatter"]], "polars.Series.shuffle": [[1224, "polars-series-shuffle"]], "polars.Series.str.count_match": [[1236, "polars-series-str-count-match"]], "polars.Series.str.head": [[1246, "polars-series-str-head"]], "polars.Series.rolling_map": [[1200, "polars-series-rolling-map"]], "polars.Series.sqrt": [[1231, "polars-series-sqrt"]], "polars.Series.str.ends_with": [[1240, "polars-series-str-ends-with"]], "polars.Series.str.lengths": [[1252, "polars-series-str-lengths"]], "polars.Series.str.json_extract": [[1248, "polars-series-str-json-extract"]], "polars.Series.sample": [[1212, "polars-series-sample"]], "polars.Series.shift": [[1220, "polars-series-shift"]], "polars.Series.str.len_chars": [[1251, "polars-series-str-len-chars"]], "polars.Series.str.ljust": [[1253, "polars-series-str-ljust"]], "polars.Series.rolling_sum": [[1208, "polars-series-rolling-sum"]], "polars.Series.str.concat": [[1233, "polars-series-str-concat"]], "polars.Series.rolling_quantile": [[1205, "polars-series-rolling-quantile"]], "polars.Series.rolling_max": [[1201, "polars-series-rolling-max"]], "polars.Series.sign": [[1225, "polars-series-sign"]], "polars.Series.series_equal": [[1215, "polars-series-series-equal"]], "polars.Series.str.extract_groups": [[1244, "polars-series-str-extract-groups"]], "polars.Series.rolling_var": [[1209, "polars-series-rolling-var"]], "polars.Series.str.find": [[1245, "polars-series-str-find"]], "polars.Series.rle_id": [[1198, "polars-series-rle-id"]], "polars.Series.std": [[1232, "polars-series-std"]], "polars.Series.str.contains_any": [[1235, "polars-series-str-contains-any"]], "polars.Series.str.extract": [[1242, "polars-series-str-extract"]], "polars.Series.shift_and_fill": [[1221, "polars-series-shift-and-fill"]], "polars.Series.rolling_mean": [[1202, "polars-series-rolling-mean"]], "polars.Series.str.explode": [[1241, "polars-series-str-explode"]], "polars.Series.str.len_bytes": [[1250, "polars-series-str-len-bytes"]], "polars.Series.skew": [[1228, "polars-series-skew"]], "polars.Series.shape": [[1219, "polars-series-shape"]], "polars.Series.rolling_std": [[1207, "polars-series-rolling-std"]], "polars.Series.rolling_apply": [[1199, "polars-series-rolling-apply"]], "polars.Series.sinh": [[1227, "polars-series-sinh"]], "polars.Series.round": [[1210, "polars-series-round"]], "polars.Series.set_sorted": [[1218, "polars-series-set-sorted"]], "polars.Series.sin": [[1226, "polars-series-sin"]], "polars.Series.str.decode": [[1238, "polars-series-str-decode"]], "polars.Series.shrink_to_fit": [[1223, "polars-series-shrink-to-fit"]], "polars.Series.str.count_matches": [[1237, "polars-series-str-count-matches"]], "polars.Series.set": [[1216, "polars-series-set"]], "polars.Series.round_sig_figs": [[1211, "polars-series-round-sig-figs"]], "polars.Series.shrink_dtype": [[1222, "polars-series-shrink-dtype"]], "polars.Series.str.contains": [[1234, "polars-series-str-contains"]], "polars.Series.str.json_path_match": [[1249, "polars-series-str-json-path-match"]], "polars.Series.rolling_skew": [[1206, "polars-series-rolling-skew"]], "polars.Series.set_at_idx": [[1217, "polars-series-set-at-idx"]], "polars.Series.list.max": [[1143, "polars-series-list-max"]], "polars.Series.list.std": [[1157, "polars-series-list-std"]], "polars.Series.median": [[1173, "polars-series-median"]], "polars.Series.map_dict": [[1169, "polars-series-map-dict"]], "polars.Series.map_elements": [[1170, "polars-series-map-elements"]], "polars.Series.peak_min": [[1186, "polars-series-peak-min"]], "polars.Series.list.sum": [[1158, "polars-series-list-sum"]], "polars.Series.reshape": [[1195, "polars-series-reshape"]], "polars.Series.nan_min": [[1180, "polars-series-nan-min"]], "polars.Series.log": [[1165, "polars-series-log"]], "polars.Series.log10": [[1166, "polars-series-log10"]], "polars.Series.list.last": [[1140, "polars-series-list-last"]], "polars.Series.list.to_struct": [[1162, "polars-series-list-to-struct"]], "polars.Series.list.median": [[1145, "polars-series-list-median"]], "polars.Series.lower_bound": [[1168, "polars-series-lower-bound"]], "polars.Series.nan_max": [[1179, "polars-series-nan-max"]], "polars.Series.reinterpret": [[1192, "polars-series-reinterpret"]], "polars.Series.replace": [[1194, "polars-series-replace"]], "polars.Series.quantile": [[1189, "polars-series-quantile"]], "polars.Series.reverse": [[1196, "polars-series-reverse"]], "polars.Series.list.shift": [[1154, "polars-series-list-shift"]], "polars.Series.rechunk": [[1191, "polars-series-rechunk"]], "polars.Series.list.set_difference": [[1150, "polars-series-list-set-difference"]], "polars.Series.list.to_array": [[1161, "polars-series-list-to-array"]], "polars.Series.list.slice": [[1155, "polars-series-list-slice"]], "polars.Series.qcut": [[1188, "polars-series-qcut"]], "polars.Series.product": [[1187, "polars-series-product"]], "polars.Series.peak_max": [[1185, "polars-series-peak-max"]], "polars.Series.rank": [[1190, "polars-series-rank"]], "polars.Series.list.len": [[1141, "polars-series-list-len"]], "polars.Series.list.set_symmetric_difference": [[1152, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.unique": [[1163, "polars-series-list-unique"]], "polars.Series.list.mean": [[1144, "polars-series-list-mean"]], "polars.Series.rename": [[1193, "polars-series-rename"]], "polars.Series.list.var": [[1164, "polars-series-list-var"]], "polars.Series.list.set_intersection": [[1151, "polars-series-list-set-intersection"]], "polars.Series.list.reverse": [[1148, "polars-series-list-reverse"]], "polars.Series.n_chunks": [[1176, "polars-series-n-chunks"]], "polars.Series.min": [[1174, "polars-series-min"]], "polars.Series.log1p": [[1167, "polars-series-log1p"]], "polars.Series.new_from_index": [[1181, "polars-series-new-from-index"]], "polars.Series.mean": [[1172, "polars-series-mean"]], "polars.Series.list.n_unique": [[1147, "polars-series-list-n-unique"]], "polars.Series.n_unique": [[1177, "polars-series-n-unique"]], "polars.Series.list.min": [[1146, "polars-series-list-min"]], "polars.Series.list.set_union": [[1153, "polars-series-list-set-union"]], "polars.Series.list.sort": [[1156, "polars-series-list-sort"]], "polars.Series.list.tail": [[1159, "polars-series-list-tail"]], "polars.Series.max": [[1171, "polars-series-max"]], "polars.Series.not_": [[1182, "polars-series-not"]], "polars.Series.list.lengths": [[1142, "polars-series-list-lengths"]], "polars.Series.mode": [[1175, "polars-series-mode"]], "polars.Series.pct_change": [[1184, "polars-series-pct-change"]], "polars.Series.list.sample": [[1149, "polars-series-list-sample"]], "polars.Series.name": [[1178, "polars-series-name"]], "polars.Series.list.take": [[1160, "polars-series-list-take"]], "polars.Series.null_count": [[1183, "polars-series-null-count"]], "polars.Series.kurtosis": [[1119, "polars-series-kurtosis"]], "polars.Series.floor": [[1084, "polars-series-floor"]], "polars.Series.is_integer": [[1106, "polars-series-is-integer"]], "polars.Series.is_temporal": [[1115, "polars-series-is-temporal"]], "polars.Series.len": [[1120, "polars-series-len"]], "polars.Series.list.arg_max": [[1124, "polars-series-list-arg-max"]], "polars.Series.list.eval": [[1132, "polars-series-list-eval"]], "polars.Series.inner_dtype": [[1093, "polars-series-inner-dtype"]], "polars.Series.is_numeric": [[1113, "polars-series-is-numeric"]], "polars.Series.gather_every": [[1086, "polars-series-gather-every"]], "polars.Series.list.concat": [[1126, "polars-series-list-concat"]], "polars.Series.is_first_distinct": [[1102, "polars-series-is-first-distinct"]], "polars.Series.implode": [[1092, "polars-series-implode"]], "polars.Series.is_unique": [[1116, "polars-series-is-unique"]], "polars.Series.is_last": [[1107, "polars-series-is-last"]], "polars.Series.list.first": [[1134, "polars-series-list-first"]], "polars.Series.hash": [[1089, "polars-series-hash"]], "polars.Series.is_last_distinct": [[1108, "polars-series-is-last-distinct"]], "polars.Series.list.count_matches": [[1129, "polars-series-list-count-matches"]], "polars.Series.is_infinite": [[1105, "polars-series-is-infinite"]], "polars.Series.is_empty": [[1099, "polars-series-is-empty"]], "polars.Series.flags": [[1083, "polars-series-flags"]], "polars.Series.is_sorted": [[1114, "polars-series-is-sorted"]], "polars.Series.is_finite": [[1100, "polars-series-is-finite"]], "polars.Series.list.contains": [[1127, "polars-series-list-contains"]], "polars.Series.list.arg_min": [[1125, "polars-series-list-arg-min"]], "polars.Series.item": [[1118, "polars-series-item"]], "polars.Series.is_duplicated": [[1098, "polars-series-is-duplicated"]], "polars.Series.is_between": [[1096, "polars-series-is-between"]], "polars.Series.interpolate_by": [[1095, "polars-series-interpolate-by"]], "polars.Series.is_not_null": [[1111, "polars-series-is-not-null"]], "polars.Series.limit": [[1121, "polars-series-limit"]], "polars.Series.list.any": [[1123, "polars-series-list-any"]], "polars.Series.gather": [[1085, "polars-series-gather"]], "polars.Series.list.gather_every": [[1136, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1137, "polars-series-list-get"]], "polars.Series.is_first": [[1101, "polars-series-is-first"]], "polars.Series.head": [[1090, "polars-series-head"]], "polars.Series.is_null": [[1112, "polars-series-is-null"]], "polars.Series.is_utf8": [[1117, "polars-series-is-utf8"]], "polars.Series.list.count_match": [[1128, "polars-series-list-count-match"]], "polars.Series.list.diff": [[1130, "polars-series-list-diff"]], "polars.Series.list.gather": [[1135, "polars-series-list-gather"]], "polars.Series.list.explode": [[1133, "polars-series-list-explode"]], "polars.Series.is_float": [[1103, "polars-series-is-float"]], "polars.Series.list.head": [[1138, "polars-series-list-head"]], "polars.Series.interpolate": [[1094, "polars-series-interpolate"]], "polars.Series.is_not_nan": [[1110, "polars-series-is-not-nan"]], "polars.Series.has_validity": [[1088, "polars-series-has-validity"]], "polars.Series.is_boolean": [[1097, "polars-series-is-boolean"]], "polars.Series.is_in": [[1104, "polars-series-is-in"]], "polars.Series.get_chunks": [[1087, "polars-series-get-chunks"]], "polars.Series.list.all": [[1122, "polars-series-list-all"]], "polars.Series.list.drop_nulls": [[1131, "polars-series-list-drop-nulls"]], "polars.Series.hist": [[1091, "polars-series-hist"]], "polars.Series.is_nan": [[1109, "polars-series-is-nan"]], "polars.Series.list.join": [[1139, "polars-series-list-join"]], "polars.collect_all": [[60, "polars-collect-all"]], "polars.datatypes.UInt16": [[85, "polars-datatypes-uint16"]], "polars.exceptions.ComputeError": [[95, "polars-exceptions-computeerror"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.datatypes.Int64": [[77, "polars-datatypes-int64"]], "polars.datatypes.Float32": [[73, "polars-datatypes-float32"]], "polars.exceptions.SchemaFieldNotFoundError": [[104, "polars-exceptions-schemafieldnotfounderror"]], "polars.datatypes.Date": [[68, "polars-datatypes-date"]], "polars.datatypes.Decimal": [[70, "polars-datatypes-decimal"]], "polars.datatypes.Unknown": [[89, "polars-datatypes-unknown"]], "polars.exceptions.ArrowError": [[93, "polars-exceptions-arrowerror"]], "polars.from_numpy": [[112, "polars-from-numpy"]], "polars.datatypes.UInt8": [[88, "polars-datatypes-uint8"]], "polars.from_dict": [[110, "polars-from-dict"]], "polars.from_pandas": [[113, "polars-from-pandas"]], "polars.exceptions.NoDataError": [[98, "polars-exceptions-nodataerror"]], "polars.exceptions.SchemaError": [[103, "polars-exceptions-schemaerror"]], "polars.datatypes.Array": [[63, "polars-datatypes-array"]], "polars.exceptions.DuplicateError": [[96, "polars-exceptions-duplicateerror"]], "polars.datatypes.Float64": [[74, "polars-datatypes-float64"]], "polars.datatypes.Duration": [[71, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[72, "polars-datatypes-enum"]], "polars.datatypes.Null": [[80, "polars-datatypes-null"]], "polars.datatypes.Categorical": [[66, "polars-datatypes-categorical"]], "polars.exceptions.InvalidOperationError": [[97, "polars-exceptions-invalidoperationerror"]], "polars.concat": [[62, "polars-concat"]], "polars.datatypes.UInt32": [[86, "polars-datatypes-uint32"]], "polars.datatypes.Int8": [[78, "polars-datatypes-int8"]], "polars.from_dicts": [[111, "polars-from-dicts"]], "polars.exceptions.StructFieldNotFoundError": [[106, "polars-exceptions-structfieldnotfounderror"]], "polars.from_arrow": [[108, "polars-from-arrow"]], "polars.datatypes.Binary": [[64, "polars-datatypes-binary"]], "polars.datatypes.UInt64": [[87, "polars-datatypes-uint64"]], "polars.from_dataframe": [[109, "polars-from-dataframe"]], "polars.datatypes.Boolean": [[65, "polars-datatypes-boolean"]], "polars.exceptions.ShapeError": [[105, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturnedError": [[107, "polars-exceptions-toomanyrowsreturnederror"]], "polars.datatypes.Int32": [[76, "polars-datatypes-int32"]], "polars.datatypes.Struct": [[83, "polars-datatypes-struct"]], "polars.exceptions.PolarsPanicError": [[101, "polars-exceptions-polarspanicerror"]], "polars.datatypes.Datetime": [[69, "polars-datatypes-datetime"]], "polars.build_info": [[59, "polars-build-info"]], "polars.datatypes.Utf8": [[90, "polars-datatypes-utf8"]], "polars.exceptions.RowsError": [[102, "polars-exceptions-rowserror"]], "polars.datatypes.Time": [[84, "polars-datatypes-time"]], "polars.datatypes.DataType": [[67, "polars-datatypes-datatype"]], "polars.disable_string_cache": [[91, "polars-disable-string-cache"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.datatypes.List": [[79, "polars-datatypes-list"]], "polars.datatypes.Int16": [[75, "polars-datatypes-int16"]], "polars.exceptions.NoRowsReturnedError": [[99, "polars-exceptions-norowsreturnederror"]], "polars.collect_all_async": [[61, "polars-collect-all-async"]], "polars.exceptions.PolarsError": [[100, "polars-exceptions-polarserror"]], "polars.enable_string_cache": [[92, "polars-enable-string-cache"]], "polars.datatypes.Object": [[81, "polars-datatypes-object"]], "polars.datatypes.String": [[82, "polars-datatypes-string"]], "polars.exceptions.ColumnNotFoundError": [[94, "polars-exceptions-columnnotfounderror"]], "polars.Series.dt.month": [[1040, "polars-series-dt-month"]], "polars.Series.explode": [[1077, "polars-series-explode"]], "polars.Series.dt.nanoseconds": [[1044, "polars-series-dt-nanoseconds"]], "polars.Series.dt.time": [[1053, "polars-series-dt-time"]], "polars.Series.dt.minute": [[1038, "polars-series-dt-minute"]], "polars.Series.dt.total_days": [[1056, "polars-series-dt-total-days"]], "polars.Series.dt.seconds": [[1051, "polars-series-dt-seconds"]], "polars.Series.dtype": [[1068, "polars-series-dtype"]], "polars.Series.dt.microsecond": [[1032, "polars-series-dt-microsecond"]], "polars.Series.dt.iso_year": [[1028, "polars-series-dt-iso-year"]], "polars.Series.dt.quarter": [[1047, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[1048, "polars-series-dt-replace-time-zone"]], "polars.Series.entropy": [[1069, "polars-series-entropy"]], "polars.Series.dt.year": [[1067, "polars-series-dt-year"]], "polars.Series.dt.strftime": [[1052, "polars-series-dt-strftime"]], "polars.Series.dt.hours": [[1026, "polars-series-dt-hours"]], "polars.Series.dt.total_microseconds": [[1058, "polars-series-dt-total-microseconds"]], "polars.Series.dt.ordinal_day": [[1046, "polars-series-dt-ordinal-day"]], "polars.Series.fill_null": [[1081, "polars-series-fill-null"]], "polars.Series.dt.millisecond": [[1035, "polars-series-dt-millisecond"]], "polars.Series.dt.to_string": [[1055, "polars-series-dt-to-string"]], "polars.Series.ewm_std": [[1074, "polars-series-ewm-std"]], "polars.Series.dt.max": [[1029, "polars-series-dt-max"]], "polars.Series.extend": [[1078, "polars-series-extend"]], "polars.Series.dt.offset_by": [[1045, "polars-series-dt-offset-by"]], "polars.Series.dt.total_nanoseconds": [[1061, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.with_time_unit": [[1066, "polars-series-dt-with-time-unit"]], "polars.Series.fill_nan": [[1080, "polars-series-fill-nan"]], "polars.Series.dt.total_milliseconds": [[1059, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.timestamp": [[1054, "polars-series-dt-timestamp"]], "polars.Series.ewm_mean_by": [[1073, "polars-series-ewm-mean-by"]], "polars.Series.dt.median": [[1031, "polars-series-dt-median"]], "polars.Series.dt.total_seconds": [[1062, "polars-series-dt-total-seconds"]], "polars.Series.estimated_size": [[1071, "polars-series-estimated-size"]], "polars.Series.dt.microseconds": [[1033, "polars-series-dt-microseconds"]], "polars.Series.equals": [[1070, "polars-series-equals"]], "polars.Series.dt.is_leap_year": [[1027, "polars-series-dt-is-leap-year"]], "polars.Series.dt.round": [[1049, "polars-series-dt-round"]], "polars.Series.dt.month_start": [[1042, "polars-series-dt-month-start"]], "polars.Series.dt.min": [[1037, "polars-series-dt-min"]], "polars.Series.ewm_var": [[1075, "polars-series-ewm-var"]], "polars.Series.ewm_mean": [[1072, "polars-series-ewm-mean"]], "polars.Series.dt.millennium": [[1034, "polars-series-dt-millennium"]], "polars.Series.dt.minutes": [[1039, "polars-series-dt-minutes"]], "polars.Series.exp": [[1076, "polars-series-exp"]], "polars.Series.dt.truncate": [[1063, "polars-series-dt-truncate"]], "polars.Series.dt.mean": [[1030, "polars-series-dt-mean"]], "polars.Series.dt.milliseconds": [[1036, "polars-series-dt-milliseconds"]], "polars.Series.dt.total_hours": [[1057, "polars-series-dt-total-hours"]], "polars.Series.dt.total_minutes": [[1060, "polars-series-dt-total-minutes"]], "polars.Series.dt.weekday": [[1065, "polars-series-dt-weekday"]], "polars.Series.filter": [[1082, "polars-series-filter"]], "polars.Series.extend_constant": [[1079, "polars-series-extend-constant"]], "polars.Series.dt.second": [[1050, "polars-series-dt-second"]], "polars.Series.dt.week": [[1064, "polars-series-dt-week"]], "polars.Series.dt.month_end": [[1041, "polars-series-dt-month-end"]], "polars.Series.dt.nanosecond": [[1043, "polars-series-dt-nanosecond"]], "polars.Series.dt.day": [[1021, "polars-series-dt-day"]], "polars.Series.bin.decode": [[976, "polars-series-bin-decode"]], "polars.Series.cat.set_ordering": [[984, "polars-series-cat-set-ordering"]], "polars.Series.bin.contains": [[975, "polars-series-bin-contains"]], "polars.Series.clip_min": [[993, "polars-series-clip-min"]], "polars.Series.dt.combine": [[1017, "polars-series-dt-combine"]], "polars.Series.cast": [[981, "polars-series-cast"]], "polars.Series.cos": [[995, "polars-series-cos"]], "polars.Series.dt.date": [[1019, "polars-series-dt-date"]], "polars.Series.bin.starts_with": [[979, "polars-series-bin-starts-with"]], "polars.Series.chunk_lengths": [[989, "polars-series-chunk-lengths"]], "polars.Series.cat.is_local": [[983, "polars-series-cat-is-local"]], "polars.Series.drop_nans": [[1011, "polars-series-drop-nans"]], "polars.Series.dt.convert_time_zone": [[1018, "polars-series-dt-convert-time-zone"]], "polars.Series.cat.to_local": [[985, "polars-series-cat-to-local"]], "polars.Series.arr.unique": [[973, "polars-series-arr-unique"]], "polars.Series.cat.uses_lexical_ordering": [[986, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.clone": [[994, "polars-series-clone"]], "polars.Series.dt.days": [[1022, "polars-series-dt-days"]], "polars.Series.dt.epoch": [[1024, "polars-series-dt-epoch"]], "polars.Series.cumulative_eval": [[1006, "polars-series-cumulative-eval"]], "polars.Series.cat.get_categories": [[982, "polars-series-cat-get-categories"]], "polars.Series.dt.datetime": [[1020, "polars-series-dt-datetime"]], "polars.Series.clip_max": [[992, "polars-series-clip-max"]], "polars.Series.cummax": [[1002, "polars-series-cummax"]], "polars.Series.cum_max": [[998, "polars-series-cum-max"]], "polars.Series.cosh": [[996, "polars-series-cosh"]], "polars.Series.bin.encode": [[977, "polars-series-bin-encode"]], "polars.Series.arr.std": [[969, "polars-series-arr-std"]], "polars.Series.dt.century": [[1016, "polars-series-dt-century"]], "polars.Series.dt.base_utc_offset": [[1014, "polars-series-dt-base-utc-offset"]], "polars.Series.cumprod": [[1004, "polars-series-cumprod"]], "polars.Series.clip": [[991, "polars-series-clip"]], "polars.Series.bottom_k": [[980, "polars-series-bottom-k"]], "polars.Series.dt.hour": [[1025, "polars-series-dt-hour"]], "polars.Series.dot": [[1010, "polars-series-dot"]], "polars.Series.dt.dst_offset": [[1023, "polars-series-dt-dst-offset"]], "polars.Series.cummin": [[1003, "polars-series-cummin"]], "polars.Series.describe": [[1008, "polars-series-describe"]], "polars.Series.diff": [[1009, "polars-series-diff"]], "polars.Series.dt.add_business_days": [[1013, "polars-series-dt-add-business-days"]], "polars.Series.arr.var": [[974, "polars-series-arr-var"]], "polars.Series.cum_prod": [[1000, "polars-series-cum-prod"]], "polars.Series.arr.to_list": [[971, "polars-series-arr-to-list"]], "polars.Series.clear": [[990, "polars-series-clear"]], "polars.Series.cbrt": [[987, "polars-series-cbrt"]], "polars.Series.cut": [[1007, "polars-series-cut"]], "polars.Series.drop_nulls": [[1012, "polars-series-drop-nulls"]], "polars.Series.arr.sum": [[970, "polars-series-arr-sum"]], "polars.Series.bin.ends_with": [[978, "polars-series-bin-ends-with"]], "polars.Series.ceil": [[988, "polars-series-ceil"]], "polars.Series.cot": [[997, "polars-series-cot"]], "polars.Series.dt.cast_time_unit": [[1015, "polars-series-dt-cast-time-unit"]], "polars.Series.cumsum": [[1005, "polars-series-cumsum"]], "polars.Series.cum_min": [[999, "polars-series-cum-min"]], "polars.Series.cum_sum": [[1001, "polars-series-cum-sum"]], "polars.Series.arr.to_struct": [[972, "polars-series-arr-to-struct"]], "polars.LazyFrame.sql": [[891, "polars-lazyframe-sql"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[908, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.serialize": [[884, "polars-lazyframe-serialize"]], "polars.LazyFrame.unnest": [[898, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_columns_seq": [[903, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.join": [[861, "polars-lazyframe-join"]], "polars.LazyFrame.var": [[900, "polars-lazyframe-var"]], "polars.LazyFrame.melt": [[871, "polars-lazyframe-melt"]], "polars.LazyFrame.lazy": [[864, "polars-lazyframe-lazy"]], "polars.LazyFrame.inspect": [[859, "polars-lazyframe-inspect"]], "polars.LazyFrame.groupby_dynamic": [[856, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.width": [[901, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[907, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.set_sorted": [[885, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.max": [[868, "polars-lazyframe-max"]], "polars.LazyFrame.slice": [[889, "polars-lazyframe-slice"]], "polars.LazyFrame.pipe": [[875, "polars-lazyframe-pipe"]], "polars.LazyFrame.interpolate": [[860, "polars-lazyframe-interpolate"]], "polars.LazyFrame.update": [[899, "polars-lazyframe-update"]], "polars.LazyFrame.with_context": [[904, "polars-lazyframe-with-context"]], "polars.LazyFrame.groupby": [[855, "polars-lazyframe-groupby"]], "polars.LazyFrame.unique": [[897, "polars-lazyframe-unique"]], "polars.LazyFrame.mean": [[869, "polars-lazyframe-mean"]], "polars.LazyFrame.with_row_count": [[905, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[906, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.std": [[892, "polars-lazyframe-std"]], "polars.LazyFrame.rename": [[878, "polars-lazyframe-rename"]], "polars.LazyFrame.select_seq": [[883, "polars-lazyframe-select-seq"]], "polars.LazyFrame.show_graph": [[888, "polars-lazyframe-show-graph"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[909, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.profile": [[876, "polars-lazyframe-profile"]], "polars.LazyFrame.map_batches": [[867, "polars-lazyframe-map-batches"]], "polars.LazyFrame.groupby_rolling": [[857, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.head": [[858, "polars-lazyframe-head"]], "polars.LazyFrame.with_columns": [[902, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[910, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.shift_and_fill": [[887, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.reverse": [[879, "polars-lazyframe-reverse"]], "polars.LazyFrame.sort": [[890, "polars-lazyframe-sort"]], "polars.LazyFrame.top_k": [[896, "polars-lazyframe-top-k"]], "polars.LazyFrame.shift": [[886, "polars-lazyframe-shift"]], "polars.LazyFrame.last": [[863, "polars-lazyframe-last"]], "polars.LazyFrame.null_count": [[874, "polars-lazyframe-null-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[911, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.quantile": [[877, "polars-lazyframe-quantile"]], "polars.LazyFrame.select": [[882, "polars-lazyframe-select"]], "polars.LazyFrame.take_every": [[895, "polars-lazyframe-take-every"]], "polars.LazyFrame.rolling": [[880, "polars-lazyframe-rolling"]], "polars.LazyFrame.tail": [[894, "polars-lazyframe-tail"]], "polars.LazyFrame.limit": [[865, "polars-lazyframe-limit"]], "polars.LazyFrame.median": [[870, "polars-lazyframe-median"]], "polars.LazyFrame.schema": [[881, "polars-lazyframe-schema"]], "polars.LazyFrame.merge_sorted": [[872, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.sum": [[893, "polars-lazyframe-sum"]], "polars.LazyFrame.join_asof": [[862, "polars-lazyframe-join-asof"]], "polars.LazyFrame.min": [[873, "polars-lazyframe-min"]], "polars.LazyFrame.map": [[866, "polars-lazyframe-map"]], "polars.first": [[763, "polars-first"]], "polars.count": [[743, "polars-count"]], "polars.repeat": [[790, "polars-repeat"]], "polars.cum_sum": [[748, "polars-cum-sum"]], "polars.cumfold": [[750, "polars-cumfold"]], "polars.concat_str": [[741, "polars-concat-str"]], "polars.reduce": [[789, "polars-reduce"]], "polars.median": [[782, "polars-median"]], "polars.cum_count": [[745, "polars-cum-count"]], "polars.std": [[795, "polars-std"]], "polars.exclude": [[762, "polars-exclude"]], "polars.rolling_corr": [[791, "polars-rolling-corr"]], "polars.select": [[793, "polars-select"]], "polars.from_epoch": [[766, "polars-from-epoch"]], "polars.struct": [[796, "polars-struct"]], "polars.max": [[778, "polars-max"]], "polars.sql_expr": [[794, "polars-sql-expr"]], "polars.int_range": [[770, "polars-int-range"]], "polars.corr": [[742, "polars-corr"]], "polars.date_range": [[755, "polars-date-range"]], "polars.map": [[775, "polars-map"]], "polars.min": [[783, "polars-min"]], "polars.n_unique": [[785, "polars-n-unique"]], "polars.datetime_range": [[758, "polars-datetime-range"]], "polars.max_horizontal": [[779, "polars-max-horizontal"]], "polars.duration": [[760, "polars-duration"]], "polars.element": [[761, "polars-element"]], "polars.cum_fold": [[746, "polars-cum-fold"]], "polars.cumsum": [[752, "polars-cumsum"]], "polars.nth": [[786, "polars-nth"]], "polars.rolling_cov": [[792, "polars-rolling-cov"]], "polars.lit": [[774, "polars-lit"]], "polars.datetime_ranges": [[759, "polars-datetime-ranges"]], "polars.cum_sum_horizontal": [[749, "polars-cum-sum-horizontal"]], "polars.groups": [[767, "polars-groups"]], "polars.len": [[773, "polars-len"]], "polars.mean_horizontal": [[781, "polars-mean-horizontal"]], "polars.cumreduce": [[751, "polars-cumreduce"]], "polars.map_batches": [[776, "polars-map-batches"]], "polars.head": [[768, "polars-head"]], "polars.int_ranges": [[771, "polars-int-ranges"]], "polars.sum": [[797, "polars-sum"]], "polars.format": [[765, "polars-format"]], "polars.date": [[754, "polars-date"]], "polars.map_groups": [[777, "polars-map-groups"]], "polars.cumsum_horizontal": [[753, "polars-cumsum-horizontal"]], "polars.date_ranges": [[756, "polars-date-ranges"]], "polars.datetime": [[757, "polars-datetime"]], "polars.quantile": [[788, "polars-quantile"]], "polars.last": [[772, "polars-last"]], "polars.min_horizontal": [[784, "polars-min-horizontal"]], "polars.cum_reduce": [[747, "polars-cum-reduce"]], "polars.cov": [[744, "polars-cov"]], "polars.mean": [[780, "polars-mean"]], "polars.implode": [[769, "polars-implode"]], "polars.ones": [[787, "polars-ones"]], "polars.fold": [[764, "polars-fold"]], "polars.Expr.top_k": [[717, "polars-expr-top-k"]], "polars.Expr.str.strip": [[687, "polars-expr-str-strip"]], "polars.Expr.str.split_exact": [[684, "polars-expr-str-split-exact"]], "polars.business_day_count": [[738, "polars-business-day-count"]], "polars.Expr.take_every": [[713, "polars-expr-take-every"]], "polars.Expr.str.to_date": [[695, "polars-expr-str-to-date"]], "polars.apply": [[731, "polars-apply"]], "polars.all_horizontal": [[728, "polars-all-horizontal"]], "polars.Expr.top_k_by": [[718, "polars-expr-top-k-by"]], "polars.approx_n_unique": [[732, "polars-approx-n-unique"]], "polars.Expr.str.to_datetime": [[696, "polars-expr-str-to-datetime"]], "polars.Expr.tail": [[711, "polars-expr-tail"]], "polars.Expr.where": [[725, "polars-expr-where"]], "polars.Expr.unique": [[720, "polars-expr-unique"]], "polars.Expr.struct.json_encode": [[705, "polars-expr-struct-json-encode"]], "polars.Expr.str.splitn": [[685, "polars-expr-str-splitn"]], "polars.Expr.upper_bound": [[722, "polars-expr-upper-bound"]], "polars.arange": [[733, "polars-arange"]], "polars.Expr.str.strip_suffix": [[692, "polars-expr-str-strip-suffix"]], "polars.any": [[729, "polars-any"]], "polars.Expr.str.tail": [[694, "polars-expr-str-tail"]], "polars.Expr.sub": [[708, "polars-expr-sub"]], "polars.Expr.struct.with_fields": [[707, "polars-expr-struct-with-fields"]], "polars.concat_list": [[740, "polars-concat-list"]], "polars.Expr.var": [[724, "polars-expr-var"]], "polars.Expr.to_physical": [[716, "polars-expr-to-physical"]], "polars.Expr.xor": [[726, "polars-expr-xor"]], "polars.Expr.str.starts_with": [[686, "polars-expr-str-starts-with"]], "polars.Expr.take": [[712, "polars-expr-take"]], "polars.Expr.suffix": [[709, "polars-expr-suffix"]], "polars.Expr.str.strip_chars_start": [[690, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strptime": [[693, "polars-expr-str-strptime"]], "polars.Expr.str.to_integer": [[698, "polars-expr-str-to-integer"]], "polars.Expr.str.zfill": [[703, "polars-expr-str-zfill"]], "polars.Expr.tan": [[714, "polars-expr-tan"]], "polars.Expr.unique_counts": [[721, "polars-expr-unique-counts"]], "polars.arg_sort_by": [[736, "polars-arg-sort-by"]], "polars.Expr.str.to_uppercase": [[702, "polars-expr-str-to-uppercase"]], "polars.coalesce": [[739, "polars-coalesce"]], "polars.Expr.str.to_lowercase": [[699, "polars-expr-str-to-lowercase"]], "polars.any_horizontal": [[730, "polars-any-horizontal"]], "polars.Expr.str.to_titlecase": [[701, "polars-expr-str-to-titlecase"]], "polars.arctan2d": [[735, "polars-arctan2d"]], "polars.Expr.str.strip_prefix": [[691, "polars-expr-str-strip-prefix"]], "polars.Expr.struct.rename_fields": [[706, "polars-expr-struct-rename-fields"]], "polars.Expr.sum": [[710, "polars-expr-sum"]], "polars.Expr.str.strip_chars_end": [[689, "polars-expr-str-strip-chars-end"]], "polars.Expr.tanh": [[715, "polars-expr-tanh"]], "polars.arctan2": [[734, "polars-arctan2"]], "polars.Expr.str.to_decimal": [[697, "polars-expr-str-to-decimal"]], "polars.Expr.struct.field": [[704, "polars-expr-struct-field"]], "polars.Expr.str.to_time": [[700, "polars-expr-str-to-time"]], "polars.Expr.value_counts": [[723, "polars-expr-value-counts"]], "polars.Expr.str.strip_chars": [[688, "polars-expr-str-strip-chars"]], "polars.arg_where": [[737, "polars-arg-where"]], "polars.all": [[727, "polars-all"]], "polars.Expr.truediv": [[719, "polars-expr-truediv"]], "polars.Series.append": [[938, "polars-series-append"]], "Miscellaneous": [[928, "miscellaneous"], [1327, "miscellaneous"], [817, "miscellaneous"], [825, "miscellaneous"], [310, "miscellaneous"]], "Read/write logical plan": [[928, "read-write-logical-plan"]], "polars.Series.apply": [[939, "polars-series-apply"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[919, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.arr.arg_min": [[954, "polars-series-arr-arg-min"]], "Descriptive": [[925, "descriptive"], [1323, "descriptive"], [306, "descriptive"]], "polars.Series.any": [[937, "polars-series-any"]], "polars.Series.arr.min": [[964, "polars-series-arr-min"]], "polars.Series.arr.median": [[963, "polars-series-arr-median"]], "polars.Series.arr.count_matches": [[956, "polars-series-arr-count-matches"]], "polars.Series.arcsinh": [[943, "polars-series-arcsinh"]], "Attributes": [[924, "attributes"], [1318, "attributes"], [304, "attributes"]], "Selectors": [[932, "selectors"]], "Importing": [[932, "importing"]], "Set operations": [[932, "set-operations"]], "Functions": [[932, "functions"], [825, "functions"], [813, "functions"]], "Plugins": [[931, "plugins"]], "polars.Series.arr.join": [[960, "polars-series-arr-join"]], "polars.Series.arr.reverse": [[966, "polars-series-arr-reverse"]], "polars.Series.arcsin": [[942, "polars-series-arcsin"]], "polars.Series.arg_true": [[949, "polars-series-arg-true"]], "LazyFrame": [[927, "lazyframe"]], "polars.Series.arg_max": [[946, "polars-series-arg-max"]], "polars.Series.arr.all": [[951, "polars-series-arr-all"]], "GroupBy": [[926, "groupby"], [308, "groupby"]], "polars.Series.arg_min": [[947, "polars-series-arg-min"]], "polars.Series.arr.last": [[961, "polars-series-arr-last"]], "polars.Series.alias": [[935, "polars-series-alias"]], "polars.Series.arccos": [[940, "polars-series-arccos"]], "polars.Series.arr.arg_max": [[953, "polars-series-arr-arg-max"]], "polars.Series.arr.get": [[959, "polars-series-arr-get"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[921, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.Series.arr.explode": [[957, "polars-series-arr-explode"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[922, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.all": [[936, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[918, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arr.any": [[952, "polars-series-arr-any"]], "polars.Series.arg_sort": [[948, "polars-series-arg-sort"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[915, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arr.contains": [[955, "polars-series-arr-contains"]], "polars.Series.arctan": [[944, "polars-series-arctan"]], "polars.Series.arctanh": [[945, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[923, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[913, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arr.max": [[962, "polars-series-arr-max"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[912, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.arr.n_unique": [[965, "polars-series-arr-n-unique"]], "Manipulation/selection": [[929, "manipulation-selection"], [1328, "manipulation-selection"], [818, "manipulation-selection"], [311, "manipulation-selection"]], "polars.Series.arg_unique": [[950, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[914, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[920, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.Series.arccosh": [[941, "polars-series-arccosh"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[916, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arr.sort": [[968, "polars-series-arr-sort"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[917, "polars-lazyframe-group-by-lazygroupby-mean"]], "Metadata": [[930, "metadata"]], "polars.Series.abs": [[934, "polars-series-abs"]], "polars.Series.arr.first": [[958, "polars-series-arr-first"]], "polars.Series.arr.shift": [[967, "polars-series-arr-shift"]], "polars.Series.unique_counts": [[1311, "polars-series-unique-counts"]], "Export": [[1324, "export"], [307, "export"]], "SQL Interface": [[1333, "sql-interface"]], "Methods": [[1333, "methods"]], "Plot": [[1329, "plot"], [312, "plot"]], "polars.Series.view": [[1315, "polars-series-view"]], "Boolean": [[1320, "boolean"], [808, "boolean"]], "Binary": [[1319, "binary"], [820, "binary"], [807, "binary"]], "Categories": [[1321, "categories"], [809, "categories"]], "List": [[1326, "list"], [815, "list"]], "Series": [[1325, "series"]], "Array": [[1317, "array"], [806, "array"]], "polars.Series.upper_bound": [[1312, "polars-series-upper-bound"]], "Computation": [[1322, "computation"], [812, "computation"], [305, "computation"]], "polars.Series.value_counts": [[1313, "polars-series-value-counts"]], "Temporal": [[1332, "temporal"], [823, "temporal"], [313, "temporal"]], "Struct": [[1331, "struct"], [822, "struct"]], "Testing": [[1334, "testing"]], "Asserts": [[1334, "asserts"]], "Parametric testing": [[1334, "parametric-testing"]], "Polars strategies": [[1334, "polars-strategies"]], "Strategy helpers": [[1334, "strategy-helpers"]], "Profiles": [[1334, "profiles"]], "String": [[1330, "string"], [821, "string"], [313, "string"]], "polars.Series.zip_with": [[1316, "polars-series-zip-with"]], "polars.Series.var": [[1314, "polars-series-var"]], "polars.Expr.slice": [[645, "polars-expr-slice"]], "polars.Expr.str.extract": [[659, "polars-expr-str-extract"]], "polars.Expr.str.rstrip": [[681, "polars-expr-str-rstrip"]], "polars.Expr.str.json_extract": [[665, "polars-expr-str-json-extract"]], "polars.Expr.shuffle": [[640, "polars-expr-shuffle"]], "polars.Expr.str.json_path_match": [[666, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_chars": [[668, "polars-expr-str-len-chars"]], "polars.Expr.sqrt": [[648, "polars-expr-sqrt"]], "polars.Expr.str.contains_any": [[652, "polars-expr-str-contains-any"]], "polars.Expr.rolling_var_by": [[631, "polars-expr-rolling-var-by"]], "polars.Expr.sort_by": [[647, "polars-expr-sort-by"]], "polars.Expr.str.reverse": [[679, "polars-expr-str-reverse"]], "polars.Expr.shrink_dtype": [[639, "polars-expr-shrink-dtype"]], "polars.Expr.str.lengths": [[669, "polars-expr-str-lengths"]], "polars.Expr.sort": [[646, "polars-expr-sort"]], "polars.Expr.str.contains": [[651, "polars-expr-str-contains"]], "polars.Expr.str.replace_all": [[677, "polars-expr-str-replace-all"]], "polars.Expr.rolling_var": [[630, "polars-expr-rolling-var"]], "polars.Expr.round_sig_figs": [[633, "polars-expr-round-sig-figs"]], "polars.Expr.str.json_decode": [[664, "polars-expr-str-json-decode"]], "polars.Expr.str.len_bytes": [[667, "polars-expr-str-len-bytes"]], "polars.Expr.sample": [[634, "polars-expr-sample"]], "polars.Expr.rolling_std_by": [[627, "polars-expr-rolling-std-by"]], "polars.Expr.str.replace_many": [[678, "polars-expr-str-replace-many"]], "polars.Expr.str.ljust": [[670, "polars-expr-str-ljust"]], "polars.Expr.str.parse_int": [[675, "polars-expr-str-parse-int"]], "polars.Expr.str.concat": [[650, "polars-expr-str-concat"]], "polars.Expr.round": [[632, "polars-expr-round"]], "polars.Expr.str.pad_start": [[674, "polars-expr-str-pad-start"]], "polars.Expr.str.head": [[663, "polars-expr-str-head"]], "polars.Expr.str.ends_with": [[657, "polars-expr-str-ends-with"]], "polars.Expr.str.rjust": [[680, "polars-expr-str-rjust"]], "polars.Expr.set_sorted": [[636, "polars-expr-set-sorted"]], "polars.Expr.shift_and_fill": [[638, "polars-expr-shift-and-fill"]], "polars.Expr.sin": [[642, "polars-expr-sin"]], "polars.Expr.shift": [[637, "polars-expr-shift"]], "polars.Expr.str.slice": [[682, "polars-expr-str-slice"]], "polars.Expr.rolling_sum": [[628, "polars-expr-rolling-sum"]], "polars.Expr.str.extract_groups": [[661, "polars-expr-str-extract-groups"]], "polars.Expr.str.count_matches": [[654, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[655, "polars-expr-str-decode"]], "polars.Expr.str.lstrip": [[671, "polars-expr-str-lstrip"]], "polars.Expr.sign": [[641, "polars-expr-sign"]], "polars.Expr.str.extract_all": [[660, "polars-expr-str-extract-all"]], "polars.Expr.str.replace": [[676, "polars-expr-str-replace"]], "polars.Expr.str.encode": [[656, "polars-expr-str-encode"]], "polars.Expr.str.split": [[683, "polars-expr-str-split"]], "polars.Expr.rolling_sum_by": [[629, "polars-expr-rolling-sum-by"]], "polars.Expr.std": [[649, "polars-expr-std"]], "polars.Expr.str.count_match": [[653, "polars-expr-str-count-match"]], "polars.Expr.skew": [[644, "polars-expr-skew"]], "polars.Expr.search_sorted": [[635, "polars-expr-search-sorted"]], "polars.Expr.str.pad_end": [[673, "polars-expr-str-pad-end"]], "polars.Expr.str.n_chars": [[672, "polars-expr-str-n-chars"]], "polars.Expr.str.find": [[662, "polars-expr-str-find"]], "polars.Expr.sinh": [[643, "polars-expr-sinh"]], "polars.Expr.str.explode": [[658, "polars-expr-str-explode"]], "polars.Expr.meta.is_regex_projection": [[561, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.head": [[519, "polars-expr-list-head"]], "polars.Expr.map": [[551, "polars-expr-map"]], "polars.Expr.meta.tree_format": [[567, "polars-expr-meta-tree-format"]], "polars.Expr.list.tail": [[540, "polars-expr-list-tail"]], "polars.Expr.median": [[558, "polars-expr-median"]], "polars.Expr.list.get": [[518, "polars-expr-list-get"]], "polars.Expr.log": [[546, "polars-expr-log"]], "polars.Expr.meta.output_name": [[563, "polars-expr-meta-output-name"]], "polars.Expr.list.to_array": [[542, "polars-expr-list-to-array"]], "polars.Expr.list.first": [[515, "polars-expr-list-first"]], "polars.Expr.list.explode": [[514, "polars-expr-list-explode"]], "polars.Expr.list.var": [[545, "polars-expr-list-var"]], "polars.Expr.meta.eq": [[559, "polars-expr-meta-eq"]], "polars.Expr.list.reverse": [[529, "polars-expr-list-reverse"]], "polars.Expr.list.shift": [[535, "polars-expr-list-shift"]], "polars.Expr.log10": [[547, "polars-expr-log10"]], "polars.Expr.list.std": [[538, "polars-expr-list-std"]], "polars.Expr.list.median": [[526, "polars-expr-list-median"]], "polars.Expr.meta.write_json": [[569, "polars-expr-meta-write-json"]], "polars.Expr.list.set_symmetric_difference": [[533, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.lt": [[550, "polars-expr-lt"]], "polars.Expr.max": [[556, "polars-expr-max"]], "polars.Expr.list.set_difference": [[531, "polars-expr-list-set-difference"]], "polars.Expr.list.min": [[527, "polars-expr-list-min"]], "polars.Expr.list.unique": [[544, "polars-expr-list-unique"]], "polars.Expr.list.n_unique": [[528, "polars-expr-list-n-unique"]], "polars.Expr.list.slice": [[536, "polars-expr-list-slice"]], "polars.Expr.map_batches": [[553, "polars-expr-map-batches"]], "polars.Expr.list.set_intersection": [[532, "polars-expr-list-set-intersection"]], "polars.Expr.map_dict": [[554, "polars-expr-map-dict"]], "polars.Expr.list.gather": [[516, "polars-expr-list-gather"]], "polars.Expr.meta.ne": [[562, "polars-expr-meta-ne"]], "polars.Expr.list.mean": [[525, "polars-expr-list-mean"]], "polars.Expr.list.take": [[541, "polars-expr-list-take"]], "polars.Expr.meta.has_multiple_outputs": [[560, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.lengths": [[523, "polars-expr-list-lengths"]], "polars.Expr.list.gather_every": [[517, "polars-expr-list-gather-every"]], "polars.Expr.map_elements": [[555, "polars-expr-map-elements"]], "polars.Expr.meta.undo_aliases": [[568, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.sample": [[530, "polars-expr-list-sample"]], "polars.Expr.list.sort": [[537, "polars-expr-list-sort"]], "polars.Expr.list.sum": [[539, "polars-expr-list-sum"]], "polars.Expr.list.max": [[524, "polars-expr-list-max"]], "polars.Expr.meta.root_names": [[565, "polars-expr-meta-root-names"]], "polars.Expr.list.eval": [[513, "polars-expr-list-eval"]], "polars.Expr.list.len": [[522, "polars-expr-list-len"]], "polars.Expr.list.to_struct": [[543, "polars-expr-list-to-struct"]], "polars.Expr.map_alias": [[552, "polars-expr-map-alias"]], "polars.Expr.list.join": [[520, "polars-expr-list-join"]], "polars.Expr.lower_bound": [[549, "polars-expr-lower-bound"]], "polars.Expr.meta.serialize": [[566, "polars-expr-meta-serialize"]], "polars.Expr.list.last": [[521, "polars-expr-list-last"]], "polars.Expr.meta.pop": [[564, "polars-expr-meta-pop"]], "polars.Expr.mean": [[557, "polars-expr-mean"]], "polars.Expr.list.set_union": [[534, "polars-expr-list-set-union"]], "polars.Expr.log1p": [[548, "polars-expr-log1p"]], "polars.Expr.over": [[592, "polars-expr-over"]], "polars.Expr.rle": [[610, "polars-expr-rle"]], "polars.Expr.ne_missing": [[587, "polars-expr-ne-missing"]], "polars.Expr.rolling_max_by": [[616, "polars-expr-rolling-max-by"]], "polars.Expr.name.keep": [[575, "polars-expr-name-keep"]], "polars.Expr.rank": [[603, "polars-expr-rank"]], "polars.Expr.reinterpret": [[605, "polars-expr-reinterpret"]], "polars.Expr.rolling_min_by": [[622, "polars-expr-rolling-min-by"]], "polars.Expr.peak_max": [[594, "polars-expr-peak-max"]], "polars.Expr.rolling_median": [[619, "polars-expr-rolling-median"]], "polars.Expr.rolling_std": [[626, "polars-expr-rolling-std"]], "polars.Expr.n_unique": [[574, "polars-expr-n-unique"]], "polars.Expr.neg": [[588, "polars-expr-neg"]], "polars.Expr.name.to_lowercase": [[582, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[583, "polars-expr-name-to-uppercase"]], "polars.Expr.quantile": [[601, "polars-expr-quantile"]], "polars.Expr.radians": [[602, "polars-expr-radians"]], "polars.Expr.rolling": [[612, "polars-expr-rolling"]], "polars.Expr.rolling_apply": [[613, "polars-expr-rolling-apply"]], "polars.Expr.rolling_quantile_by": [[624, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_quantile": [[623, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[625, "polars-expr-rolling-skew"]], "polars.Expr.mul": [[573, "polars-expr-mul"]], "polars.Expr.qcut": [[600, "polars-expr-qcut"]], "polars.Expr.rolling_mean": [[617, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median_by": [[620, "polars-expr-rolling-median-by"]], "polars.Expr.reverse": [[609, "polars-expr-reverse"]], "polars.Expr.rolling_mean_by": [[618, "polars-expr-rolling-mean-by"]], "polars.Expr.name.suffix_fields": [[581, "polars-expr-name-suffix-fields"]], "polars.Expr.name.map_fields": [[577, "polars-expr-name-map-fields"]], "polars.Expr.ne": [[586, "polars-expr-ne"]], "polars.Expr.pct_change": [[593, "polars-expr-pct-change"]], "polars.Expr.name.map": [[576, "polars-expr-name-map"]], "polars.Expr.name.prefix": [[578, "polars-expr-name-prefix"]], "polars.Expr.null_count": [[590, "polars-expr-null-count"]], "polars.Expr.rolling_max": [[615, "polars-expr-rolling-max"]], "polars.Expr.product": [[599, "polars-expr-product"]], "polars.Expr.rle_id": [[611, "polars-expr-rle-id"]], "polars.Expr.peak_min": [[595, "polars-expr-peak-min"]], "polars.Expr.min": [[570, "polars-expr-min"]], "polars.Expr.nan_min": [[585, "polars-expr-nan-min"]], "polars.Expr.or_": [[591, "polars-expr-or"]], "polars.Expr.mod": [[571, "polars-expr-mod"]], "polars.Expr.nan_max": [[584, "polars-expr-nan-max"]], "polars.Expr.repeat_by": [[606, "polars-expr-repeat-by"]], "polars.Expr.not_": [[589, "polars-expr-not"]], "polars.Expr.name.suffix": [[580, "polars-expr-name-suffix"]], "polars.Expr.prefix": [[598, "polars-expr-prefix"]], "polars.Expr.replace": [[607, "polars-expr-replace"]], "polars.Expr.rolling_map": [[614, "polars-expr-rolling-map"]], "polars.Expr.name.prefix_fields": [[579, "polars-expr-name-prefix-fields"]], "polars.Expr.rechunk": [[604, "polars-expr-rechunk"]], "polars.Expr.reshape": [[608, "polars-expr-reshape"]], "polars.Expr.mode": [[572, "polars-expr-mode"]], "polars.Expr.pow": [[597, "polars-expr-pow"]], "polars.Expr.pipe": [[596, "polars-expr-pipe"]], "polars.Expr.rolling_min": [[621, "polars-expr-rolling-min"]], "polars.Expr.is_between": [[482, "polars-expr-is-between"]], "polars.Expr.fill_null": [[462, "polars-expr-fill-null"]], "polars.Expr.keep_name": [[497, "polars-expr-keep-name"]], "polars.Expr.last": [[499, "polars-expr-last"]], "polars.Expr.len": [[501, "polars-expr-len"]], "polars.Expr.gather_every": [[471, "polars-expr-gather-every"]], "polars.Expr.is_infinite": [[488, "polars-expr-is-infinite"]], "polars.Expr.hash": [[475, "polars-expr-hash"]], "polars.Expr.explode": [[459, "polars-expr-explode"]], "polars.Expr.gather": [[470, "polars-expr-gather"]], "polars.Expr.is_not_nan": [[493, "polars-expr-is-not-nan"]], "polars.Expr.from_json": [[469, "polars-expr-from-json"]], "polars.Expr.is_last_distinct": [[490, "polars-expr-is-last-distinct"]], "polars.Expr.interpolate_by": [[481, "polars-expr-interpolate-by"]], "polars.Expr.list.all": [[503, "polars-expr-list-all"]], "polars.Expr.implode": [[478, "polars-expr-implode"]], "polars.Expr.is_last": [[489, "polars-expr-is-last"]], "polars.Expr.is_first_distinct": [[486, "polars-expr-is-first-distinct"]], "polars.Expr.gt": [[474, "polars-expr-gt"]], "polars.Expr.ge": [[472, "polars-expr-ge"]], "polars.Expr.flatten": [[465, "polars-expr-flatten"]], "polars.Expr.is_unique": [[496, "polars-expr-is-unique"]], "polars.Expr.is_not_null": [[494, "polars-expr-is-not-null"]], "polars.Expr.list.arg_min": [[506, "polars-expr-list-arg-min"]], "polars.Expr.first": [[464, "polars-expr-first"]], "polars.Expr.ewm_var": [[456, "polars-expr-ewm-var"]], "polars.Expr.get": [[473, "polars-expr-get"]], "polars.Expr.kurtosis": [[498, "polars-expr-kurtosis"]], "polars.Expr.list.diff": [[511, "polars-expr-list-diff"]], "polars.Expr.floordiv": [[467, "polars-expr-floordiv"]], "polars.Expr.is_finite": [[484, "polars-expr-is-finite"]], "polars.Expr.limit": [[502, "polars-expr-limit"]], "polars.Expr.list.any": [[504, "polars-expr-list-any"]], "polars.Expr.list.contains": [[508, "polars-expr-list-contains"]], "polars.Expr.exclude": [[457, "polars-expr-exclude"]], "polars.Expr.filter": [[463, "polars-expr-filter"]], "polars.Expr.is_nan": [[491, "polars-expr-is-nan"]], "polars.Expr.fill_nan": [[461, "polars-expr-fill-nan"]], "polars.Expr.head": [[476, "polars-expr-head"]], "polars.Expr.is_first": [[485, "polars-expr-is-first"]], "polars.Expr.le": [[500, "polars-expr-le"]], "polars.Expr.list.arg_max": [[505, "polars-expr-list-arg-max"]], "polars.Expr.extend_constant": [[460, "polars-expr-extend-constant"]], "polars.Expr.list.concat": [[507, "polars-expr-list-concat"]], "polars.Expr.list.count_matches": [[510, "polars-expr-list-count-matches"]], "polars.Expr.inspect": [[479, "polars-expr-inspect"]], "polars.Expr.list.drop_nulls": [[512, "polars-expr-list-drop-nulls"]], "polars.Expr.floor": [[466, "polars-expr-floor"]], "polars.Expr.is_null": [[495, "polars-expr-is-null"]], "polars.Expr.is_duplicated": [[483, "polars-expr-is-duplicated"]], "polars.Expr.list.count_match": [[509, "polars-expr-list-count-match"]], "polars.Expr.forward_fill": [[468, "polars-expr-forward-fill"]], "polars.Expr.hist": [[477, "polars-expr-hist"]], "polars.Expr.is_in": [[487, "polars-expr-is-in"]], "polars.Expr.interpolate": [[480, "polars-expr-interpolate"]], "polars.Expr.exp": [[458, "polars-expr-exp"]], "polars.Expr.is_not": [[492, "polars-expr-is-not"]], "polars.Expr.dt.total_nanoseconds": [[443, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.date": [[405, "polars-expr-dt-date"]], "polars.Expr.dt.round": [[431, "polars-expr-dt-round"]], "polars.Expr.dt.weekday": [[447, "polars-expr-dt-weekday"]], "polars.Expr.dt.day": [[407, "polars-expr-dt-day"]], "polars.Expr.dt.seconds": [[433, "polars-expr-dt-seconds"]], "polars.Expr.dt.convert_time_zone": [[404, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.with_time_unit": [[448, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.millisecond": [[418, "polars-expr-dt-millisecond"]], "polars.Expr.dt.total_microseconds": [[440, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.minutes": [[421, "polars-expr-dt-minutes"]], "polars.Expr.dt.total_hours": [[439, "polars-expr-dt-total-hours"]], "polars.Expr.dt.cast_time_unit": [[401, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.month_end": [[423, "polars-expr-dt-month-end"]], "polars.Expr.dt.time": [[435, "polars-expr-dt-time"]], "polars.Expr.dt.quarter": [[429, "polars-expr-dt-quarter"]], "polars.Expr.entropy": [[450, "polars-expr-entropy"]], "polars.Expr.dt.strftime": [[434, "polars-expr-dt-strftime"]], "polars.Expr.dt.nanoseconds": [[426, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.year": [[449, "polars-expr-dt-year"]], "polars.Expr.dt.microsecond": [[415, "polars-expr-dt-microsecond"]], "polars.Expr.dt.epoch": [[410, "polars-expr-dt-epoch"]], "polars.Expr.dt.add_business_days": [[399, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.microseconds": [[416, "polars-expr-dt-microseconds"]], "polars.Expr.dt.month_start": [[424, "polars-expr-dt-month-start"]], "polars.Expr.dt.to_string": [[437, "polars-expr-dt-to-string"]], "polars.Expr.dt.iso_year": [[414, "polars-expr-dt-iso-year"]], "polars.Expr.dt.days": [[408, "polars-expr-dt-days"]], "polars.Expr.dt.hours": [[412, "polars-expr-dt-hours"]], "polars.Expr.dt.nanosecond": [[425, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.timestamp": [[436, "polars-expr-dt-timestamp"]], "polars.Expr.dt.millennium": [[417, "polars-expr-dt-millennium"]], "polars.Expr.dt.ordinal_day": [[428, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.offset_by": [[427, "polars-expr-dt-offset-by"]], "polars.Expr.dt.total_minutes": [[442, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_seconds": [[444, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.combine": [[403, "polars-expr-dt-combine"]], "polars.Expr.dt.century": [[402, "polars-expr-dt-century"]], "polars.Expr.dt.total_days": [[438, "polars-expr-dt-total-days"]], "polars.Expr.dt.second": [[432, "polars-expr-dt-second"]], "polars.Expr.dt.total_milliseconds": [[441, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.minute": [[420, "polars-expr-dt-minute"]], "polars.Expr.dt.milliseconds": [[419, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.week": [[446, "polars-expr-dt-week"]], "polars.Expr.dt.is_leap_year": [[413, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.datetime": [[406, "polars-expr-dt-datetime"]], "polars.Expr.dt.base_utc_offset": [[400, "polars-expr-dt-base-utc-offset"]], "polars.Expr.ewm_mean": [[453, "polars-expr-ewm-mean"]], "polars.Expr.dt.truncate": [[445, "polars-expr-dt-truncate"]], "polars.Expr.dt.replace_time_zone": [[430, "polars-expr-dt-replace-time-zone"]], "polars.Expr.eq": [[451, "polars-expr-eq"]], "polars.Expr.ewm_mean_by": [[454, "polars-expr-ewm-mean-by"]], "polars.Expr.eq_missing": [[452, "polars-expr-eq-missing"]], "polars.Expr.ewm_std": [[455, "polars-expr-ewm-std"]], "polars.Expr.dt.dst_offset": [[409, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.hour": [[411, "polars-expr-dt-hour"]], "polars.Expr.dt.month": [[422, "polars-expr-dt-month"]], "polars.Expr.diff": [[395, "polars-expr-diff"]], "polars.Expr.arr.sum": [[356, "polars-expr-arr-sum"]], "polars.Expr.arr.explode": [[343, "polars-expr-arr-explode"]], "polars.Expr.dot": [[396, "polars-expr-dot"]], "polars.Expr.arr.var": [[360, "polars-expr-arr-var"]], "polars.Expr.arr.to_struct": [[358, "polars-expr-arr-to-struct"]], "polars.Expr.cumcount": [[386, "polars-expr-cumcount"]], "polars.Expr.arr.unique": [[359, "polars-expr-arr-unique"]], "polars.Expr.drop_nans": [[397, "polars-expr-drop-nans"]], "polars.Expr.arr.join": [[346, "polars-expr-arr-join"]], "polars.Expr.cumulative_eval": [[391, "polars-expr-cumulative-eval"]], "polars.Expr.cummin": [[388, "polars-expr-cummin"]], "polars.Expr.ceil": [[373, "polars-expr-ceil"]], "polars.Expr.cbrt": [[372, "polars-expr-cbrt"]], "polars.Expr.arr.get": [[345, "polars-expr-arr-get"]], "polars.Expr.count": [[380, "polars-expr-count"]], "polars.Expr.cut": [[392, "polars-expr-cut"]], "polars.Expr.clip_min": [[376, "polars-expr-clip-min"]], "polars.Expr.arr.std": [[355, "polars-expr-arr-std"]], "polars.Expr.cum_prod": [[384, "polars-expr-cum-prod"]], "polars.Expr.arr.count_matches": [[342, "polars-expr-arr-count-matches"]], "polars.Expr.backward_fill": [[361, "polars-expr-backward-fill"]], "polars.Expr.cum_sum": [[385, "polars-expr-cum-sum"]], "polars.Expr.bin.ends_with": [[365, "polars-expr-bin-ends-with"]], "polars.Expr.cot": [[379, "polars-expr-cot"]], "polars.Expr.cum_max": [[382, "polars-expr-cum-max"]], "polars.Expr.cat.set_ordering": [[371, "polars-expr-cat-set-ordering"]], "polars.Expr.degrees": [[393, "polars-expr-degrees"]], "polars.Expr.clip": [[374, "polars-expr-clip"]], "polars.Expr.cum_count": [[381, "polars-expr-cum-count"]], "polars.Expr.arr.n_unique": [[351, "polars-expr-arr-n-unique"]], "polars.Expr.arr.median": [[349, "polars-expr-arr-median"]], "polars.Expr.bin.contains": [[362, "polars-expr-bin-contains"]], "polars.Expr.arr.reverse": [[352, "polars-expr-arr-reverse"]], "polars.Expr.cumprod": [[389, "polars-expr-cumprod"]], "polars.Expr.deserialize": [[394, "polars-expr-deserialize"]], "polars.Expr.arr.max": [[348, "polars-expr-arr-max"]], "polars.Expr.cos": [[377, "polars-expr-cos"]], "polars.Expr.arr.to_list": [[357, "polars-expr-arr-to-list"]], "polars.Expr.bin.decode": [[363, "polars-expr-bin-decode"]], "polars.Expr.cum_min": [[383, "polars-expr-cum-min"]], "polars.Expr.arr.shift": [[353, "polars-expr-arr-shift"]], "polars.Expr.arr.first": [[344, "polars-expr-arr-first"]], "polars.Expr.cosh": [[378, "polars-expr-cosh"]], "polars.Expr.arr.min": [[350, "polars-expr-arr-min"]], "polars.Expr.bin.encode": [[364, "polars-expr-bin-encode"]], "polars.Expr.cast": [[369, "polars-expr-cast"]], "polars.Expr.arr.sort": [[354, "polars-expr-arr-sort"]], "polars.Expr.bottom_k": [[367, "polars-expr-bottom-k"]], "polars.Expr.cumsum": [[390, "polars-expr-cumsum"]], "polars.Expr.arr.last": [[347, "polars-expr-arr-last"]], "polars.Expr.cummax": [[387, "polars-expr-cummax"]], "polars.Expr.clip_max": [[375, "polars-expr-clip-max"]], "polars.Expr.bin.starts_with": [[366, "polars-expr-bin-starts-with"]], "polars.Expr.drop_nulls": [[398, "polars-expr-drop-nulls"]], "polars.Expr.bottom_k_by": [[368, "polars-expr-bottom-k-by"]], "polars.Expr.cat.get_categories": [[370, "polars-expr-cat-get-categories"]], "polars.DataFrame.rolling": [[240, "polars-dataframe-rolling"]], "polars.DataFrame.var": [[279, "polars-dataframe-var"]], "polars.DataFrame.tail": [[259, "polars-dataframe-tail"]], "polars.DataFrame.with_row_count": [[284, "polars-dataframe-with-row-count"]], "polars.DataFrame.update": [[277, "polars-dataframe-update"]], "polars.DataFrame.replace": [[236, "polars-dataframe-replace"]], "polars.DataFrame.to_series": [[269, "polars-dataframe-to-series"]], "polars.DataFrame.partition_by": [[229, "polars-dataframe-partition-by"]], "polars.DataFrame.select": [[246, "polars-dataframe-select"]], "polars.DataFrame.pipe": [[230, "polars-dataframe-pipe"]], "polars.DataFrame.sum_horizontal": [[258, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_init_repr": [[265, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_struct": [[270, "polars-dataframe-to-struct"]], "polars.DataFrame.to_dict": [[262, "polars-dataframe-to-dict"]], "polars.DataFrame.rechunk": [[234, "polars-dataframe-rechunk"]], "polars.DataFrame.rows_by_key": [[243, "polars-dataframe-rows-by-key"]], "polars.DataFrame.with_columns": [[282, "polars-dataframe-with-columns"]], "polars.DataFrame.slice": [[253, "polars-dataframe-slice"]], "polars.DataFrame.reverse": [[239, "polars-dataframe-reverse"]], "polars.DataFrame.schema": [[245, "polars-dataframe-schema"]], "polars.DataFrame.unstack": [[276, "polars-dataframe-unstack"]], "polars.DataFrame.null_count": [[228, "polars-dataframe-null-count"]], "polars.DataFrame.width": [[281, "polars-dataframe-width"]], "polars.DataFrame.replace_at_idx": [[237, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.select_seq": [[247, "polars-dataframe-select-seq"]], "polars.DataFrame.shape": [[249, "polars-dataframe-shape"]], "polars.DataFrame.sum": [[257, "polars-dataframe-sum"]], "polars.DataFrame.rows": [[242, "polars-dataframe-rows"]], "polars.DataFrame.std": [[256, "polars-dataframe-std"]], "polars.DataFrame.shift_and_fill": [[251, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.replace_column": [[238, "polars-dataframe-replace-column"]], "polars.DataFrame.product": [[232, "polars-dataframe-product"]], "polars.DataFrame.with_columns_seq": [[283, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.to_dicts": [[263, "polars-dataframe-to-dicts"]], "polars.DataFrame.transpose": [[273, "polars-dataframe-transpose"]], "polars.DataFrame.rename": [[235, "polars-dataframe-rename"]], "polars.DataFrame.pivot": [[231, "polars-dataframe-pivot"]], "polars.DataFrame.set_sorted": [[248, "polars-dataframe-set-sorted"]], "polars.DataFrame.to_numpy": [[267, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_dummies": [[264, "polars-dataframe-to-dummies"]], "polars.DataFrame.unique": [[274, "polars-dataframe-unique"]], "polars.DataFrame.vstack": [[280, "polars-dataframe-vstack"]], "polars.DataFrame.quantile": [[233, "polars-dataframe-quantile"]], "polars.DataFrame.take_every": [[260, "polars-dataframe-take-every"]], "polars.DataFrame.to_jax": [[266, "polars-dataframe-to-jax"]], "polars.DataFrame.upsample": [[278, "polars-dataframe-upsample"]], "polars.DataFrame.to_arrow": [[261, "polars-dataframe-to-arrow"]], "polars.DataFrame.top_k": [[272, "polars-dataframe-top-k"]], "polars.DataFrame.sample": [[244, "polars-dataframe-sample"]], "polars.DataFrame.shrink_to_fit": [[252, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sql": [[255, "polars-dataframe-sql"]], "polars.DataFrame.shift": [[250, "polars-dataframe-shift"]], "polars.DataFrame.to_pandas": [[268, "polars-dataframe-to-pandas"]], "polars.DataFrame.sort": [[254, "polars-dataframe-sort"]], "polars.DataFrame.row": [[241, "polars-dataframe-row"]], "polars.DataFrame.to_torch": [[271, "polars-dataframe-to-torch"]], "polars.DataFrame.unnest": [[275, "polars-dataframe-unnest"]], "polars.col": [[810, "polars-col"]], "polars.time": [[800, "polars-time"]], "Window": [[824, "window"]], "polars.LazyFrame.dtypes": [[843, "polars-lazyframe-dtypes"]], "polars.when": [[804, "polars-when"]], "polars.LazyFrame.explain": [[844, "polars-lazyframe-explain"]], "polars.LazyFrame.clone": [[834, "polars-lazyframe-clone"]], "polars.LazyFrame.deserialize": [[840, "polars-lazyframe-deserialize"]], "polars.LazyFrame.group_by_dynamic": [[853, "polars-lazyframe-group-by-dynamic"]], "polars.sum_horizontal": [[798, "polars-sum-horizontal"]], "Operators": [[820, "operators"]], "Conjunction": [[820, "conjunction"]], "Comparison": [[820, "comparison"]], "Numeric": [[820, "numeric"], [313, "numeric"]], "polars.LazyFrame.drop": [[841, "polars-lazyframe-drop"]], "Meta": [[816, "meta"]], "Input/output": [[827, "input-output"]], "Avro": [[827, "avro"]], "Clipboard": [[827, "clipboard"]], "CSV": [[827, "csv"]], "Database": [[827, "database"]], "Delta Lake": [[827, "delta-lake"]], "Excel / ODS": [[827, "excel-ods"]], "Feather / IPC": [[827, "feather-ipc"]], "Iceberg": [[827, "iceberg"]], "JSON": [[827, "json"]], "Parquet": [[827, "parquet"]], "PyArrow Datasets": [[827, "pyarrow-datasets"]], "polars.LazyFrame.gather_every": [[851, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[852, "polars-lazyframe-group-by"]], "polars.LazyFrame.filter": [[849, "polars-lazyframe-filter"]], "polars.time_range": [[801, "polars-time-range"]], "Conversion": [[825, "conversion"]], "Parallelization": [[825, "parallelization"]], "Random": [[825, "random"]], "StringCache": [[825, "stringcache"]], "polars.LazyFrame.collect_async": [[836, "polars-lazyframe-collect-async"]], "polars.LazyFrame.count": [[838, "polars-lazyframe-count"]], "polars.time_ranges": [[802, "polars-time-ranges"]], "polars.LazyFrame.collect": [[835, "polars-lazyframe-collect"]], "polars.tail": [[799, "polars-tail"]], "Python API reference": [[826, "python-api-reference"]], "polars.LazyFrame.cache": [[831, "polars-lazyframe-cache"]], "polars.LazyFrame.fetch": [[846, "polars-lazyframe-fetch"]], "polars.LazyFrame.bottom_k": [[830, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.columns": [[837, "polars-lazyframe-columns"]], "polars.LazyFrame.describe": [[839, "polars-lazyframe-describe"]], "polars.LazyFrame.fill_null": [[848, "polars-lazyframe-fill-null"]], "Columns / names": [[811, "columns-names"]], "polars.zeros": [[805, "polars-zeros"]], "polars.LazyFrame.first": [[850, "polars-lazyframe-first"]], "Expressions": [[814, "expressions"]], "polars.var": [[803, "polars-var"]], "polars.LazyFrame.cast": [[832, "polars-lazyframe-cast"]], "polars.LazyFrame.approx_n_unique": [[829, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.clear": [[833, "polars-lazyframe-clear"]], "polars.LazyFrame.explode": [[845, "polars-lazyframe-explode"]], "polars.LazyFrame.group_by_rolling": [[854, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.fill_nan": [[847, "polars-lazyframe-fill-nan"]], "Name": [[819, "name"]], "polars.LazyFrame.drop_nulls": [[842, "polars-lazyframe-drop-nulls"]], "polars.Expr.alias": [[319, "polars-expr-alias"]], "polars.Expr.all": [[320, "polars-expr-all"]], "polars.Expr.add": [[317, "polars-expr-add"]], "polars.Expr.arg_max": [[332, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.sum": [[302, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.agg_groups": [[318, "polars-expr-agg-groups"]], "polars.Expr.arr.arg_max": [[339, "polars-expr-arr-arg-max"]], "polars.dataframe.group_by.GroupBy.first": [[291, "polars-dataframe-group-by-groupby-first"]], "Exceptions": [[314, "exceptions"]], "polars.Expr.arctan": [[330, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.head": [[292, "polars-dataframe-group-by-groupby-head"]], "Data types": [[313, "data-types"]], "DataType": [[313, "datatype"]], "Nested": [[313, "nested"]], "Other": [[313, "other"]], "polars.dataframe.group_by.GroupBy.__iter__": [[286, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.with_row_index": [[285, "polars-dataframe-with-row-index"]], "polars.Expr.and_": [[321, "polars-expr-and"]], "polars.Expr.approx_n_unique": [[325, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.last": [[293, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.arcsin": [[328, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.tail": [[303, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.any": [[322, "polars-expr-any"]], "polars.Expr.arg_min": [[333, "polars-expr-arg-min"]], "polars.Expr.arr.any": [[338, "polars-expr-arr-any"]], "polars.dataframe.group_by.GroupBy.apply": [[289, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.abs": [[316, "polars-expr-abs"]], "polars.Expr.arg_unique": [[336, "polars-expr-arg-unique"]], "polars.Expr.arr.contains": [[341, "polars-expr-arr-contains"]], "polars.dataframe.group_by.GroupBy.mean": [[297, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.n_unique": [[300, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.min": [[299, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.max": [[296, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.apply": [[324, "polars-expr-apply"]], "polars.Expr.arccosh": [[327, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.quantile": [[301, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arr.all": [[337, "polars-expr-arr-all"]], "polars.Expr.arg_true": [[335, "polars-expr-arg-true"]], "polars.dataframe.group_by.GroupBy.map_groups": [[295, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.agg": [[287, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.len": [[294, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.median": [[298, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.append": [[323, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.all": [[288, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arr.arg_min": [[340, "polars-expr-arr-arg-min"]], "polars.Expr.arctanh": [[331, "polars-expr-arctanh"]], "DataFrame": [[309, "dataframe"]], "polars.Expr.arcsinh": [[329, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.count": [[290, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arg_sort": [[334, "polars-expr-arg-sort"]], "polars.Expr.arccos": [[326, "polars-expr-arccos"]]}, "indexentries": {"activate_decimals() (polars.config class method)": [[2, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[3, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[4, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[7, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[9, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[10, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[31, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[32, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[33, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[34, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[35, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[36, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[37, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[39, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[40, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[41, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[42, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_parquet"]], "execute() (polars.sqlcontext method)": [[47, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[48, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[49, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[50, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[51, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[52, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[53, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[53, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[59, "polars.build_info"]], "collect_all() (in module polars)": [[60, "polars.collect_all"]], "collect_all_async() (in module polars)": [[61, "polars.collect_all_async"]], "concat() (in module polars)": [[62, "polars.concat"]], "array (class in polars.datatypes)": [[63, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[63, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[64, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[64, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[65, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[65, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[66, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[66, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[67, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[67, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[68, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[68, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[69, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[69, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[70, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[70, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[71, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[71, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[72, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[72, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[73, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[73, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[74, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[74, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[75, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[75, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[76, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[76, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[77, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[77, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[78, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[78, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[79, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[79, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[80, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[80, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[81, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[81, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[82, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[82, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[83, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[83, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[84, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[84, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[85, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[85, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[86, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[86, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[87, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[87, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[88, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[88, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[89, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[89, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[90, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[91, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[92, "polars.enable_string_cache"]], "arrowerror": [[93, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[94, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[95, "polars.exceptions.ComputeError"]], "duplicateerror": [[96, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[97, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[98, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[99, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[100, "polars.exceptions.PolarsError"]], "polarspanicerror": [[101, "polars.exceptions.PolarsPanicError"]], "rowserror": [[102, "polars.exceptions.RowsError"]], "schemaerror": [[103, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[104, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[105, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[106, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[107, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[108, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[109, "polars.from_dataframe"]], "from_dict() (in module polars)": [[110, "polars.from_dict"]], "from_dicts() (in module polars)": [[111, "polars.from_dicts"]], "from_numpy() (in module polars)": [[112, "polars.from_numpy"]], "from_pandas() (in module polars)": [[113, "polars.from_pandas"]], "from_records() (in module polars)": [[114, "polars.from_records"]], "from_repr() (in module polars)": [[115, "polars.from_repr"]], "get_index_type() (in module polars)": [[116, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[117, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[118, "polars.read_avro"]], "read_clipboard() (in module polars)": [[119, "polars.read_clipboard"]], "read_csv() (in module polars)": [[120, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[121, "polars.read_csv_batched"]], "read_database() (in module polars)": [[122, "polars.read_database"]], "read_database_uri() (in module polars)": [[123, "polars.read_database_uri"]], "read_delta() (in module polars)": [[124, "polars.read_delta"]], "read_excel() (in module polars)": [[125, "polars.read_excel"]], "read_ipc() (in module polars)": [[126, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[127, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[128, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[129, "polars.read_json"]], "read_ndjson() (in module polars)": [[130, "polars.read_ndjson"]], "read_ods() (in module polars)": [[131, "polars.read_ods"]], "read_parquet() (in module polars)": [[132, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[133, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[134, "polars.scan_csv"]], "scan_delta() (in module polars)": [[135, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[136, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[137, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[138, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[139, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[140, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[141, "polars.set_random_seed"]], "show_versions() (in module polars)": [[142, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[143, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[145, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[146, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[147, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[147, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[152, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[153, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[154, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[155, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[156, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[157, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[158, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[161, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[162, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[163, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[164, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[165, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[166, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[167, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[168, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[169, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[170, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[171, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[172, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[173, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[174, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[175, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[176, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[177, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[178, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[179, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[180, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[181, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[182, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[183, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[184, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[185, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[186, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[187, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[188, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[189, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[190, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[191, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[192, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[193, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[194, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[195, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[196, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[197, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[198, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[199, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[200, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[201, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[202, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[203, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[204, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[205, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[206, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[207, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[208, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[209, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[210, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[211, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[212, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[213, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[214, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[215, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[216, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[217, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[218, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[219, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[221, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[222, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[223, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[224, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[225, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[226, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[227, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[228, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[229, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[230, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[231, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[232, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[233, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[234, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[235, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[236, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[237, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[238, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[239, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[240, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[241, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[242, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[243, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[244, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[245, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[246, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[247, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[248, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[249, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[250, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[251, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[252, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[253, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[254, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[255, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[256, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[257, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[258, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[259, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[260, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[261, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[262, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[263, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[264, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[265, "polars.DataFrame.to_init_repr"]], "to_jax() (polars.dataframe method)": [[266, "polars.DataFrame.to_jax"]], "to_numpy() (polars.dataframe method)": [[267, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[268, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[269, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[270, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[271, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[272, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[273, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[274, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[275, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[276, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[277, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[278, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[279, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[280, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[281, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[282, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[283, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[284, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[285, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[316, "polars.Expr.abs"]], "add() (polars.expr method)": [[317, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[318, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[319, "polars.Expr.alias"]], "all() (polars.expr method)": [[320, "polars.Expr.all"]], "and_() (polars.expr method)": [[321, "polars.Expr.and_"]], "any() (polars.expr method)": [[322, "polars.Expr.any"]], "append() (polars.expr method)": [[323, "polars.Expr.append"]], "apply() (polars.expr method)": [[324, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[325, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[326, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[327, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[328, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[329, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[330, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[331, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[332, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[333, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[334, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[335, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[336, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[337, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[338, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[339, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[340, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[341, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[342, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[343, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[344, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[345, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[346, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[347, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[348, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[349, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[350, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[351, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[352, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[353, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[354, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[355, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[356, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[357, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[358, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[359, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[360, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[361, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[362, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[363, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[364, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[365, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[366, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[367, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[368, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[369, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[370, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[371, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[372, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[373, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[374, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[375, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[376, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[377, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[378, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[379, "polars.Expr.cot"]], "count() (polars.expr method)": [[380, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[381, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[382, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[383, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[384, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[385, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[386, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[387, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[388, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[389, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[390, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[391, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[392, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[393, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[394, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[395, "polars.Expr.diff"]], "dot() (polars.expr method)": [[396, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[397, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[398, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[399, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[400, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[401, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[402, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[403, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[404, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[405, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[406, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[407, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[408, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[409, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[410, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[411, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[412, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[413, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[414, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[415, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[416, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[417, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[418, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[419, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[420, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[421, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[422, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[423, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[424, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[425, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[426, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[427, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[428, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[429, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[430, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[431, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[432, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[433, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[434, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[435, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[436, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[437, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[438, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[439, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[443, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[444, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[445, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[446, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[447, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[448, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[449, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[450, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[451, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[452, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[453, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[454, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[455, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[456, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[457, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[458, "polars.Expr.exp"]], "explode() (polars.expr method)": [[459, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[460, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[461, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[462, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[463, "polars.Expr.filter"]], "first() (polars.expr method)": [[464, "polars.Expr.first"]], "flatten() (polars.expr method)": [[465, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[466, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[467, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[468, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[469, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[470, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[471, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[472, "polars.Expr.ge"]], "get() (polars.expr method)": [[473, "polars.Expr.get"]], "gt() (polars.expr method)": [[474, "polars.Expr.gt"]], "hash() (polars.expr method)": [[475, "polars.Expr.hash"]], "head() (polars.expr method)": [[476, "polars.Expr.head"]], "hist() (polars.expr method)": [[477, "polars.Expr.hist"]], "implode() (polars.expr method)": [[478, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[479, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[480, "polars.Expr.interpolate"]], "interpolate_by() (polars.expr method)": [[481, "polars.Expr.interpolate_by"]], "is_between() (polars.expr method)": [[482, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[483, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[484, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[485, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[486, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[487, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[488, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[489, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[490, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[491, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[492, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[493, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[494, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[495, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[496, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[497, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[498, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[499, "polars.Expr.last"]], "le() (polars.expr method)": [[500, "polars.Expr.le"]], "len() (polars.expr method)": [[501, "polars.Expr.len"]], "limit() (polars.expr method)": [[502, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[503, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[504, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[505, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[506, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[507, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[508, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[509, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[510, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[511, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[512, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[513, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[514, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[515, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[516, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[517, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[518, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[519, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[520, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[521, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[522, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[523, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[524, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[525, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[526, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[527, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[528, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[529, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[530, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[531, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[532, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[533, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[534, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[535, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[536, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[537, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[538, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[539, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[540, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[541, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[542, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[543, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[544, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[545, "polars.Expr.list.var"]], "log() (polars.expr method)": [[546, "polars.Expr.log"]], "log10() (polars.expr method)": [[547, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[548, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[549, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[550, "polars.Expr.lt"]], "map() (polars.expr method)": [[551, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[552, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[553, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[554, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[555, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[556, "polars.Expr.max"]], "mean() (polars.expr method)": [[557, "polars.Expr.mean"]], "median() (polars.expr method)": [[558, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[559, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[560, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[561, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[562, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[563, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[564, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[565, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[566, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[567, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[568, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[569, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[570, "polars.Expr.min"]], "mod() (polars.expr method)": [[571, "polars.Expr.mod"]], "mode() (polars.expr method)": [[572, "polars.Expr.mode"]], "mul() (polars.expr method)": [[573, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[574, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[575, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[576, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[577, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[578, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[579, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[580, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[581, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[582, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[583, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[584, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[585, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[586, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[587, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[588, "polars.Expr.neg"]], "not_() (polars.expr method)": [[589, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[590, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[591, "polars.Expr.or_"]], "over() (polars.expr method)": [[592, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[593, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[594, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[595, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[596, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[597, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[598, "polars.Expr.prefix"]], "product() (polars.expr method)": [[599, "polars.Expr.product"]], "qcut() (polars.expr method)": [[600, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[601, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[602, "polars.Expr.radians"]], "rank() (polars.expr method)": [[603, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[604, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[605, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[606, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[607, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[608, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[609, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[610, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[611, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[612, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[613, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[614, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[615, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[616, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[617, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[618, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[619, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[620, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[621, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[622, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[623, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[624, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[625, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[626, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[627, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[628, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[629, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[630, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[631, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[632, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[633, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[634, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[635, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[636, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[637, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[638, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[639, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[640, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[641, "polars.Expr.sign"]], "sin() (polars.expr method)": [[642, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[643, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[644, "polars.Expr.skew"]], "slice() (polars.expr method)": [[645, "polars.Expr.slice"]], "sort() (polars.expr method)": [[646, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[647, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[648, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[649, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[650, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[651, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[652, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[653, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[654, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[655, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[656, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[657, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[658, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[659, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[660, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[661, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[662, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[663, "polars.Expr.str.head"]], "json_decode() (polars.expr.str method)": [[664, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[665, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[666, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[667, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[668, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[669, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[670, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[671, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[672, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[673, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[674, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[675, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[676, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[677, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[678, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[679, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[680, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[681, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[682, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[683, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[684, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[685, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[686, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[687, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[688, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[689, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[690, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[691, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[692, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[693, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[694, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[695, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[696, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[697, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[698, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[699, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[700, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[701, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[702, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[703, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[704, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[705, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[706, "polars.Expr.struct.rename_fields"]], "with_fields() (polars.expr.struct method)": [[707, "polars.Expr.struct.with_fields"]], "sub() (polars.expr method)": [[708, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[709, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[710, "polars.Expr.sum"]], "tail() (polars.expr method)": [[711, "polars.Expr.tail"]], "take() (polars.expr method)": [[712, "polars.Expr.take"]], "take_every() (polars.expr method)": [[713, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[714, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[715, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[716, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[717, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[718, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[719, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[720, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[721, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[722, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[723, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[724, "polars.Expr.var"]], "where() (polars.expr method)": [[725, "polars.Expr.where"]], "xor() (polars.expr method)": [[726, "polars.Expr.xor"]], "all() (in module polars)": [[727, "polars.all"]], "all_horizontal() (in module polars)": [[728, "polars.all_horizontal"]], "any() (in module polars)": [[729, "polars.any"]], "any_horizontal() (in module polars)": [[730, "polars.any_horizontal"]], "apply() (in module polars)": [[731, "polars.apply"]], "approx_n_unique() (in module polars)": [[732, "polars.approx_n_unique"]], "arange() (in module polars)": [[733, "polars.arange"]], "arctan2() (in module polars)": [[734, "polars.arctan2"]], "arctan2d() (in module polars)": [[735, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[736, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[737, "polars.arg_where"]], "business_day_count() (in module polars)": [[738, "polars.business_day_count"]], "coalesce() (in module polars)": [[739, "polars.coalesce"]], "concat_list() (in module polars)": [[740, "polars.concat_list"]], "concat_str() (in module polars)": [[741, "polars.concat_str"]], "corr() (in module polars)": [[742, "polars.corr"]], "count() (in module polars)": [[743, "polars.count"]], "cov() (in module polars)": [[744, "polars.cov"]], "cum_count() (in module polars)": [[745, "polars.cum_count"]], "cum_fold() (in module polars)": [[746, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[747, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[748, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[749, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[750, "polars.cumfold"]], "cumreduce() (in module polars)": [[751, "polars.cumreduce"]], "cumsum() (in module polars)": [[752, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[753, "polars.cumsum_horizontal"]], "date() (in module polars)": [[754, "polars.date"]], "date_range() (in module polars)": [[755, "polars.date_range"]], "date_ranges() (in module polars)": [[756, "polars.date_ranges"]], "datetime() (in module polars)": [[757, "polars.datetime"]], "datetime_range() (in module polars)": [[758, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[759, "polars.datetime_ranges"]], "duration() (in module polars)": [[760, "polars.duration"]], "element() (in module polars)": [[761, "polars.element"]], "exclude() (in module polars)": [[762, "polars.exclude"]], "first() (in module polars)": [[763, "polars.first"]], "fold() (in module polars)": [[764, "polars.fold"]], "format() (in module polars)": [[765, "polars.format"]], "from_epoch() (in module polars)": [[766, "polars.from_epoch"]], "groups() (in module polars)": [[767, "polars.groups"]], "head() (in module polars)": [[768, "polars.head"]], "implode() (in module polars)": [[769, "polars.implode"]], "int_range() (in module polars)": [[770, "polars.int_range"]], "int_ranges() (in module polars)": [[771, "polars.int_ranges"]], "last() (in module polars)": [[772, "polars.last"]], "len() (in module polars)": [[773, "polars.len"]], "lit() (in module polars)": [[774, "polars.lit"]], "map() (in module polars)": [[775, "polars.map"]], "map_batches() (in module polars)": [[776, "polars.map_batches"]], "map_groups() (in module polars)": [[777, "polars.map_groups"]], "max() (in module polars)": [[778, "polars.max"]], "max_horizontal() (in module polars)": [[779, "polars.max_horizontal"]], "mean() (in module polars)": [[780, "polars.mean"]], "mean_horizontal() (in module polars)": [[781, "polars.mean_horizontal"]], "median() (in module polars)": [[782, "polars.median"]], "min() (in module polars)": [[783, "polars.min"]], "min_horizontal() (in module polars)": [[784, "polars.min_horizontal"]], "n_unique() (in module polars)": [[785, "polars.n_unique"]], "nth() (in module polars)": [[786, "polars.nth"]], "ones() (in module polars)": [[787, "polars.ones"]], "quantile() (in module polars)": [[788, "polars.quantile"]], "reduce() (in module polars)": [[789, "polars.reduce"]], "repeat() (in module polars)": [[790, "polars.repeat"]], "rolling_corr() (in module polars)": [[791, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[792, "polars.rolling_cov"]], "select() (in module polars)": [[793, "polars.select"]], "sql_expr() (in module polars)": [[794, "polars.sql_expr"]], "std() (in module polars)": [[795, "polars.std"]], "struct() (in module polars)": [[796, "polars.struct"]], "sum() (in module polars)": [[797, "polars.sum"]], "sum_horizontal() (in module polars)": [[798, "polars.sum_horizontal"]], "tail() (in module polars)": [[799, "polars.tail"]], "time() (in module polars)": [[800, "polars.time"]], "time_range() (in module polars)": [[801, "polars.time_range"]], "time_ranges() (in module polars)": [[802, "polars.time_ranges"]], "var() (in module polars)": [[803, "polars.var"]], "when() (in module polars)": [[804, "polars.when"]], "zeros() (in module polars)": [[805, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[829, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[830, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[831, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[832, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[833, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[834, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[835, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[836, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[837, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[838, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[839, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[840, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[841, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[842, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[843, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[844, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[845, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[846, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[847, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[848, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[849, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[850, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[851, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[852, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[853, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[854, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[855, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[856, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[857, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[858, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[859, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[860, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[861, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[862, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[863, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[864, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[865, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[866, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[867, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[868, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[869, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[870, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[871, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[872, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[873, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[874, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[875, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[876, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[877, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[878, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[879, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[880, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[881, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[882, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[883, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[884, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[885, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[886, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[887, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[888, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[889, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[890, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[891, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[892, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[893, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[894, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[895, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[896, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[897, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[898, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[899, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[900, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[901, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[902, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[903, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[904, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[905, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[906, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[916, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[917, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[931, "module-polars.plugins"], [932, "module-polars.selectors"]], "polars.plugins": [[931, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[931, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[932, "polars.selectors.all"]], "alpha() (in module polars.selectors)": [[932, "polars.selectors.alpha"]], "alphanumeric() (in module polars.selectors)": [[932, "polars.selectors.alphanumeric"]], "binary() (in module polars.selectors)": [[932, "polars.selectors.binary"]], "boolean() (in module polars.selectors)": [[932, "polars.selectors.boolean"]], "by_dtype() (in module polars.selectors)": [[932, "polars.selectors.by_dtype"]], "by_index() (in module polars.selectors)": [[932, "polars.selectors.by_index"]], "by_name() (in module polars.selectors)": [[932, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[932, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[932, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[932, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[932, "polars.selectors.datetime"]], "decimal() (in module polars.selectors)": [[932, "polars.selectors.decimal"]], "digit() (in module polars.selectors)": [[932, "polars.selectors.digit"]], "duration() (in module polars.selectors)": [[932, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[932, "polars.selectors.ends_with"]], "exclude() (in module polars.selectors)": [[932, "polars.selectors.exclude"]], "expand_selector() (in module polars.selectors)": [[932, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[932, "polars.selectors.first"]], "float() (in module polars.selectors)": [[932, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[932, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[932, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[932, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[932, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[932, "polars.selectors.numeric"]], "polars.selectors": [[932, "module-polars.selectors"]], "signed_integer() (in module polars.selectors)": [[932, "polars.selectors.signed_integer"]], "starts_with() (in module polars.selectors)": [[932, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[932, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[932, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[932, "polars.selectors.time"]], "unsigned_integer() (in module polars.selectors)": [[932, "polars.selectors.unsigned_integer"]], "abs() (polars.series method)": [[934, "polars.Series.abs"]], "alias() (polars.series method)": [[935, "polars.Series.alias"]], "all() (polars.series method)": [[936, "polars.Series.all"]], "any() (polars.series method)": [[937, "polars.Series.any"]], "append() (polars.series method)": [[938, "polars.Series.append"]], "apply() (polars.series method)": [[939, "polars.Series.apply"]], "arccos() (polars.series method)": [[940, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[941, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[942, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[943, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[944, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[945, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[946, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[947, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[948, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[949, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[950, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[951, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[952, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[953, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[954, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[955, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[956, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[957, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[958, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[959, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[960, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[961, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[962, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[963, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[964, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[965, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[966, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[967, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[968, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[969, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[970, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[971, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[972, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[973, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[974, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[975, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[976, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[977, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[978, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[979, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[980, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[981, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[982, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[983, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[984, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[985, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[986, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[987, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[988, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[989, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[990, "polars.Series.clear"]], "clip() (polars.series method)": [[991, "polars.Series.clip"]], "clip_max() (polars.series method)": [[992, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[993, "polars.Series.clip_min"]], "clone() (polars.series method)": [[994, "polars.Series.clone"]], "cos() (polars.series method)": [[995, "polars.Series.cos"]], "cosh() (polars.series method)": [[996, "polars.Series.cosh"]], "cot() (polars.series method)": [[997, "polars.Series.cot"]], "cum_max() (polars.series method)": [[998, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[999, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[1000, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[1001, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[1002, "polars.Series.cummax"]], "cummin() (polars.series method)": [[1003, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[1004, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[1005, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[1006, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[1007, "polars.Series.cut"]], "describe() (polars.series method)": [[1008, "polars.Series.describe"]], "diff() (polars.series method)": [[1009, "polars.Series.diff"]], "dot() (polars.series method)": [[1010, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[1011, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[1012, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[1013, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[1014, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[1015, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[1016, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[1017, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[1018, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[1019, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[1020, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[1021, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[1022, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[1023, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[1024, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[1025, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[1026, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[1027, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[1028, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[1029, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[1030, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[1031, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[1032, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[1033, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[1034, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[1035, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[1036, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[1037, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[1038, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[1039, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[1040, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[1041, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[1042, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[1043, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1044, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1045, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1046, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1047, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1048, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1049, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1050, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1051, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1052, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1053, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1054, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1055, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1056, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1057, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1058, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1059, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1060, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1061, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1062, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1063, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1064, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1065, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1066, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1067, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1068, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1069, "polars.Series.entropy"]], "equals() (polars.series method)": [[1070, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1071, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1072, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1073, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1074, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1075, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1076, "polars.Series.exp"]], "explode() (polars.series method)": [[1077, "polars.Series.explode"]], "extend() (polars.series method)": [[1078, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1079, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1080, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1081, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1082, "polars.Series.filter"]], "flags (polars.series attribute)": [[1083, "polars.Series.flags"]], "floor() (polars.series method)": [[1084, "polars.Series.floor"]], "gather() (polars.series method)": [[1085, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1086, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1087, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1088, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1089, "polars.Series.hash"]], "head() (polars.series method)": [[1090, "polars.Series.head"]], "hist() (polars.series method)": [[1091, "polars.Series.hist"]], "implode() (polars.series method)": [[1092, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1093, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1094, "polars.Series.interpolate"]], "interpolate_by() (polars.series method)": [[1095, "polars.Series.interpolate_by"]], "is_between() (polars.series method)": [[1096, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1097, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1098, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1099, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1100, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1101, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1102, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1103, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1104, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1105, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1106, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1107, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1108, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1109, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1110, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1111, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1112, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1113, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1114, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1115, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1116, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1117, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1118, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1119, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1120, "polars.Series.len"]], "limit() (polars.series method)": [[1121, "polars.Series.limit"]], "all() (polars.series.list method)": [[1122, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1123, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1124, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1125, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1126, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1127, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1128, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1129, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1130, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1131, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1132, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1133, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1134, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1135, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1136, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1137, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1138, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1139, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1140, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1141, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1142, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1143, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1144, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1145, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1146, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1147, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1148, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1149, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1150, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1151, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1152, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1153, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1154, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1155, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1156, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1157, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1158, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1159, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1160, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1161, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1162, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1163, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1164, "polars.Series.list.var"]], "log() (polars.series method)": [[1165, "polars.Series.log"]], "log10() (polars.series method)": [[1166, "polars.Series.log10"]], "log1p() (polars.series method)": [[1167, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1168, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1169, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1170, "polars.Series.map_elements"]], "max() (polars.series method)": [[1171, "polars.Series.max"]], "mean() (polars.series method)": [[1172, "polars.Series.mean"]], "median() (polars.series method)": [[1173, "polars.Series.median"]], "min() (polars.series method)": [[1174, "polars.Series.min"]], "mode() (polars.series method)": [[1175, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1176, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1177, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1178, "polars.Series.name"]], "nan_max() (polars.series method)": [[1179, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1180, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1181, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1182, "polars.Series.not_"]], "null_count() (polars.series method)": [[1183, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1184, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1185, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1186, "polars.Series.peak_min"]], "product() (polars.series method)": [[1187, "polars.Series.product"]], "qcut() (polars.series method)": [[1188, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1189, "polars.Series.quantile"]], "rank() (polars.series method)": [[1190, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1191, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1192, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1193, "polars.Series.rename"]], "replace() (polars.series method)": [[1194, "polars.Series.replace"]], "reshape() (polars.series method)": [[1195, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1196, "polars.Series.reverse"]], "rle() (polars.series method)": [[1197, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1198, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1199, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1200, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1201, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1202, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1203, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1204, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1205, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1206, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1207, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1208, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1209, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1210, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1211, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1212, "polars.Series.sample"]], "scatter() (polars.series method)": [[1213, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1214, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1215, "polars.Series.series_equal"]], "set() (polars.series method)": [[1216, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1217, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1218, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1219, "polars.Series.shape"]], "shift() (polars.series method)": [[1220, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1221, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1222, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1223, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1224, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1225, "polars.Series.sign"]], "sin() (polars.series method)": [[1226, "polars.Series.sin"]], "sinh() (polars.series method)": [[1227, "polars.Series.sinh"]], "skew() (polars.series method)": [[1228, "polars.Series.skew"]], "slice() (polars.series method)": [[1229, "polars.Series.slice"]], "sort() (polars.series method)": [[1230, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1231, "polars.Series.sqrt"]], "std() (polars.series method)": [[1232, "polars.Series.std"]], "concat() (polars.series.str method)": [[1233, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1234, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1235, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1236, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1237, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1238, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1239, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1240, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1241, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1242, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1243, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1244, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1245, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1246, "polars.Series.str.head"]], "json_decode() (polars.series.str method)": [[1247, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1248, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1249, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1250, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1251, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1252, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1253, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1254, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1255, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1256, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1257, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1258, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1259, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1260, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1261, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1262, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1263, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1264, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1265, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1266, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1267, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1268, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1269, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1270, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1271, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1272, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1273, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1274, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1275, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1276, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1277, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1278, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1279, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1280, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1281, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1282, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1283, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1284, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1285, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1286, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1287, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1288, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1289, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1290, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1291, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1292, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1293, "polars.Series.sum"]], "tail() (polars.series method)": [[1294, "polars.Series.tail"]], "take() (polars.series method)": [[1295, "polars.Series.take"]], "take_every() (polars.series method)": [[1296, "polars.Series.take_every"]], "tan() (polars.series method)": [[1297, "polars.Series.tan"]], "tanh() (polars.series method)": [[1298, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1299, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1300, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1301, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1302, "polars.Series.to_init_repr"]], "to_jax() (polars.series method)": [[1303, "polars.Series.to_jax"]], "to_list() (polars.series method)": [[1304, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1305, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1306, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1307, "polars.Series.to_physical"]], "to_torch() (polars.series method)": [[1308, "polars.Series.to_torch"]], "top_k() (polars.series method)": [[1309, "polars.Series.top_k"]], "unique() (polars.series method)": [[1310, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1311, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1312, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1313, "polars.Series.value_counts"]], "var() (polars.series method)": [[1314, "polars.Series.var"]], "view() (polars.series method)": [[1315, "polars.Series.view"]], "zip_with() (polars.series method)": [[1316, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1333, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1333, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1333, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1333, "polars.SQLContext.__init__"]]}})